"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withLocalizeUrl = exports.useLocalizeUrl = exports.localizeUrl = exports.urlLocalizationMapping = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const compose_1 = require("@wordpress/compose");
const react_1 = require("react");
const locale_context_1 = require("./locale-context");
const locales_1 = require("./locales");
const INVALID_URL = `http://__domain__.invalid`;
function getDefaultLocale() {
    return (0, locale_context_1.getWpI18nLocaleSlug)() ?? 'en';
}
const setLocalizedUrlHost = (hostname, validLocales = []) => (url, locale) => {
    if (validLocales.includes(locale) && locale !== 'en') {
        // Avoid changing the hostname when the locale is set via the path.
        if (url.pathname.substr(0, locale.length + 2) !== '/' + locale + '/') {
            url.host = `${locales_1.localesToSubdomains[locale] || locale}.${hostname}`;
        }
    }
    return url;
};
const setLocalizedWpComPath = (prefix, validLocales = [], limitPathMatch = null) => (url, localeSlug) => {
    url.host = 'wordpress.com';
    if (typeof limitPathMatch === 'object' &&
        limitPathMatch instanceof RegExp &&
        !limitPathMatch.test(url.pathname)) {
        validLocales = []; // only rewrite to English.
    }
    url.pathname = prefix + url.pathname;
    if (validLocales.includes(localeSlug) && localeSlug !== 'en') {
        url.pathname = localeSlug + url.pathname;
    }
    return url;
};
const prefixOrSuffixLocalizedUrlPath = (validLocales = [], limitPathMatch = null, prefixOrSuffix) => (url, localeSlug) => {
    if (typeof limitPathMatch === 'object' && limitPathMatch instanceof RegExp) {
        if (!limitPathMatch.test(url.pathname)) {
            return url; // No rewriting if not matches the path.
        }
    }
    if (!validLocales.includes(localeSlug) || localeSlug === 'en') {
        return url;
    }
    if (prefixOrSuffix === 'prefix') {
        url.pathname = localeSlug + url.pathname;
    }
    else if (prefixOrSuffix === 'suffix') {
        // Make sure there's a slash between the path and the locale. Plus, if
        // the path has a trailing slash, add one after the suffix too.
        if (url.pathname.endsWith('/')) {
            url.pathname += localeSlug + '/';
        }
        else {
            url.pathname += '/' + localeSlug;
        }
    }
    return url;
};
const prefixLocalizedUrlPath = (validLocales = [], limitPathMatch = null) => (url, localeSlug) => {
    return prefixOrSuffixLocalizedUrlPath(validLocales, limitPathMatch, 'prefix')(url, localeSlug);
};
const suffixLocalizedUrlPath = (validLocales = [], limitPathMatch = null) => (url, localeSlug) => {
    return prefixOrSuffixLocalizedUrlPath(validLocales, limitPathMatch, 'suffix')(url, localeSlug);
};
exports.urlLocalizationMapping = {
    'wordpress.com/support/': prefixLocalizedUrlPath(locales_1.supportSiteLocales),
    'wordpress.com/forums/': prefixLocalizedUrlPath(locales_1.forumLocales),
    'wordpress.com/blog/': prefixLocalizedUrlPath(locales_1.localesWithBlog, /^\/blog\/?$/),
    'wordpress.com/go/': (url, localeSlug) => {
        // Rewrite non-home URLs (e.g. posts) only for Spanish, because that's
        // the only language into which we're currently translating content.
        const isHome = ['/go/', '/go'].includes(url.pathname);
        if (!isHome && 'es' !== localeSlug) {
            return url;
        }
        return prefixLocalizedUrlPath(locales_1.localesWithGoBlog)(url, localeSlug);
    },
    'wordpress.com/pricing/': prefixLocalizedUrlPath(locales_1.localesForPricePlans),
    'wordpress.com/tos/': prefixLocalizedUrlPath(locales_1.magnificentNonEnLocales),
    'wordpress.com/wp-admin/': setLocalizedUrlHost('wordpress.com', locales_1.magnificentNonEnLocales),
    'wordpress.com/wp-login.php': setLocalizedUrlHost('wordpress.com', locales_1.magnificentNonEnLocales),
    'jetpack.com': prefixLocalizedUrlPath(locales_1.jetpackComLocales),
    'cloud.jetpack.com': prefixLocalizedUrlPath(locales_1.jetpackComLocales),
    'en.support.wordpress.com': setLocalizedWpComPath('/support', locales_1.supportSiteLocales),
    'en.blog.wordpress.com': setLocalizedWpComPath('/blog', locales_1.localesWithBlog, /^\/$/),
    'apps.wordpress.com': prefixLocalizedUrlPath(locales_1.magnificentNonEnLocales),
    'en.forums.wordpress.com': setLocalizedWpComPath('/forums', locales_1.forumLocales),
    'automattic.com/privacy/': prefixLocalizedUrlPath(locales_1.localesWithPrivacyPolicy),
    'automattic.com/cookies/': prefixLocalizedUrlPath(locales_1.localesWithCookiePolicy),
    'wordpress.com/help/contact/': (url, localeSlug, isLoggedIn) => {
        if (isLoggedIn) {
            return url;
        }
        url.pathname = url.pathname.replace(/\/help\//, '/support/');
        return prefixLocalizedUrlPath(locales_1.supportSiteLocales)(url, localeSlug);
    },
    'wordpress.com': (url, localeSlug) => {
        // Don't rewrite checkout and me URLs.
        if (/^\/(checkout|me)(\/|$)/.test(url.pathname)) {
            return url;
        }
        // Don't rewrite Calypso URLs that have the URL at the end.
        if (/\/([a-z0-9-]+\.)+[a-z]{2,}\/?$/.test(url.pathname)) {
            return url;
        }
        return prefixLocalizedUrlPath(locales_1.magnificentNonEnLocales)(url, localeSlug);
    },
    'wordpress.com/theme/': (url, localeSlug, isLoggedIn) => {
        return isLoggedIn ? url : prefixLocalizedUrlPath(locales_1.magnificentNonEnLocales)(url, localeSlug);
    },
    'wordpress.com/themes/': (url, localeSlug, isLoggedIn) => {
        return isLoggedIn ? url : prefixLocalizedUrlPath(locales_1.magnificentNonEnLocales)(url, localeSlug);
    },
    'wordpress.com/plugins/': (url, localeSlug, isLoggedIn) => {
        return isLoggedIn ? url : prefixLocalizedUrlPath(locales_1.magnificentNonEnLocales)(url, localeSlug);
    },
    'wordpress.com/log-in/': (url, localeSlug, isLoggedIn) => {
        return isLoggedIn ? url : suffixLocalizedUrlPath(locales_1.magnificentNonEnLocales)(url, localeSlug);
    },
    'wordpress.com/start/': (url, localeSlug, isLoggedIn) => {
        return isLoggedIn ? url : suffixLocalizedUrlPath(locales_1.magnificentNonEnLocales)(url, localeSlug);
    },
    'wordpress.com/learn/': (url, localeSlug) => {
        const webinars = url.pathname.includes('/learn/webinars/');
        if (webinars && 'es' === localeSlug) {
            url.pathname = url.pathname.replace('/learn/webinars/', '/learn/es/webinars/');
            return url;
        }
        return suffixLocalizedUrlPath(locales_1.localesWithLearn)(url, localeSlug);
    },
    'wordpress.com/plans/': (url, localeSlug, isLoggedIn) => {
        // if logged in, or url.pathname contains characters after `/plans/`, don't rewrite
        return isLoggedIn || url.pathname !== '/plans/'
            ? url
            : prefixLocalizedUrlPath(locales_1.localesForPricePlans)(url, localeSlug);
    },
    'wordpress.com/setup/': (url, localeSlug, isLoggedIn) => {
        return isLoggedIn ? url : suffixLocalizedUrlPath(locales_1.magnificentNonEnLocales)(url, localeSlug);
    },
};
function hasTrailingSlash(urlString) {
    try {
        const url = new URL(String(urlString), INVALID_URL);
        return url.pathname.endsWith('/');
    }
    catch (e) {
        return false;
    }
}
function localizeUrl(fullUrl, locale = getDefaultLocale(), isLoggedIn = true, preserveTrailingSlashVariation = false) {
    let url;
    try {
        url = new URL(String(fullUrl), INVALID_URL);
    }
    catch (e) {
        return fullUrl;
    }
    // Ignore and passthrough /relative/urls that have no host specified
    if (url.origin === INVALID_URL) {
        return fullUrl;
    }
    // Let's unify the URL.
    url.protocol = 'https:';
    if (!url.pathname.endsWith('.php')) {
        // Essentially a trailingslashit.
        // We need to do this because the matching list is standardised to use
        // trailing slashes everywhere.
        // However, if the `preserveTrailingSlashVariation` option is enabled, we
        // remove the trailing slash at the end again, when appropriate.
        url.pathname = (url.pathname + '/').replace(/\/+$/, '/');
    }
    const firstPathSegment = url.pathname.substr(0, 1 + url.pathname.indexOf('/', 1));
    if ('en.wordpress.com' === url.host) {
        url.host = 'wordpress.com';
    }
    if ('/' + locale + '/' === firstPathSegment) {
        return fullUrl;
    }
    // Lookup is checked back to front.
    const lookup = [url.host, url.host + firstPathSegment, url.host + url.pathname];
    for (let i = lookup.length - 1; i >= 0; i--) {
        if (lookup[i] in exports.urlLocalizationMapping) {
            const mapped = exports.urlLocalizationMapping[lookup[i]](url, locale, isLoggedIn).href;
            if (!preserveTrailingSlashVariation) {
                return mapped;
            }
            try {
                const mappedUrl = new URL(mapped);
                if (!hasTrailingSlash(fullUrl)) {
                    mappedUrl.pathname = mappedUrl.pathname.replace(/\/+$/, '');
                }
                return mappedUrl.href;
            }
            catch {
                return mapped;
            }
        }
    }
    // Nothing needed to be changed, just return it unmodified.
    return fullUrl;
}
exports.localizeUrl = localizeUrl;
function useLocalizeUrl() {
    const providerLocale = (0, locale_context_1.useLocale)();
    return (0, react_1.useCallback)((fullUrl, locale, isLoggedIn, preserveTrailingSlashVariation) => {
        if (locale) {
            return localizeUrl(fullUrl, locale, isLoggedIn, preserveTrailingSlashVariation);
        }
        return localizeUrl(fullUrl, providerLocale, isLoggedIn, preserveTrailingSlashVariation);
    }, [providerLocale]);
}
exports.useLocalizeUrl = useLocalizeUrl;
exports.withLocalizeUrl = (0, compose_1.createHigherOrderComponent)((InnerComponent) => {
    return (props) => {
        const localizeUrl = useLocalizeUrl();
        const innerProps = { ...props, localizeUrl };
        return (0, jsx_runtime_1.jsx)(InnerComponent, { ...innerProps });
    };
}, 'withLocalizeUrl');
//# sourceMappingURL=localize-url.js.map