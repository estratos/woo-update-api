"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useHasEnTranslation = exports.useIsEnglishLocale = exports.withLocale = exports.useLocale = exports.getWpI18nLocaleSlug = exports.LocaleProvider = exports.localeContext = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const compose_1 = require("@wordpress/compose");
const i18n = tslib_1.__importStar(require("@wordpress/i18n"));
const react_1 = require("react");
const locales_1 = require("./locales");
exports.localeContext = (0, react_1.createContext)(null);
const LocaleProvider = ({ children, localeSlug }) => ((0, jsx_runtime_1.jsx)(exports.localeContext.Provider, { value: localeSlug, children: children }));
exports.LocaleProvider = LocaleProvider;
/**
 * Returns locale slug
 * @param {string} locale locale to be converted e.g. "en_US".
 * @returns locale string e.g. "en"
 */
function mapWpI18nLangToLocaleSlug(locale = '') {
    if (!locale) {
        return '';
    }
    const TARGET_LOCALES = ['pt_br', 'pt-br', 'zh_tw', 'zh-tw', 'zh_cn', 'zh-cn', 'zh_sg', 'zh-sg'];
    const lowerCaseLocale = locale.toLowerCase();
    const formattedLocale = TARGET_LOCALES.includes(lowerCaseLocale)
        ? lowerCaseLocale.replace('_', '-')
        : lowerCaseLocale.replace(/([-_].*)$/i, '');
    return formattedLocale || 'en';
}
/**
 * Get the lang from the @wordpress/i18n locale data
 * @returns lang e.g. "en_US"
 */
function getWpI18nLocaleLang() {
    const localeData = i18n.getLocaleData() || {};
    return localeData['']?.lang || localeData['']?.language || '';
}
/**
 * Get the lang from the @wordpress/i18n locale data and map the value to the locale slug
 * @returns lang e.g. "en", "pt-br", "zh-tw"
 */
function getWpI18nLocaleSlug() {
    const language = getWpI18nLocaleLang();
    return mapWpI18nLangToLocaleSlug(language);
}
exports.getWpI18nLocaleSlug = getWpI18nLocaleSlug;
/**
 * React hook providing the current locale slug. If `<LocaleProvider>` hasn't
 * been defined in the component tree then it will fall back to using the
 * data from `@wordpress/i18n` to determine the current locale slug.
 * @example
 *
 * import { useLocale } from '@automattic/i18n-utils';
 * function MyComponent() {
 *   const locale = useLocale();
 *   return <div>The current locale is: { locale }</div>;
 * }
 */
function useLocale() {
    const fromProvider = (0, react_1.useContext)(exports.localeContext);
    const providerHasLocale = !!fromProvider;
    const [fromWpI18n, setWpLocale] = (0, react_1.useState)(getWpI18nLocaleSlug());
    (0, react_1.useEffect)(() => {
        // If the <LocaleProvider> has been used further up the component tree
        // then we don't want to subscribe to any defaultI18n changes.
        if (providerHasLocale) {
            return;
        }
        setWpLocale(getWpI18nLocaleSlug());
        return i18n.subscribe(() => {
            setWpLocale(getWpI18nLocaleSlug());
        });
    }, [providerHasLocale]);
    return (fromProvider ||
        fromWpI18n ||
        (typeof window !== 'undefined' && window._currentUserLocale) ||
        'en');
}
exports.useLocale = useLocale;
/**
 * HoC providing the current locale slug supplied to `<LocaleProvider>`.
 * @param InnerComponent Component that will receive `locale` as a prop
 * @returns Component enhanced with locale
 * @example
 *
 * import { withLocale } from '@automattic/i18n-utils';
 * function MyComponent( { locale } ) {
 *   return <div>The current locale is: { locale }</div>;
 * }
 * export default withLocale( MyComponent );
 */
exports.withLocale = (0, compose_1.createHigherOrderComponent)((InnerComponent) => {
    return (props) => {
        const locale = useLocale();
        const innerProps = { ...props, locale };
        return (0, jsx_runtime_1.jsx)(InnerComponent, { ...innerProps });
    };
}, 'withLocale');
/**
 * React hook providing whether the current locale slug belongs to English or not
 * @example
 *
 * import { useIsEnglishLocale } from '@automattic/i18n-utils';
 * function MyComponent() {
 *   const isEnglishLocale = useIsEnglishLocale();
 *   return <div>The current locale is English: { isEnglishLocale }</div>;
 * }
 */
function useIsEnglishLocale() {
    const locale = useLocale();
    return locales_1.englishLocales.includes(locale);
}
exports.useIsEnglishLocale = useIsEnglishLocale;
function useHasEnTranslation() {
    const isEnglishLocale = useIsEnglishLocale();
    return (0, react_1.useCallback)((...args) => isEnglishLocale || i18n.hasTranslation(...args), [isEnglishLocale]);
}
exports.useHasEnTranslation = useHasEnTranslation;
//# sourceMappingURL=locale-context.js.map