/**
 * Get localized relative time string for past timestamp.
 * @param options The parameters to be used.
 * @param options.timestamp Web timestamp (milliseconds since Epoch)
 * @param options.locale Locale slug
 * @param options.now The date to be used for "now" in the relative calculation
 * @param options.style The style to be used for formatting. Acceptable values: long, short or narrow
 *   Returns '' for future dates and errors.
 */
export declare const getRelativeTimeString: ({ timestamp, locale, now, style, }: {
    timestamp: number;
    locale: string;
    now?: number | undefined;
    style?: "long" | "short" | "narrow" | undefined;
}) => string;
/**
 * Get ISO date format for timestamp.
 * @param {number} timestamp Web timestamp (milliseconds since Epoch)
 * @returns {string} Formatted ISO date, e.g. '2020-12-20'
 */
export declare const getISODateString: (timestamp: number) => string;
/**
 * Get localized short date format for timestamp.
 * @param {number} timestamp Web timestamp (milliseconds since Epoch)
 * @param {string} locale Locale slug
 * @returns {string} Formatted localized date, e.g. 'Dec 20, 2021' for US English.
 *   Falls back to ISO date string if anything goes wrong.
 */
export declare const getShortDateString: (timestamp: number, locale?: string) => string;
/**
 * Get localized numeric date format for timestamp.
 * @param {number} timestamp Web timestamp (milliseconds since Epoch)
 * @param {string} locale Locale slug
 * @returns {string} Formatted localized date, e.g. '12/20/2021' for US English
 *   Falls back to ISO date string if anything goes wrong.
 */
export declare const getNumericDateString: (timestamp: number, locale?: string) => string;
//# sourceMappingURL=date-utils.d.ts.map