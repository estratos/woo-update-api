"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTrackingPrefs = exports.TRACKING_PREFS_COOKIE_V2 = exports.TRACKING_PREFS_COOKIE_V1 = void 0;
const tslib_1 = require("tslib");
const cookie_1 = tslib_1.__importDefault(require("cookie"));
const is_country_in_gdpr_zone_1 = tslib_1.__importDefault(require("./is-country-in-gdpr-zone"));
const is_region_in_ccpa_zone_1 = tslib_1.__importDefault(require("./is-region-in-ccpa-zone"));
exports.TRACKING_PREFS_COOKIE_V1 = 'sensitive_pixel_option';
exports.TRACKING_PREFS_COOKIE_V2 = 'sensitive_pixel_options';
const prefsDisallowAll = {
    ok: false,
    buckets: {
        essential: true, // essential bucket is always allowed
        analytics: false,
        advertising: false,
    },
};
const prefsAllowAnalyticsGdpr = {
    ok: false, // false is important so the cookie banner is shown
    buckets: {
        essential: true,
        analytics: true, // in GDPR zone, analytics is opt-out
        advertising: false, // in GDPR zone, advertising is opt-in
    },
};
const prefsAllowAll = {
    ok: true,
    buckets: {
        essential: true,
        analytics: true,
        advertising: true,
    },
};
const parseTrackingPrefs = (cookieV2, cookieV1, defaultPrefs = prefsDisallowAll) => {
    const { ok, buckets } = cookieV2 ? JSON.parse(cookieV2) : {};
    if (typeof ok === 'boolean') {
        return {
            ok,
            buckets: {
                ...defaultPrefs.buckets,
                ...buckets,
            },
        };
    }
    else if (cookieV1 && ['yes', 'no'].includes(cookieV1)) {
        return {
            ok: cookieV1 === 'yes',
            buckets: prefsAllowAll.buckets,
        };
    }
    return defaultPrefs;
};
exports.parseTrackingPrefs = parseTrackingPrefs;
/**
 * Returns consents for every Cookie Jar bucket based on privacy driven approach
 *
 * WARNING: this function is meant to work on the client side. If not called
 *          from the client side then it defaults to allow all
 * @returns Whether we may track the current user
 */
function getTrackingPrefs() {
    if (typeof document === 'undefined') {
        //throw new Error( 'getTrackingPrefs() can only be called on the client side' );
        return prefsAllowAll;
    }
    const cookies = cookie_1.default.parse(document.cookie);
    const isCountryGdpr = (0, is_country_in_gdpr_zone_1.default)(cookies.country_code);
    const isCountryCcpa = (0, is_region_in_ccpa_zone_1.default)(cookies.country_code, cookies.region);
    if (!isCountryGdpr && !isCountryCcpa) {
        return prefsAllowAll;
    }
    // default tracking mechanism for GDPR is opt-in for marketing and opt-out for anaytics, for CCPA is opt-out:
    const defaultPrefs = isCountryGdpr ? prefsAllowAnalyticsGdpr : prefsAllowAll;
    const { ok, buckets } = (0, exports.parseTrackingPrefs)(cookies[exports.TRACKING_PREFS_COOKIE_V2], cookies[exports.TRACKING_PREFS_COOKIE_V1], defaultPrefs);
    if (isCountryCcpa) {
        // For CCPA, only the advertising bucket is relevant, the rest are always true
        return {
            ok,
            buckets: {
                ...prefsAllowAll.buckets,
                advertising: buckets.advertising,
            },
        };
    }
    // For CCPA, only the advertising bucket is relevant, the rest are always true
    return { ok, buckets };
}
exports.default = getTrackingPrefs;
//# sourceMappingURL=get-tracking-prefs.js.map