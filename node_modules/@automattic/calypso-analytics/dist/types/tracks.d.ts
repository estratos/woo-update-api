/// <reference types="node" />
import { EventEmitter } from 'events';
declare global {
    interface Window {
        _tkq: Array<Array<any>>;
    }
}
/**
 * Returns a promise that marks whether and when the external Tracks script loads.
 */
export declare function getTracksLoadPromise(): Promise<void>;
export declare function pushEventToTracksQueue(args: Array<any>): void;
export declare const analyticsEvents: EventEmitter;
/**
 * Returns the anoymous id stored in the `tk_ai` cookie
 * @returns The Tracks anonymous user id
 */
export declare function getTracksAnonymousUserId(): string;
export declare function initializeAnalytics(currentUser: any | undefined, superProps: any): Promise<void>;
export declare function identifyUser(userData: any): any;
/**
 * For tracking users between our products, generally passing the id via a request parameter.
 *
 * Use 'anon' for userIdType for anonymous users.
 */
export declare function signalUserFromAnotherProduct(userId: string, userIdType: string): any;
export declare function recordTracksEvent(eventName: string, eventProperties?: any): void;
export declare function recordTracksPageView(urlPath: string, params: any): void;
export declare function recordTracksPageViewWithPageParams(urlPath: string, params?: any): void;
export declare function getGenericSuperPropsGetter(config: (key: string) => string): () => {
    environment: string | undefined;
    environment_id: string;
    site_id_label: string;
    client: string;
};
//# sourceMappingURL=tracks.d.ts.map