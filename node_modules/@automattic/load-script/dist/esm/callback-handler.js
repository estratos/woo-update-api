"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCallbacksMap = getCallbacksMap;
exports.isLoading = isLoading;
exports.addScriptCallback = addScriptCallback;
exports.removeScriptCallback = removeScriptCallback;
exports.removeScriptCallbacks = removeScriptCallbacks;
exports.removeAllScriptCallbacks = removeAllScriptCallbacks;
exports.executeCallbacks = executeCallbacks;
exports.handleRequestSuccess = handleRequestSuccess;
exports.handleRequestError = handleRequestError;

var _debug = _interopRequireDefault(require("debug"));

/** @format */

/**
 * External dependencies
 */
var debug = (0, _debug.default)('lib/load-script/callback-handler');
/**
 * Module variables
 */

var callbacksForURLsInProgress = new Map();

function getCallbacksMap() {
  return callbacksForURLsInProgress;
}

function isLoading(url) {
  return getCallbacksMap().has(url);
}

function addScriptCallback(url, callback) {
  var callbacksMap = getCallbacksMap();

  if (isLoading(url)) {
    debug("Adding a callback for an existing script from \"".concat(url, "\""));
    callbacksMap.get(url).add(callback);
  } else {
    debug("Adding a callback for a new script from \"".concat(url, "\""));
    callbacksMap.set(url, new Set([callback]));
  }
}

function removeScriptCallback(url, callback) {
  debug("Removing a known callback for a script from \"".concat(url, "\""));

  if (!isLoading(url)) {
    return;
  }

  var callbacksMap = getCallbacksMap();
  var callbacksAtUrl = callbacksMap.get(url);
  callbacksAtUrl.delete(callback);

  if (callbacksAtUrl.size === 0) {
    callbacksMap.delete(url);
  }
}

function removeScriptCallbacks(url) {
  debug("Removing all callbacks for a script from \"".concat(url, "\""));
  getCallbacksMap().delete(url);
}

function removeAllScriptCallbacks() {
  debug('Removing all callbacks for scripts from all URLs');
  getCallbacksMap().clear();
}

function executeCallbacks(url) {
  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var callbacksMap = getCallbacksMap();
  var callbacksForUrl = callbacksMap.get(url);

  if (callbacksForUrl) {
    var debugMessage = "Executing callbacks for \"".concat(url, "\"") + (error === null ? ' with success' : " with error \"".concat(error, "\""));
    debug(debugMessage);
    callbacksForUrl.forEach(function (cb) {
      if (typeof cb === 'function') {
        cb(error);
      }
    });
    callbacksMap.delete(url);
  }
}

function handleRequestSuccess() {
  var url = this.getAttribute('src');
  debug("Handling successful request for \"".concat(url, "\""));
  executeCallbacks(url);
  this.onload = null;
}

function handleRequestError() {
  var url = this.getAttribute('src');
  debug("Handling failed request for \"".concat(url, "\""));
  executeCallbacks(url, new Error("Failed to load script \"".concat(url, "\"")));
  this.onerror = null;
}