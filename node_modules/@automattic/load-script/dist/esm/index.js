"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadScript = loadScript;
exports.loadjQueryDependentScript = loadjQueryDependentScript;
Object.defineProperty(exports, "removeScriptCallback", {
  enumerable: true,
  get: function get() {
    return _callbackHandler.removeScriptCallback;
  }
});
exports.JQUERY_URL = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _callbackHandler = require("./callback-handler");

var _domOperations = require("./dom-operations");

/** @format */

/**
 * A little module for loading a external script
 *
 * @format
 */

/**
 * External dependencies
 */
var debug = (0, _debug.default)('package/load-script');
/**
 * Internal dependencies
 */

/**
 * Module variables
 */
var JQUERY_URL = 'https://s0.wp.com/wp-includes/js/jquery/jquery.js'; //
// loadScript and loadjQueryDependentScript
//

exports.JQUERY_URL = JQUERY_URL;

function loadScript(url, callback) {
  // If this script is not currently being loaded, create a script element and attach to document head.
  var shouldLoadScript = !(0, _callbackHandler.isLoading)(url);

  if (shouldLoadScript) {
    // the onload/onerror callbacks are guaranteed to be called asynchronously, so it's ok to first
    // add the element and only then attach callbacks, as long as it happens in one event loop tick.
    (0, _domOperations.attachToHead)((0, _domOperations.createScriptElement)(url));
  } // if callback is provided, behave traditionally


  if (typeof callback === 'function') {
    (0, _callbackHandler.addScriptCallback)(url, callback);
    return;
  } // but if not, return a Promise


  return new Promise(function (resolve, reject) {
    (0, _callbackHandler.addScriptCallback)(url, function (error) {
      if (error === null) {
        resolve();
      } else {
        reject(error);
      }
    });
  });
}

function loadjQueryDependentScript(url, callback) {
  debug("Loading a jQuery dependent script from \"".concat(url, "\""));

  if (window.jQuery) {
    debug("jQuery found on window, skipping jQuery script loading for \"".concat(url, "\""));
    return loadScript(url, callback);
  }

  var loadPromise = loadScript(JQUERY_URL).then(function () {
    return loadScript(url);
  }); // if callback is provided, call it on resolution

  if (typeof callback === 'function') {
    loadPromise.then(function () {
      return callback(null);
    }, function (error) {
      return callback(error);
    });
    return;
  } // if not, return the Promise


  return loadPromise;
}