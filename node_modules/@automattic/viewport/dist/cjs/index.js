"use strict";
// Determine whether a user is viewing calypso from a device within a
// particular mobile-first responsive breakpoint, matching our existing media
// queries. [1]
//
// This function takes a string matching one of our mobile-first breakpoints
// and returns a boolean based on whether the current `window.innerWidth`
// matches. This is used to segment behavior based on device or browser size,
// but should not be used in place of css for design.
//
// Valid breakpoints include:
// - '<480px'
// - '<660px'
// - '<800px'
// - '<960px'
// - '<1040px'
// - '<1280px'
// - '<1400px'
// - '>480px'
// - '>660px'
// - '>800px'
// - '>960px'
// - '>1040px'
// - '>1280px'
// - '>1400px'
// - '480px-660px'
// - '480px-960px'
// - '660px-960px'
//
// As implemented in our sass media query mixins, minimums are exclusive, while
// maximums are inclusive. i.e.,
//
// - '>480px' is equivalent to `@media (min-width: 481px)`
// - '<960px' is equivalent to `@media (max-width: 960px)`
// - '480px-960px' is equivalent to `@media (max-width: 960px) and (min-width: 481px)`
//
// [1] https://github.com/Automattic/wp-calypso/blob/HEAD/docs/coding-guidelines/css.md#media-queries
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveDeviceTypeByViewPort = exports.DEVICE_DESKTOP = exports.DEVICE_TABLET = exports.DEVICE_MOBILE = exports.isTabletResolution = exports.getWindowInnerWidth = exports.subscribeIsDesktop = exports.isDesktop = exports.subscribeIsMobile = exports.isMobile = exports.subscribeIsWithinBreakpoint = exports.isWithinBreakpoint = exports.getMediaQueryList = exports.DESKTOP_BREAKPOINT = exports.MOBILE_BREAKPOINT = void 0;
// FIXME: We can't detect window size on the server, so until we have more intelligent detection,
// use 769, which is just above the general maximum mobile screen width.
const SERVER_WIDTH = 769;
exports.MOBILE_BREAKPOINT = '<480px';
exports.DESKTOP_BREAKPOINT = '>960px';
const isServer = typeof window === 'undefined' || !window.matchMedia;
const noop = () => null;
function addListenerFunctions(obj) {
    return {
        addListener: () => undefined,
        removeListener: () => undefined,
        ...obj,
    };
}
function createMediaQueryList(args) {
    const { min, max } = args ?? {};
    if (min !== undefined && max !== undefined) {
        return isServer
            ? addListenerFunctions({ matches: SERVER_WIDTH > min && SERVER_WIDTH <= max })
            : window.matchMedia(`(min-width: ${min + 1}px) and (max-width: ${max}px)`);
    }
    if (min !== undefined) {
        return isServer
            ? addListenerFunctions({ matches: SERVER_WIDTH > min })
            : window.matchMedia(`(min-width: ${min + 1}px)`);
    }
    if (max !== undefined) {
        return isServer
            ? addListenerFunctions({ matches: SERVER_WIDTH <= max })
            : window.matchMedia(`(max-width: ${max}px)`);
    }
    return false;
}
const mediaQueryLists = {
    '<480px': createMediaQueryList({ max: 480 }),
    '<660px': createMediaQueryList({ max: 660 }),
    '<782px': createMediaQueryList({ max: 782 }),
    '<800px': createMediaQueryList({ max: 800 }),
    '<960px': createMediaQueryList({ max: 960 }),
    '<1040px': createMediaQueryList({ max: 1040 }),
    '<1280px': createMediaQueryList({ max: 1280 }),
    '<1400px': createMediaQueryList({ max: 1400 }),
    '>480px': createMediaQueryList({ min: 480 }),
    '>660px': createMediaQueryList({ min: 660 }),
    '>782px': createMediaQueryList({ min: 782 }),
    '>800px': createMediaQueryList({ min: 800 }),
    '>960px': createMediaQueryList({ min: 960 }),
    '>1040px': createMediaQueryList({ min: 1040 }),
    '>1280px': createMediaQueryList({ min: 1280 }),
    '>1400px': createMediaQueryList({ min: 1400 }),
    '480px-660px': createMediaQueryList({ min: 480, max: 660 }),
    '660px-960px': createMediaQueryList({ min: 660, max: 960 }),
    '480px-960px': createMediaQueryList({ min: 480, max: 960 }),
};
function getMediaQueryList(breakpoint) {
    if (!mediaQueryLists.hasOwnProperty(breakpoint)) {
        try {
            // eslint-disable-next-line no-console
            console.warn('Undefined breakpoint used in `mobile-first-breakpoint`', breakpoint);
        }
        catch (e) { }
        return undefined;
    }
    return mediaQueryLists[breakpoint];
}
exports.getMediaQueryList = getMediaQueryList;
/**
 * Returns whether the current window width matches a breakpoint.
 *
 * @param {string} breakpoint The breakpoint to consider.
 * @returns {boolean|undefined} Whether the provided breakpoint is matched.
 */
function isWithinBreakpoint(breakpoint) {
    const mediaQueryList = getMediaQueryList(breakpoint);
    return mediaQueryList ? mediaQueryList.matches : undefined;
}
exports.isWithinBreakpoint = isWithinBreakpoint;
/**
 * Registers a listener to be notified of changes to breakpoint matching status.
 *
 * @param {string} breakpoint The breakpoint to consider.
 * @param {Function} listener The listener to be called on change.
 * @returns {Function} The function to be called when unsubscribing.
 */
function subscribeIsWithinBreakpoint(breakpoint, listener) {
    if (!listener) {
        return noop;
    }
    const mediaQueryList = getMediaQueryList(breakpoint);
    if (mediaQueryList && !isServer) {
        const wrappedListener = (evt) => listener(evt.matches);
        mediaQueryList.addListener(wrappedListener);
        // Return unsubscribe function.
        return () => mediaQueryList.removeListener(wrappedListener);
    }
    return noop;
}
exports.subscribeIsWithinBreakpoint = subscribeIsWithinBreakpoint;
/**
 * Returns whether the current window width matches the mobile breakpoint.
 *
 * @returns {boolean|undefined} Whether the mobile breakpoint is matched.
 */
function isMobile() {
    return isWithinBreakpoint(exports.MOBILE_BREAKPOINT);
}
exports.isMobile = isMobile;
/**
 * Registers a listener to be notified of changes to mobile breakpoint matching status.
 *
 * @param {Function} listener The listener to be called on change.
 * @returns {Function} The registered subscription; undefined if none.
 */
function subscribeIsMobile(listener) {
    return subscribeIsWithinBreakpoint(exports.MOBILE_BREAKPOINT, listener);
}
exports.subscribeIsMobile = subscribeIsMobile;
/**
 * Returns whether the current window width matches the desktop breakpoint.
 *
 * @returns {boolean|undefined} Whether the desktop breakpoint is matched.
 */
function isDesktop() {
    return isWithinBreakpoint(exports.DESKTOP_BREAKPOINT);
}
exports.isDesktop = isDesktop;
/**
 * Registers a listener to be notified of changes to desktop breakpoint matching status.
 *
 * @param {Function} listener The listener to be called on change.
 * @returns {Function} The registered subscription; undefined if none.
 */
function subscribeIsDesktop(listener) {
    return subscribeIsWithinBreakpoint(exports.DESKTOP_BREAKPOINT, listener);
}
exports.subscribeIsDesktop = subscribeIsDesktop;
/**
 * Returns the current window width.
 * Avoid using this method, as it triggers a layout recalc.
 *
 * @returns {number} The current window width, in pixels.
 */
function getWindowInnerWidth() {
    return isServer ? SERVER_WIDTH : window.innerWidth;
}
exports.getWindowInnerWidth = getWindowInnerWidth;
/******************************************/
/*       Vertical Scroll Experiment       */
/*  	       pcbrnV-XN-p2               */
/******************************************/
//TODO: To be refactored using above using the DESKTOP_BREAKPOINT constant
function isTabletResolution() {
    if (!isServer) {
        return window.innerWidth < 1040;
    }
    return false;
}
exports.isTabletResolution = isTabletResolution;
exports.DEVICE_MOBILE = 'mobile';
exports.DEVICE_TABLET = 'tablet';
exports.DEVICE_DESKTOP = 'desktop';
function resolveDeviceTypeByViewPort() {
    if (isMobile()) {
        return exports.DEVICE_MOBILE;
    }
    else if (isTabletResolution()) {
        return exports.DEVICE_TABLET;
    }
    return exports.DEVICE_DESKTOP;
}
exports.resolveDeviceTypeByViewPort = resolveDeviceTypeByViewPort;
/******************************************/
//# sourceMappingURL=index.js.map