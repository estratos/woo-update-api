"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBreakpoint = useBreakpoint;
exports.useDesktopBreakpoint = useDesktopBreakpoint;
exports.useMobileBreakpoint = useMobileBreakpoint;
exports.withMobileBreakpoint = exports.withDesktopBreakpoint = exports.withBreakpoint = void 0;
var _viewport = require("@automattic/viewport");
var _compose = require("@wordpress/compose");
var _react = require("react");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * React hook for getting the status for a breakpoint and keeping it updated.
 * @param {string} breakpoint The breakpoint to consider.
 * @returns {boolean} The current status for the breakpoint.
 */
function useBreakpoint(breakpoint) {
  const [state, setState] = (0, _react.useState)(() => ({
    isActive: (0, _viewport.isWithinBreakpoint)(breakpoint),
    breakpoint
  }));
  (0, _react.useEffect)(() => {
    function handleBreakpointChange(isActive) {
      setState(prevState => {
        // Ensure we bail out without rendering if nothing changes, by preserving state.
        if (prevState.isActive === isActive && prevState.breakpoint === breakpoint) {
          return prevState;
        }
        return {
          isActive,
          breakpoint
        };
      });
    }
    const unsubscribe = (0, _viewport.subscribeIsWithinBreakpoint)(breakpoint, handleBreakpointChange);
    // The unsubscribe function is the entire cleanup for the effect.
    return unsubscribe;
  }, [breakpoint]);
  return breakpoint === state.breakpoint ? state.isActive : (0, _viewport.isWithinBreakpoint)(breakpoint);
}

/**
 * React hook for getting the status for the mobile breakpoint and keeping it
 * updated.
 * @returns {boolean} The current status for the breakpoint.
 */
function useMobileBreakpoint() {
  return useBreakpoint(_viewport.MOBILE_BREAKPOINT);
}

/**
 * React hook for getting the status for the desktop breakpoint and keeping it
 * updated.
 * @returns {boolean} The current status for the breakpoint.
 */
function useDesktopBreakpoint() {
  return useBreakpoint(_viewport.DESKTOP_BREAKPOINT);
}

/**
 * React higher order component for getting the status for a breakpoint and
 * keeping it updated.
 * @param {string} breakpoint The breakpoint to consider.
 * @returns {Function} A function that given a component returns the
 * wrapped component.
 */
const withBreakpoint = breakpoint => (0, _compose.createHigherOrderComponent)(WrappedComponent => /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const isActive = useBreakpoint(breakpoint);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(WrappedComponent, {
    ...props,
    isBreakpointActive: isActive,
    ref: ref
  });
}), 'WithBreakpoint');

/**
 * React higher order component for getting the status for the mobile
 * breakpoint and keeping it updated.
 * @param {import('react').Component|Function} Wrapped The component to wrap.
 * @returns {Function} The wrapped component.
 */
exports.withBreakpoint = withBreakpoint;
const withMobileBreakpoint = exports.withMobileBreakpoint = (0, _compose.createHigherOrderComponent)(WrappedComponent => /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const isActive = useBreakpoint(_viewport.MOBILE_BREAKPOINT);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(WrappedComponent, {
    ...props,
    isBreakpointActive: isActive,
    ref: ref
  });
}), 'WithMobileBreakpoint');

/**
 * React higher order component for getting the status for the desktop
 * breakpoint and keeping it updated.
 * @param {import('react').Component|Function} Wrapped The component to wrap.
 * @returns {Function} The wrapped component.
 */
const withDesktopBreakpoint = exports.withDesktopBreakpoint = (0, _compose.createHigherOrderComponent)(WrappedComponent => /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const isActive = useBreakpoint(_viewport.DESKTOP_BREAKPOINT);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(WrappedComponent, {
    ...props,
    isBreakpointActive: isActive,
    ref: ref
  });
}), 'WithDesktopBreakpoint');