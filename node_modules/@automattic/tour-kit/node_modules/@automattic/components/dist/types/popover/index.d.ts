export default Popover;
declare function Popover({ isVisible, showDelay, hideArrow, ...props }: {
    [x: string]: any;
    isVisible?: boolean | undefined;
    showDelay?: number | undefined;
    hideArrow?: boolean | undefined;
}): import("react/jsx-runtime").JSX.Element | null;
declare namespace Popover {
    namespace propTypes {
        export let hideArrow: PropTypes.Requireable<boolean>;
        export let autoPosition: PropTypes.Requireable<boolean>;
        export let autoRtl: PropTypes.Requireable<boolean>;
        export let className: PropTypes.Requireable<string>;
        export let closeOnEsc: PropTypes.Requireable<boolean>;
        export let id: PropTypes.Requireable<string>;
        export { PropTypeElement as context };
        export { PropTypeElement as ignoreContext };
        export let isVisible: PropTypes.Requireable<boolean>;
        export let focusOnShow: PropTypes.Requireable<boolean>;
        export let position: PropTypes.Requireable<string>;
        export let showDelay: PropTypes.Requireable<number>;
        export let onShow: PropTypes.Requireable<(...args: any[]) => any>;
        export let onClose: PropTypes.Requireable<(...args: any[]) => any>;
        export let relativePosition: PropTypes.Requireable<PropTypes.InferProps<{
            left: PropTypes.Requireable<number>;
        }>>;
        export let customPosition: PropTypes.Requireable<PropTypes.InferProps<{
            top: PropTypes.Requireable<number>;
            left: PropTypes.Requireable<number>;
            positionClass: PropTypes.Requireable<string>;
        }>>;
    }
}
import PropTypes from 'prop-types';
declare const PropTypeElement: PropTypes.Requireable<Object>;
//# sourceMappingURL=index.d.ts.map