export function Count({ count, primary, compact, forwardRef, numberFormat, translate, locale, ...props }: {
    [x: string]: any;
    count: any;
    primary?: boolean | undefined;
    compact?: boolean | undefined;
    forwardRef: any;
    numberFormat: any;
    translate: any;
    locale: any;
}): import("react/jsx-runtime").JSX.Element;
export namespace Count {
    namespace propTypes {
        let count: PropTypes.Validator<number>;
        let numberFormat: PropTypes.Requireable<(...args: any[]) => any>;
        let primary: PropTypes.Requireable<boolean>;
        let compact: PropTypes.Requireable<boolean>;
    }
}
declare const _default: import("i18n-calypso").LocalizedComponent<{
    ({ count, primary, compact, forwardRef, numberFormat, translate, locale, ...props }: {
        [x: string]: any;
        count: any;
        primary?: boolean | undefined;
        compact?: boolean | undefined;
        forwardRef: any;
        numberFormat: any;
        translate: any;
        locale: any;
    }): import("react/jsx-runtime").JSX.Element;
    propTypes: {
        count: PropTypes.Validator<number>;
        numberFormat: PropTypes.Requireable<(...args: any[]) => any>;
        primary: PropTypes.Requireable<boolean>;
        compact: PropTypes.Requireable<boolean>;
    };
}>;
export default _default;
import PropTypes from 'prop-types';
//# sourceMappingURL=index.d.ts.map