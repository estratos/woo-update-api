import type { ElementType, ComponentProps, ReactNode } from 'react';
import './style.scss';
export type TagName<P = any> = ElementType<P>;
type OwnProps = {
    className?: string;
    displayAsLink?: boolean;
    href?: string;
    target?: string;
    compact?: boolean;
    highlight?: 'error' | 'info' | 'success' | 'warning';
    showLinkIcon?: boolean;
};
type ElementProps<P, T extends TagName> = P & Omit<ComponentProps<T>, 'tagName' | keyof P> & {
    tagName?: T | keyof JSX.IntrinsicElements;
    children?: ReactNode;
};
export type Props<T extends TagName> = ElementProps<OwnProps, T>;
declare const _default: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<Omit<Props<TagName<any>>, "ref"> & import("react").RefAttributes<any>>>;
export default _default;
//# sourceMappingURL=index.d.ts.map