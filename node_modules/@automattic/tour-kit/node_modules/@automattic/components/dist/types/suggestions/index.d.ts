import { Component } from 'react';
/**
 * Style depenedencies
 */
import './style.scss';
type Suggestion = {
    name: string;
    label: string;
    category?: string;
};
type CategorizedSuggestions = {
    category?: string;
    categoryKey: string;
    suggestions: (Suggestion & {
        originalIndex: number;
        index: number;
    })[];
}[];
interface Props {
    query: string;
    suggestions: Suggestion[];
    suggest: (suggestion: Suggestion, index: number) => void;
    railcar?: unknown;
    title: string;
    className?: string;
    onSuggestionItemMount?: (arg: {
        suggestionIndex: number;
        index: number;
    }) => void;
}
interface State {
    lastSuggestions: null | Suggestion[];
    suggestionPosition: number;
}
declare class Suggestions extends Component<Props, State> {
    static defaultProps: {
        query: string;
        onSuggestionItemMount: () => void;
    };
    state: {
        lastSuggestions: null;
        suggestionPosition: number;
    };
    refsCollection: Record<string, HTMLButtonElement | null>;
    static getDerivedStateFromProps(props: Props, state: State): State | null;
    getSuggestionsCount: () => number;
    getOriginalIndexFromPosition: (index: number) => number;
    suggest: (originalIndex: number) => void;
    moveSelectionDown: () => void;
    moveSelectionUp: () => void;
    changePosition: (position: number) => void;
    handleKeyEvent: (event: KeyboardEvent) => void;
    handleMouseDown: (originalIndex: number) => void;
    handleMouseOver: (suggestionPosition: number) => void;
    getCategories(): CategorizedSuggestions;
    render(): import("react/jsx-runtime").JSX.Element | null;
}
export default Suggestions;
//# sourceMappingURL=index.d.ts.map