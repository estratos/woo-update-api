export default SelectDropdown;
export const SelectDropdownForwardingRef: import("react").ForwardRefExoticComponent<import("react").RefAttributes<any>>;
declare class SelectDropdown extends Component<any, any, any> {
    static Item: typeof DropdownItem;
    static Separator: typeof DropdownSeparator;
    static Label: typeof DropdownLabel;
    static propTypes: {
        id: PropTypes.Requireable<string>;
        selectedText: (props?: any, propName?: any, componentName?: any, location?: any) => any;
        selectedIcon: PropTypes.Requireable<PropTypes.ReactElementLike>;
        selectedCount: PropTypes.Requireable<number>;
        selectedSecondaryIcon: PropTypes.Requireable<PropTypes.ReactElementLike>;
        positionSelectedSecondaryIconOnRight: PropTypes.Requireable<boolean>;
        initialSelected: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        onToggle: PropTypes.Requireable<(...args: any[]) => any>;
        focusSibling: PropTypes.Requireable<(...args: any[]) => any>;
        tabIndex: PropTypes.Requireable<number>;
        disabled: PropTypes.Requireable<boolean>;
        options: PropTypes.Requireable<(PropTypes.InferProps<{
            value: PropTypes.Validator<string>;
            label: PropTypes.Validator<{}>;
            path: PropTypes.Requireable<string>;
            icon: PropTypes.Requireable<PropTypes.ReactElementLike>;
            secondaryIcon: PropTypes.Requireable<PropTypes.ReactElementLike>;
            count: PropTypes.Requireable<number>;
        }> | null | undefined)[]>;
        isLoading: PropTypes.Requireable<boolean>;
        ariaLabel: PropTypes.Requireable<string>;
        showSelectedOption: PropTypes.Requireable<boolean>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    static defaultProps: {
        options: never[];
        onSelect: (...args: any[]) => void;
        onToggle: (...args: any[]) => void;
        style: {};
        showSelectedOption: boolean;
    };
    constructor(props: any);
    instanceId: string;
    state: {
        isOpen: boolean;
        selected: any;
    };
    itemRefs: any[];
    setItemRef: (index: any) => (itemEl: any) => void;
    dropdownContainerRef: any;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    getInitialSelectedItem(): any;
    getSelectedText(): any;
    getSelectedIcon(): any;
    getSelectedSecondaryIcon(): any;
    dropdownOptions(): any;
    render(): import("react/jsx-runtime").JSX.Element;
    toggleDropdown: () => void;
    openDropdown(): void;
    closeDropdown(): void;
    onSelectItem(option: any): () => void;
    selectItem(option: any): void;
    navigateItem: (event: any) => void;
    navigateItemByTabKey(event: any): void;
    activateItem(): void;
    focusSibling(direction: any): void;
    focused: any;
    handleOutsideClick: (event: any) => void;
}
import { Component } from 'react';
import DropdownItem from './item';
import DropdownSeparator from './separator';
import DropdownLabel from './label';
import PropTypes from 'prop-types';
//# sourceMappingURL=index.d.ts.map