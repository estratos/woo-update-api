"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanPrice = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const format_currency_1 = require("@automattic/format-currency");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
const react_1 = require("react");
const __1 = require("../");
require("./style.scss");
class PlanPrice extends react_1.Component {
    render() {
        const { currencyCode = 'USD', rawPrice, isSmallestUnit, original, discounted, className, displayFlatPrice, displayPerMonthNotation, productDisplayPrice, isOnSale, taxText, omitHeading, priceDisplayWrapperClassName, isLargeCurrency, } = this.props;
        const classes = (0, clsx_1.default)('plan-price', className, {
            'is-original': original,
            'is-discounted': discounted,
            'is-large-currency': isLargeCurrency,
        });
        const tagName = omitHeading ? 'span' : 'h4';
        const areThereMultipleRawPrices = rawPrice && Array.isArray(rawPrice) && rawPrice.length > 1;
        if (productDisplayPrice && !areThereMultipleRawPrices) {
            return (0, react_1.createElement)(tagName, { className: classes }, (0, jsx_runtime_1.jsx)("span", { className: "plan-price__integer", 
                // eslint-disable-next-line react/no-danger
                dangerouslySetInnerHTML: { __html: productDisplayPrice } }));
        }
        if (!currencyCode || rawPrice === undefined || rawPrice === null) {
            return null;
        }
        // "Normalize" the input price or price range.
        const rawPriceRange = Array.isArray(rawPrice) ? rawPrice.slice(0, 2) : [rawPrice];
        // If zero is in an array of length 2, render nothing
        if (Array.isArray(rawPrice) && rawPriceRange.includes(0)) {
            return null;
        }
        if (displayFlatPrice) {
            return ((0, jsx_runtime_1.jsx)(FlatPriceDisplay, { smallerPrice: rawPriceRange[0], higherPrice: rawPriceRange[1], currencyCode: currencyCode, className: classes, isSmallestUnit: isSmallestUnit }));
        }
        return ((0, jsx_runtime_1.jsx)(MultiPriceDisplay, { className: classes, tagName: tagName, smallerPrice: rawPriceRange[0], higherPrice: rawPriceRange[1], currencyCode: currencyCode, taxText: taxText, displayPerMonthNotation: displayPerMonthNotation, isOnSale: isOnSale, priceDisplayWrapperClassName: priceDisplayWrapperClassName, isSmallestUnit: isSmallestUnit }));
    }
}
exports.PlanPrice = PlanPrice;
exports.default = PlanPrice;
function PriceWithoutHtml({ price, currencyCode, isSmallestUnit, }) {
    const priceObj = (0, format_currency_1.getCurrencyObject)(price, currencyCode, { isSmallestUnit });
    if (priceObj.hasNonZeroFraction) {
        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: `${priceObj.integer}${priceObj.fraction}` });
    }
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: priceObj.integer });
}
function FlatPriceDisplay({ smallerPrice, higherPrice, currencyCode, className, isSmallestUnit, }) {
    const { symbol: currencySymbol, symbolPosition } = (0, format_currency_1.getCurrencyObject)(smallerPrice, currencyCode);
    const translate = (0, i18n_calypso_1.useTranslate)();
    if (!higherPrice) {
        return ((0, jsx_runtime_1.jsxs)("span", { className: className, children: [symbolPosition === 'before' ? currencySymbol : null, (0, jsx_runtime_1.jsx)(PriceWithoutHtml, { price: smallerPrice, currencyCode: currencyCode, isSmallestUnit: isSmallestUnit }), symbolPosition === 'after' ? currencySymbol : null] }));
    }
    return ((0, jsx_runtime_1.jsxs)("span", { className: className, children: [symbolPosition === 'before' ? currencySymbol : null, translate('%(smallerPrice)s-%(higherPrice)s', {
                args: {
                    smallerPrice: ((0, jsx_runtime_1.jsx)(PriceWithoutHtml, { price: smallerPrice, currencyCode: currencyCode, isSmallestUnit: isSmallestUnit })),
                    higherPrice: ((0, jsx_runtime_1.jsx)(PriceWithoutHtml, { price: higherPrice, currencyCode: currencyCode, isSmallestUnit: isSmallestUnit })),
                },
                comment: 'The price range for a particular product',
            }), symbolPosition === 'after' ? currencySymbol : null] }));
}
function MultiPriceDisplay({ tagName, className, smallerPrice, higherPrice, currencyCode, taxText, displayPerMonthNotation, isOnSale, priceDisplayWrapperClassName, isSmallestUnit, }) {
    const { symbol: currencySymbol, symbolPosition } = (0, format_currency_1.getCurrencyObject)(smallerPrice, currencyCode);
    const translate = (0, i18n_calypso_1.useTranslate)();
    return (0, react_1.createElement)(tagName, { className }, (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [symbolPosition === 'before' ? ((0, jsx_runtime_1.jsx)("sup", { className: "plan-price__currency-symbol", children: currencySymbol })) : null, !higherPrice && ((0, jsx_runtime_1.jsx)(HtmlPriceDisplay, { price: smallerPrice, currencyCode: currencyCode, priceDisplayWrapperClassName: priceDisplayWrapperClassName, isSmallestUnit: isSmallestUnit })), higherPrice &&
                translate('{{smallerPrice/}}-{{higherPrice/}}', {
                    components: {
                        smallerPrice: ((0, jsx_runtime_1.jsx)(HtmlPriceDisplay, { price: smallerPrice, currencyCode: currencyCode, priceDisplayWrapperClassName: priceDisplayWrapperClassName, isSmallestUnit: isSmallestUnit })),
                        higherPrice: ((0, jsx_runtime_1.jsx)(HtmlPriceDisplay, { price: higherPrice, currencyCode: currencyCode, priceDisplayWrapperClassName: priceDisplayWrapperClassName, isSmallestUnit: isSmallestUnit })),
                    },
                    comment: 'The price range for a particular product',
                }), symbolPosition === 'after' ? ((0, jsx_runtime_1.jsx)("sup", { className: "plan-price__currency-symbol", children: currencySymbol })) : null, taxText && ((0, jsx_runtime_1.jsx)("sup", { className: "plan-price__tax-amount", children: translate('(+%(taxText)s tax)', { args: { taxText } }) })), displayPerMonthNotation && ((0, jsx_runtime_1.jsx)("span", { className: "plan-price__term", children: translate('per{{newline/}}month', {
                    components: { newline: (0, jsx_runtime_1.jsx)("br", {}) },
                    comment: 'Displays next to the price. You can remove the "{{newline/}}" if it is not proper for your language.',
                }) })), isOnSale && ((0, jsx_runtime_1.jsx)(__1.Badge, { children: translate('Sale', {
                    comment: 'Shown next to a domain that has a special discounted sale price',
                }) }))] }));
}
function HtmlPriceDisplay({ price, currencyCode, priceDisplayWrapperClassName, isSmallestUnit, }) {
    const priceObj = (0, format_currency_1.getCurrencyObject)(price, currencyCode, { isSmallestUnit });
    if (priceDisplayWrapperClassName) {
        return ((0, jsx_runtime_1.jsx)("div", { className: priceDisplayWrapperClassName, children: (0, jsx_runtime_1.jsxs)("span", { className: "plan-price__integer", children: [priceObj.integer, priceObj.hasNonZeroFraction && priceObj.fraction] }) }));
    }
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("span", { className: "plan-price__integer", children: priceObj.integer }), (0, jsx_runtime_1.jsx)("sup", { className: "plan-price__fraction", children: priceObj.hasNonZeroFraction && priceObj.fraction })] }));
}
//# sourceMappingURL=index.js.map