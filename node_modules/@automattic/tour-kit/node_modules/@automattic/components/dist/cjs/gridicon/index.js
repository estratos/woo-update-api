"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const icons_offset_1 = require("gridicons/dist/util/icons-offset");
const gridicons_svg_1 = tslib_1.__importDefault(require("gridicons/svg-sprite/gridicons.svg"));
const React = tslib_1.__importStar(require("react"));
function isCrossOrigin(url) {
    if (typeof window === 'undefined') {
        return false;
    }
    return new URL(url, window.location.href).origin !== window.location.origin;
}
/**
 * Fetches the SVG file and creates a proxy URL for it.
 * @param url the original cross-origin URL
 * @returns the proxied URL.
 */
function useProxiedURL(url) {
    const [urlProxy, setUrlProxy] = React.useState(() => isCrossOrigin(url) ? undefined : url);
    React.useEffect(() => {
        if (isCrossOrigin(url)) {
            setUrlProxy(undefined);
            fetch(url)
                .then((res) => res.blob())
                .then((blob) => {
                const urlProxy = URL.createObjectURL(blob);
                setUrlProxy(urlProxy);
            })
                .catch(() => { });
        }
        else {
            setUrlProxy(url);
        }
    }, [url]);
    return urlProxy;
}
const Gridicon = React.memo(React.forwardRef((props, ref) => {
    const { size = 24, icon, className, title, ...otherProps } = props;
    const isModulo18 = size % 18 === 0;
    // Proxy URL to support cross-origin SVGs.
    const proxiedSpritePath = useProxiedURL(gridicons_svg_1.default);
    // Using a missing icon doesn't produce any errors, just a blank icon, which is the exact intended behaviour.
    // This means we don't need to perform any checks on the icon name.
    const iconName = `gridicons-${icon}`;
    const iconClass = (0, clsx_1.default)('gridicon', iconName, className, {
        'needs-offset': isModulo18 && icons_offset_1.iconsThatNeedOffset.includes(iconName),
        'needs-offset-x': isModulo18 && icons_offset_1.iconsThatNeedOffsetX.includes(iconName),
        'needs-offset-y': isModulo18 && icons_offset_1.iconsThatNeedOffsetY.includes(iconName),
    });
    return ((0, jsx_runtime_1.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", className: iconClass, height: size, width: size, ref: ref, ...otherProps, children: [title && (0, jsx_runtime_1.jsx)("title", { children: title }), proxiedSpritePath && (0, jsx_runtime_1.jsx)("use", { xlinkHref: `${proxiedSpritePath}#${iconName}` })] }));
}));
Gridicon.displayName = 'Gridicon';
exports.default = Gridicon;
//# sourceMappingURL=index.js.map