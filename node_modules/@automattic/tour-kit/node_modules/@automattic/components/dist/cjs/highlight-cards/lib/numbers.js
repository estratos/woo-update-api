"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.percentCalculator = exports.subtract = exports.formatPercentage = exports.formatNumber = void 0;
const tslib_1 = require("tslib");
const format_number_1 = tslib_1.__importStar(require("../../number-formatters/lib/format-number"));
function formatNumber(number, isShortened = true, showSign = false) {
    const option = isShortened
        ? { ...format_number_1.COMPACT_FORMATTING_OPTIONS }
        : { ...format_number_1.STANDARD_FORMATTING_OPTIONS };
    if (showSign) {
        option.signDisplay = 'exceptZero';
    }
    return (0, format_number_1.default)(number, format_number_1.DEFAULT_LOCALE, option);
}
exports.formatNumber = formatNumber;
function formatPercentage(number, usePreciseSmallPercentages = false) {
    // If the number is < 1%, then use 2 significant digits and maximumFractionDigits of 2.
    // Otherwise, use the default percentage formatting options.
    const option = usePreciseSmallPercentages && number && number < 0.01
        ? { ...format_number_1.PERCENTAGE_FORMATTING_OPTIONS, maximumFractionDigits: 2, maximumSignificantDigits: 2 }
        : format_number_1.PERCENTAGE_FORMATTING_OPTIONS;
    return (0, format_number_1.default)(number, format_number_1.DEFAULT_LOCALE, option);
}
exports.formatPercentage = formatPercentage;
function subtract(a, b) {
    return a === null || b === null || b === undefined ? null : a - b;
}
exports.subtract = subtract;
function percentCalculator(part, whole) {
    if (part === null || whole === null || whole === undefined) {
        return null;
    }
    // Handle NaN case.
    if (part === 0 && whole === 0) {
        return 0;
    }
    const answer = part / whole;
    // Handle Infinities as 100%.
    return !Number.isFinite(answer) ? 1 : answer;
}
exports.percentCalculator = percentCalculator;
//# sourceMappingURL=numbers.js.map