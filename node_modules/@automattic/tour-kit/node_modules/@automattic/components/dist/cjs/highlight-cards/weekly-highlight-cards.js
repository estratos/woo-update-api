"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BETWEEN_PAST_THIRTY_ONE_AND_SIXTY_DAYS = exports.BETWEEN_PAST_EIGHT_AND_FIFTEEN_DAYS = exports.PAST_THIRTY_DAYS = exports.PAST_SEVEN_DAYS = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const icons_1 = require("@wordpress/icons");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
const react_1 = require("react");
const component_swapper_1 = tslib_1.__importDefault(require("../component-swapper"));
const icons_2 = require("../icons");
const popover_1 = tslib_1.__importDefault(require("../popover"));
const charts_1 = require("./charts");
const count_comparison_card_1 = tslib_1.__importDefault(require("./count-comparison-card"));
const highlight_cards_heading_1 = tslib_1.__importDefault(require("./highlight-cards-heading"));
const mobile_highlight_cards_1 = tslib_1.__importDefault(require("./mobile-highlight-cards"));
require("./style.scss");
exports.PAST_SEVEN_DAYS = 'past_seven_days';
exports.PAST_THIRTY_DAYS = 'past_thirty_days';
exports.BETWEEN_PAST_EIGHT_AND_FIFTEEN_DAYS = 'between_past_eight_and_fifteen_days';
exports.BETWEEN_PAST_THIRTY_ONE_AND_SIXTY_DAYS = 'between_past_thirty_one_and_sixty_days';
const HighlightCardsSettings = function ({ currentPeriod, onTogglePeriod, onTooltipDismiss, showTooltip = false, }) {
    const translate = (0, i18n_calypso_1.useTranslate)();
    const [isPopoverVisible, setPopoverVisible] = (0, react_1.useState)(false);
    const togglePopoverMenu = (0, react_1.useCallback)(() => {
        onTooltipDismiss();
        setPopoverVisible((isVisible) => {
            return !isVisible;
        });
    }, [onTooltipDismiss]);
    // Use state to update the ref of the setting action button to avoid null element.
    const [settingsActionRef, setSettingsActionRef] = (0, react_1.useState)((0, react_1.useRef)(null));
    const buttonRefCallback = (0, react_1.useCallback)((node) => {
        if (settingsActionRef.current === null) {
            setSettingsActionRef({ current: node });
        }
    }, []);
    return ((0, jsx_runtime_1.jsxs)("div", { className: "highlight-cards-heading__settings", children: [(0, jsx_runtime_1.jsx)("button", { className: "highlight-cards-heading__settings-action", ref: buttonRefCallback, onClick: togglePopoverMenu, children: (0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "gridicon", icon: icons_1.moreVertical }) }), (0, jsx_runtime_1.jsx)(popover_1.default, { className: "tooltip tooltip--darker highlight-card-tooltip highlight-card__settings-tooltip", isVisible: showTooltip, position: "bottom left", context: settingsActionRef.current, autoRepositionOnInitialLoad: true, children: (0, jsx_runtime_1.jsxs)("div", { className: "highlight-card-tooltip-content", children: [(0, jsx_runtime_1.jsx)("p", { children: translate('You can now tailor your site highlights by adjusting the time range.') }), (0, jsx_runtime_1.jsx)("button", { onClick: onTooltipDismiss, children: translate('Got it') })] }) }), (0, jsx_runtime_1.jsxs)(popover_1.default, { className: "tooltip highlight-card-popover", isVisible: isPopoverVisible, position: "bottom left", context: settingsActionRef.current, focusOnShow: false, onClose: () => {
                    setPopoverVisible(false);
                }, children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => {
                            onTogglePeriod(exports.PAST_SEVEN_DAYS);
                        }, children: [translate('7-day highlights'), currentPeriod === exports.PAST_SEVEN_DAYS && (0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "gridicon", icon: icons_1.check })] }), (0, jsx_runtime_1.jsxs)("button", { onClick: () => {
                            onTogglePeriod(exports.PAST_THIRTY_DAYS);
                        }, children: [translate('30-day highlights'), currentPeriod === exports.PAST_THIRTY_DAYS && (0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "gridicon", icon: icons_1.check })] })] })] }));
};
function WeeklyHighlighCardsStandard({ counts, previousCounts, showValueTooltip, onClickComments, onClickLikes, onClickViews, onClickVisitors, }) {
    const translate = (0, i18n_calypso_1.useTranslate)();
    return ((0, jsx_runtime_1.jsxs)("div", { className: "highlight-cards-list", children: [(0, jsx_runtime_1.jsx)(count_comparison_card_1.default, { heading: translate('Views'), icon: (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icons_2.eye }), count: counts?.views ?? null, previousCount: previousCounts?.views ?? null, showValueTooltip: showValueTooltip, onClick: onClickViews }), (0, jsx_runtime_1.jsx)(count_comparison_card_1.default, { heading: translate('Visitors'), icon: (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icons_1.people }), count: counts?.visitors ?? null, previousCount: previousCounts?.visitors ?? null, showValueTooltip: showValueTooltip, onClick: onClickVisitors }), (0, jsx_runtime_1.jsx)(count_comparison_card_1.default, { heading: translate('Likes'), icon: (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icons_1.starEmpty }), count: counts?.likes ?? null, previousCount: previousCounts?.likes ?? null, showValueTooltip: showValueTooltip, onClick: onClickLikes }), (0, jsx_runtime_1.jsx)(count_comparison_card_1.default, { heading: translate('Comments'), icon: (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icons_1.commentContent }), count: counts?.comments ?? null, previousCount: previousCounts?.comments ?? null, showValueTooltip: showValueTooltip, onClick: onClickComments })] }));
}
function WeeklyHighlighCardsMobile({ counts, previousCounts }) {
    const translate = (0, i18n_calypso_1.useTranslate)();
    const highlights = [
        {
            heading: translate('Visitors'),
            count: counts?.visitors,
            previousCount: previousCounts?.visitors,
            icon: icons_1.people,
        },
        {
            heading: translate('Views'),
            count: counts?.views,
            previousCount: previousCounts?.views,
            icon: icons_2.eye,
        },
        {
            heading: translate('Likes'),
            count: counts?.likes,
            previousCount: previousCounts?.likes,
            icon: icons_1.starEmpty,
        },
        {
            heading: translate('Comments'),
            count: counts?.comments,
            previousCount: previousCounts?.comments,
            icon: icons_1.commentContent,
        },
    ];
    return (0, jsx_runtime_1.jsx)(mobile_highlight_cards_1.default, { highlights: highlights });
}
function WeeklyHighlightCards({ className, counts, onClickComments, onClickLikes, onClickViews, onClickVisitors, onTogglePeriod, previousCounts, showValueTooltip, currentPeriod, onSettingsTooltipDismiss, showSettingsTooltip, isHighlightsSettingsSupported = false, }) {
    const translate = (0, i18n_calypso_1.useTranslate)();
    const textRef = (0, react_1.useRef)(null);
    const [isTooltipVisible, setTooltipVisible] = (0, react_1.useState)(false);
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)('highlight-cards', className ?? null), children: [(0, jsx_runtime_1.jsxs)(highlight_cards_heading_1.default, { children: [(0, jsx_runtime_1.jsx)("span", { children: currentPeriod === exports.PAST_THIRTY_DAYS
                            ? translate('30-day highlights')
                            : translate('7-day highlights') }), isHighlightsSettingsSupported && ((0, jsx_runtime_1.jsx)("small", { className: "highlight-cards-heading__description", children: currentPeriod === exports.PAST_THIRTY_DAYS
                            ? translate('Compared to previous 30 days')
                            : translate('Compared to previous 7 days') })), !isHighlightsSettingsSupported && ((0, jsx_runtime_1.jsxs)("div", { className: "highlight-cards-heading__tooltip", children: [(0, jsx_runtime_1.jsx)("span", { className: "highlight-cards-heading-icon", ref: textRef, onMouseEnter: () => setTooltipVisible(true), onMouseLeave: () => setTooltipVisible(false), children: (0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "gridicon", icon: icons_1.info }) }), (0, jsx_runtime_1.jsx)(popover_1.default, { className: "tooltip tooltip--darker highlight-card-tooltip", isVisible: isTooltipVisible, position: "bottom right", context: textRef.current, children: (0, jsx_runtime_1.jsxs)("div", { className: "highlight-card-tooltip-content comparing-info", children: [(0, jsx_runtime_1.jsx)("p", { children: translate('Highlights displayed are for the last 7 days, excluding today.') }), (0, jsx_runtime_1.jsx)("p", { children: translate('Trends shown are in comparison to the previous 7 days before that.') }), (0, jsx_runtime_1.jsxs)("div", { className: "comparing-info-chart", children: [(0, jsx_runtime_1.jsx)("small", { children: translate('%(fourteen)d days {{vs/}} %(seven)d days', {
                                                        components: {
                                                            vs: (0, jsx_runtime_1.jsx)("span", { children: "vs" }),
                                                        },
                                                        args: {
                                                            fourteen: 14,
                                                            seven: 7,
                                                        },
                                                    }) }), charts_1.comparingInfoRangeChart, charts_1.comparingInfoBarsChart] })] }) })] })), isHighlightsSettingsSupported && ((0, jsx_runtime_1.jsx)(HighlightCardsSettings, { currentPeriod: currentPeriod, onTogglePeriod: onTogglePeriod, onTooltipDismiss: onSettingsTooltipDismiss, showTooltip: showSettingsTooltip }))] }), (0, jsx_runtime_1.jsx)(component_swapper_1.default, { breakpoint: "<660px", breakpointActiveComponent: (0, jsx_runtime_1.jsx)(WeeklyHighlighCardsMobile, { counts: counts, previousCounts: previousCounts }), breakpointInactiveComponent: (0, jsx_runtime_1.jsx)(WeeklyHighlighCardsStandard, { counts: counts, previousCounts: previousCounts, showValueTooltip: showValueTooltip, onClickComments: onClickComments, onClickLikes: onClickLikes, onClickViews: onClickViews, onClickVisitors: onClickVisitors }) })] }));
}
exports.default = WeeklyHighlightCards;
//# sourceMappingURL=weekly-highlight-cards.js.map