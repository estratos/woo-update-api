"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = tslib_1.__importDefault(require("react"));
const react_slider_1 = tslib_1.__importDefault(require("react-slider"));
require("./style.scss");
/**
 * Generate Pricing Slider
 * More support from the original ReactSlider component: https://zillow.github.io/react-slider/
 * @param {PricingSliderProps} props - Props
 * @returns {React.ReactElement} - JSX element
 */
const PricingSlider = ({ className, maxValue = 100, minValue = 0, step = 1, value, onChange, onBeforeChange, onAfterChange, renderThumb, thumbClassName, marks = false, }) => {
    const [isThumbHolding, setIsThumbHolding] = react_1.default.useState(false);
    const componentClassName = (0, clsx_1.default)('jp-components-pricing-slider', className, {
        'jp-components-pricing-slider--is-holding': isThumbHolding,
    });
    const thumbClassNames = (0, clsx_1.default)('jp-components-pricing-slider__thumb', thumbClassName);
    const onBeforeChangeCallback = (beforeValue) => {
        setIsThumbHolding(true);
        if (typeof onBeforeChange === 'function') {
            onBeforeChange(beforeValue);
        }
    };
    const onAfterChangeCallback = (afterValue) => {
        setIsThumbHolding(false);
        if (typeof onAfterChange === 'function') {
            onAfterChange(afterValue);
        }
    };
    const renderThumbCallback = renderThumb
        ? renderThumb
        : ((props, state) => {
            return (0, jsx_runtime_1.jsx)("div", { ...props, children: state.valueNow });
        });
    const renderMarks = (props) => ((0, jsx_runtime_1.jsx)("span", { ...props, className: (0, clsx_1.default)(props?.className, {
            ['jp-components-pricing-slider__mark--selected']: (props?.key ?? 0) <= (value ?? 0),
        }) }));
    return ((0, jsx_runtime_1.jsx)("div", { className: componentClassName, "data-testid": "pricing-slider", children: (0, jsx_runtime_1.jsx)(react_slider_1.default, { className: "jp-components-pricing-slider__control", thumbClassName: thumbClassNames, thumbActiveClassName: "jp-components-pricing-slider__thumb--is-active", trackClassName: "jp-components-pricing-slider__track", marks: marks, renderMark: renderMarks, value: value, max: maxValue, min: minValue, step: step, renderThumb: renderThumbCallback, onChange: onChange, onBeforeChange: onBeforeChangeCallback, onAfterChange: onAfterChangeCallback }) }));
};
exports.default = PricingSlider;
//# sourceMappingURL=index.js.map