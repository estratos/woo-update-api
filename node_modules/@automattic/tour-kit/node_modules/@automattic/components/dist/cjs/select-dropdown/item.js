"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const prop_types_1 = tslib_1.__importDefault(require("prop-types"));
const react_1 = require("react");
const count_1 = tslib_1.__importDefault(require("../count"));
const proptype_1 = tslib_1.__importDefault(require("./translatable/proptype"));
class SelectDropdownItem extends react_1.Component {
    static propTypes = {
        children: prop_types_1.default.oneOfType([proptype_1.default, prop_types_1.default.node]).isRequired,
        compactCount: prop_types_1.default.bool,
        path: prop_types_1.default.string,
        selected: prop_types_1.default.bool,
        onClick: prop_types_1.default.func,
        count: prop_types_1.default.number,
        disabled: prop_types_1.default.bool,
        icon: prop_types_1.default.element,
        ariaLabel: prop_types_1.default.string,
        secondaryIcon: prop_types_1.default.element,
    };
    static defaultProps = {
        selected: false,
    };
    linkRef = (0, react_1.createRef)();
    // called by the parent `SelectDropdown` component to focus the item on keyboard navigation
    focusLink() {
        this.linkRef.current.focus();
    }
    render() {
        const optionClassName = (0, clsx_1.default)('select-dropdown__item', this.props.className, {
            'is-selected': this.props.selected,
            'is-disabled': this.props.disabled,
            'has-icon': this.props.icon,
        });
        const label = this.props.value || this.props.children;
        const ariaLabel = this.props.ariaLabel ||
            ('number' === typeof this.props.count ? `${label} (${this.props.count})` : label);
        return ((0, jsx_runtime_1.jsx)("li", { className: "select-dropdown__option", children: (0, jsx_runtime_1.jsxs)("a", { ref: this.linkRef, href: this.props.path, className: optionClassName, onClick: this.props.disabled ? null : this.props.onClick, "data-bold-text": label, role: "menuitem", tabIndex: "0", "aria-current": this.props.selected, "aria-label": ariaLabel, "data-e2e-title": this.props.e2eTitle, children: [(0, jsx_runtime_1.jsxs)("span", { className: "select-dropdown__item-text", children: [this.props.icon, this.props.children] }), 'number' === typeof this.props.count ? ((0, jsx_runtime_1.jsx)("span", { "data-text": this.props.count, className: "select-dropdown__item-count", children: (0, jsx_runtime_1.jsx)(count_1.default, { count: this.props.count, compact: this.props.compactCount }) })) : ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: this.props.secondaryIcon }))] }) }));
    }
}
exports.default = SelectDropdownItem;
//# sourceMappingURL=item.js.map