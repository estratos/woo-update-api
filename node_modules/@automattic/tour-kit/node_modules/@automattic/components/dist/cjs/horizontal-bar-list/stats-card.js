"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
require("./stats-card.scss");
const BASE_CLASS_NAME = 'stats-card';
const StatsCard = ({ children, className, title, titleURL, titleAriaLevel = 4, titleNodes, footerAction, isEmpty, emptyMessage, heroElement, splitHeader, metricLabel, mainItemLabel, additionalHeaderColumns, toggleControl, headerClassName, overlay, }) => {
    const translate = (0, i18n_calypso_1.useTranslate)();
    const titleNode = titleURL ? ((0, jsx_runtime_1.jsx)("a", { href: `${titleURL}`, className: `${BASE_CLASS_NAME}-header__title`, children: title })) : ((0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}-header__title`, role: "heading", "aria-level": titleAriaLevel, children: [(0, jsx_runtime_1.jsx)("div", { children: title }), (0, jsx_runtime_1.jsx)("div", { className: `${BASE_CLASS_NAME}-header__title-nodes`, children: titleNodes })] }));
    // On one line shows card title and value column header
    const simpleHeaderNode = ((0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)(`${BASE_CLASS_NAME}-header`, headerClassName), children: [titleNode, !isEmpty && (0, jsx_runtime_1.jsx)("div", { children: metricLabel ?? translate('Views') })] }));
    // Show Card title on one line and all other column header(s) below:
    // (main item, optional additional columns and value)
    const splitHeaderNode = ((0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}-header ${headerClassName} ${BASE_CLASS_NAME}-header--split`, children: [(0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}-header--main`, children: [titleNode, toggleControl] }), !isEmpty && ((0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}--column-header`, children: [(0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}--column-header__left`, children: [splitHeader && mainItemLabel, additionalHeaderColumns && ((0, jsx_runtime_1.jsx)("div", { className: `${BASE_CLASS_NAME}-header__additional`, children: additionalHeaderColumns }))] }, "left"), !isEmpty && ((0, jsx_runtime_1.jsx)("div", { className: `${BASE_CLASS_NAME}--column-header__right`, children: metricLabel ?? translate('Views') }, "right"))] }))] }));
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)(className, BASE_CLASS_NAME, {
            [`${BASE_CLASS_NAME}__hasoverlay`]: !!overlay,
        }), children: [(0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}__content`, children: [!!heroElement && (0, jsx_runtime_1.jsx)("div", { className: `${BASE_CLASS_NAME}--hero`, children: heroElement }), (0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}--header-and-body`, children: [splitHeader ? splitHeaderNode : simpleHeaderNode, (0, jsx_runtime_1.jsx)("div", { className: (0, clsx_1.default)(`${BASE_CLASS_NAME}--body`, {
                                    [`${BASE_CLASS_NAME}--body-empty`]: isEmpty,
                                }), children: isEmpty ? emptyMessage : children })] }), footerAction && ((0, jsx_runtime_1.jsx)("a", { className: `${BASE_CLASS_NAME}--footer`, href: footerAction?.url, "aria-label": translate('View all %(title)s', {
                            args: { title: title.toLocaleLowerCase?.() ?? title.toLowerCase() },
                            comment: '"View all posts & pages", "View all referrers", etc.',
                        }), children: footerAction.label || translate('View all') }))] }), overlay && (0, jsx_runtime_1.jsx)("div", { className: `${BASE_CLASS_NAME}__overlay`, children: overlay })] }));
};
exports.default = StatsCard;
//# sourceMappingURL=stats-card.js.map