"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = require("react");
const popover_1 = tslib_1.__importDefault(require("../../popover"));
require("./style.scss");
const BundledBadge = ({ className, color, icon, tooltipContent, tooltipClassName, tooltipPosition = 'bottom right', focusOnShow, isClickable, shouldHideTooltip, children, }) => {
    const divRef = (0, react_1.useRef)(null);
    const [isPopoverVisible, setIsPopoverVisible] = (0, react_1.useState)(false);
    const [isPressed, setIsPressed] = (0, react_1.useState)(false);
    const isClickableProps = (0, react_1.useMemo)(() => {
        if (!isClickable) {
            return {};
        }
        return {
            role: 'button',
            tabIndex: 0,
            onBlur: () => {
                setIsPressed(false);
                setIsPopoverVisible(false);
            },
            onClick: () => {
                setIsPressed(!isPopoverVisible);
                setIsPopoverVisible(!isPopoverVisible);
            },
            onKeyDown: (event) => {
                if (event.key === 'Enter' || event.key === ' ') {
                    event.preventDefault();
                    setIsPressed(!isPopoverVisible);
                    setIsPopoverVisible(!isPopoverVisible);
                }
            },
        };
    }, [isClickable, isPopoverVisible]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)('bundled-badge', className, {
            'bundled-badge--is-clickable': isClickable,
        }), style: { backgroundColor: color }, ref: divRef, onMouseEnter: () => {
            if (!isPressed) {
                setIsPopoverVisible(true);
            }
        }, onMouseLeave: () => {
            if (!isPressed) {
                setIsPopoverVisible(false);
            }
        }, ...isClickableProps, children: [icon && (0, jsx_runtime_1.jsx)("span", { className: "bundled-badge__icon", children: icon }), (0, jsx_runtime_1.jsx)("span", { children: children }), !shouldHideTooltip && ((0, jsx_runtime_1.jsx)(popover_1.default, { className: (0, clsx_1.default)('bundled-badge__popover', tooltipClassName), context: divRef.current, isVisible: isPopoverVisible, position: tooltipPosition, focusOnShow: focusOnShow, children: tooltipContent }))] }));
};
exports.default = BundledBadge;
//# sourceMappingURL=index.js.map