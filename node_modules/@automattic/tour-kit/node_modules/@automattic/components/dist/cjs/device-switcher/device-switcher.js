"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const compose_1 = require("@wordpress/compose");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = require("react");
const constants_1 = require("./constants");
const fixed_viewport_1 = tslib_1.__importDefault(require("./fixed-viewport"));
const toolbar_1 = tslib_1.__importDefault(require("./toolbar"));
const use_zoom_out_1 = tslib_1.__importDefault(require("./use-zoom-out"));
require("./device-switcher.scss");
// Transition animation delay
const ANIMATION_DURATION = 250;
const { COMPUTER, TABLET, PHONE } = constants_1.DEVICE_TYPES;
const DeviceSwitcher = ({ children, className = '', defaultDevice = COMPUTER, isShowDeviceSwitcherToolbar, isShowFrameBorder, isShowFrameShadow = true, isFixedViewport, isFullscreen, isZoomable, frameRef, onDeviceChange, onViewportChange, onZoomOutScaleChange, }) => {
    const [device, setDevice] = (0, react_1.useState)(defaultDevice);
    const [isZoomActive, setIsZoomActive] = (0, react_1.useState)(false);
    const [containerResizeListener, { width, height }] = (0, compose_1.useResizeObserver)();
    const { zoomOutStyles, handleZoomOutScaleChange } = (0, use_zoom_out_1.default)(onZoomOutScaleChange);
    const timerRef = (0, react_1.useRef)(null);
    const handleDeviceClick = (nextDevice) => {
        setDevice(nextDevice);
        onDeviceChange?.(nextDevice);
    };
    const handleZoomClick = () => {
        setIsZoomActive(!isZoomActive);
        handleZoomOutScaleChange(!isZoomActive ? 0.5 : 1);
    };
    // Animate on viewport size update
    (0, react_1.useEffect)(() => {
        const clearAnimationEndTimer = () => {
            if (timerRef.current) {
                clearTimeout(timerRef.current);
            }
        };
        // Trigger animation end after the duration
        timerRef.current = setTimeout(() => {
            timerRef.current = null;
            const frameHeight = frameRef?.current?.getBoundingClientRect()?.height;
            if (frameHeight) {
                onViewportChange?.(frameHeight);
            }
        }, ANIMATION_DURATION);
        return clearAnimationEndTimer;
    }, [width, height, isFixedViewport]);
    let frame = ((0, jsx_runtime_1.jsx)("div", { className: "device-switcher__frame", ref: frameRef, children: children }));
    if (isZoomable) {
        frame = (0, jsx_runtime_1.jsx)("div", { style: zoomOutStyles, children: frame });
    }
    if (isFixedViewport) {
        frame = ((0, jsx_runtime_1.jsx)(fixed_viewport_1.default, { device: device, viewportWidth: width ?? 0, children: frame }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)(className, 'device-switcher__container', {
            'device-switcher__container--frame-fixed-viewport': isFixedViewport,
            'device-switcher__container--frame-shadow': isShowFrameShadow,
            'device-switcher__container--frame-bordered': isShowFrameBorder,
            'device-switcher__container--is-computer': device === COMPUTER,
            'device-switcher__container--is-tablet': device === TABLET,
            'device-switcher__container--is-phone': device === PHONE,
            'device-switcher__container--is-fullscreen': isFullscreen,
        }), children: [(0, jsx_runtime_1.jsx)("div", { className: "device-switcher__header", children: isShowDeviceSwitcherToolbar && ((0, jsx_runtime_1.jsx)(toolbar_1.default, { device: device, isZoomable: !!isZoomable, isZoomActive: isZoomActive, onDeviceClick: handleDeviceClick, onZoomClick: handleZoomClick })) }), frame, containerResizeListener] }));
};
exports.default = DeviceSwitcher;
//# sourceMappingURL=device-switcher.js.map