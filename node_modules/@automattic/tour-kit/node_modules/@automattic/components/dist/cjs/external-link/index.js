"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const i18n_utils_1 = require("@automattic/i18n-utils");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
const lodash_1 = require("lodash");
const prop_types_1 = tslib_1.__importDefault(require("prop-types"));
const react_1 = require("react");
const __1 = require("..");
require("./style.scss");
class ExternalLink extends react_1.Component {
    static defaultProps = {
        iconSize: 18,
        showIconFirst: false,
        iconComponent: null,
        localizeUrl: true,
    };
    static propTypes = {
        className: prop_types_1.default.string,
        href: prop_types_1.default.string,
        onClick: prop_types_1.default.func,
        icon: prop_types_1.default.bool,
        iconSize: prop_types_1.default.number,
        target: prop_types_1.default.string,
        showIconFirst: prop_types_1.default.bool,
        iconClassName: prop_types_1.default.string,
        iconComponent: prop_types_1.default.object,
        localizeUrl: prop_types_1.default.bool,
    };
    render() {
        const classes = (0, clsx_1.default)('external-link', this.props.className, {
            'icon-first': this.props.showIconFirst,
            'has-icon': this.props.icon,
        });
        const props = {
            ...(0, lodash_1.omit)(this.props, 'icon', 'iconSize', 'showIconFirst', 'iconClassName', 'iconComponent', 'localizeUrl'),
            className: classes,
            rel: 'external',
        };
        if (this.props.icon) {
            props.target = '_blank';
        }
        if (props.target) {
            props.rel = props.rel.concat(' noopener noreferrer');
        }
        if (props.href && props.localizeUrl) {
            props.href = (0, i18n_utils_1.localizeUrl)(props.href);
        }
        const iconComponent = this.props.iconComponent || ((0, jsx_runtime_1.jsx)(__1.Gridicon, { className: this.props.iconClassName, icon: "external", size: this.props.iconSize }));
        return ((0, jsx_runtime_1.jsxs)("a", { ...props, children: [this.props.icon && this.props.showIconFirst && iconComponent, this.props.children, this.props.icon && !this.props.showIconFirst && iconComponent, this.props.icon && ((0, jsx_runtime_1.jsx)(__1.ScreenReaderText, { children: (0, i18n_calypso_1.translate)('(opens in a new tab)', {
                        comment: 'accessibility label for an external link',
                    }) }))] }));
    }
}
exports.default = ExternalLink;
//# sourceMappingURL=index.js.map