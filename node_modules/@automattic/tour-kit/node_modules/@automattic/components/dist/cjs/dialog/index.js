"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const icons_1 = require("@wordpress/icons");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = require("react");
const react_modal_1 = tslib_1.__importDefault(require("react-modal"));
const button_bar_1 = tslib_1.__importDefault(require("./button-bar"));
require("./style.scss");
const Dialog = ({ additionalClassNames, additionalOverlayClassNames, buttons, baseClassName = 'dialog', className, children, isBackdropVisible = true, isFullScreen = true, isVisible = false, label = '', leaveTimeout = 200, onClose, shouldCloseOnEsc, showCloseIcon = false, shouldCloseOnOverlayClick = true, labelledby, describedby, bodyOpenClassName, }) => {
    const close = (0, react_1.useCallback)(() => onClose?.(), [onClose]);
    const onButtonClick = (0, react_1.useCallback)((button) => {
        if (button.onClick) {
            button.onClick(() => onClose?.(button.action));
        }
        else {
            onClose?.(button.action);
        }
    }, [onClose]);
    // Previous implementation used a `<Card />`, styling still relies on the 'card' class being present
    const dialogClassName = (0, clsx_1.default)(baseClassName, 'card', additionalClassNames);
    const backdropClassName = (0, clsx_1.default)(baseClassName + '__backdrop', additionalOverlayClassNames, {
        'is-full-screen': isFullScreen,
        'is-hidden': !isBackdropVisible,
    });
    const contentClassName = (0, clsx_1.default)(baseClassName + '__content', className);
    return ((0, jsx_runtime_1.jsxs)(react_modal_1.default, { aria: { labelledby, describedby }, isOpen: isVisible, onRequestClose: close, closeTimeoutMS: leaveTimeout, contentLabel: label, overlayClassName: backdropClassName, className: dialogClassName, htmlOpenClassName: "ReactModal__Html--open", role: "dialog", shouldCloseOnEsc: shouldCloseOnEsc, shouldCloseOnOverlayClick: shouldCloseOnOverlayClick, bodyOpenClassName: bodyOpenClassName, children: [showCloseIcon && ((0, jsx_runtime_1.jsx)("button", { "aria-label": "Close", className: "dialog__action-buttons-close", onClick: () => onClose?.(this), children: (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icons_1.close, size: 24 }) })), (0, jsx_runtime_1.jsx)("div", { className: contentClassName, tabIndex: -1, children: children }), (0, jsx_runtime_1.jsx)(button_bar_1.default, { buttons: buttons, onButtonClick: onButtonClick, baseClassName: baseClassName })] }));
};
exports.default = Dialog;
//# sourceMappingURL=index.js.map