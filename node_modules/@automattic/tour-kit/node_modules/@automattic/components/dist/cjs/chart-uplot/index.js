"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const i18n_calypso_1 = require("i18n-calypso");
const react_1 = require("react");
const uplot_1 = tslib_1.__importDefault(require("uplot"));
const uplot_react_1 = tslib_1.__importDefault(require("uplot-react"));
const use_resize_1 = tslib_1.__importDefault(require("./hooks/use-resize"));
const use_scale_gradient_1 = tslib_1.__importDefault(require("./hooks/use-scale-gradient"));
const get_date_format_1 = tslib_1.__importDefault(require("./lib/get-date-format"));
const get_gradient_fill_1 = tslib_1.__importDefault(require("./lib/get-gradient-fill"));
const get_period_date_format_1 = tslib_1.__importDefault(require("./lib/get-period-date-format"));
require("./style.scss");
// NOTE: Do not include this component in the package entry bundle.
//       Doing so will cause tests of the consumer package to break due to uPlot's reliance on matchMedia.
//       https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom.
const DEFAULT_DIMENSIONS = {
    height: 300,
    width: 1224,
};
function UplotChart({ data, mainColor = '#3057DC', fillColorFrom = 'rgba(48, 87, 220, 0.4)', fillColorTo = 'rgba(48, 87, 220, 0)', yAxisFilter = undefined, legendContainer, options: propOptions, solidFill = false, period, }) {
    const translate = (0, i18n_calypso_1.useTranslate)();
    const uplot = (0, react_1.useRef)(null);
    const uplotContainer = (0, react_1.useRef)(null);
    const { spline } = uplot_1.default.paths;
    const scaleGradient = (0, use_scale_gradient_1.default)(fillColorFrom);
    const options = (0, react_1.useMemo)(() => {
        const seriesTemplate = {
            width: 2,
            paths: (u, seriesIdx, idx0, idx1) => {
                return spline?.()(u, seriesIdx, idx0, idx1) || null;
            },
            points: {
                show: false,
            },
            value: (self, rawValue) => {
                if (!rawValue) {
                    return '-';
                }
                return (0, i18n_calypso_1.numberFormat)(rawValue, 0);
            },
        };
        // Total subscribers series.
        const mainSeries = {
            ...seriesTemplate,
            fill: solidFill
                ? fillColorFrom
                : (0, get_gradient_fill_1.default)(fillColorFrom, fillColorTo, scaleGradient),
            label: translate('Subscribers'),
            stroke: mainColor,
        };
        // Paid subscribers series.
        const subSeries = {
            ...seriesTemplate,
            fill: (0, get_gradient_fill_1.default)('rgba(230, 139, 40, 0.4)', 'rgba(230, 139, 40, 0)', scaleGradient),
            label: translate('Paid Subscribers'),
            stroke: '#e68b28',
        };
        const seriesSet = data.length === 3 ? [mainSeries, subSeries] : [mainSeries];
        const defaultOptions = {
            class: 'calypso-uplot-chart',
            ...DEFAULT_DIMENSIONS,
            // Set incoming dates as UTC.
            tzDate: (ts) => uplot_1.default.tzDate(new Date(ts * 1e3), 'Etc/UTC'),
            // First, it cycles through all possible templates in case they are substitutes.
            fmtDate: (chartDateStringTemplate) => {
                // The date for a specific point in the chart.
                return (date) => (0, get_date_format_1.default)(chartDateStringTemplate, date, (0, i18n_calypso_1.getLocaleSlug)() || 'en');
            },
            axes: [
                {
                    // x-axis
                    grid: {
                        show: false,
                    },
                    ticks: {
                        stroke: '#646970',
                        width: 1,
                        size: 3,
                    },
                },
                {
                    // y-axis
                    side: 1,
                    gap: 8,
                    space: 40,
                    size: 50,
                    grid: {
                        stroke: 'rgba(220, 220, 222, 0.5)', // #DCDCDE with 0.5 opacity
                        width: 1,
                    },
                    ticks: {
                        show: false,
                    },
                    filter: yAxisFilter,
                },
            ],
            cursor: {
                x: false,
                y: false,
                points: {
                    size: (u, seriesIdx) => (u.series[seriesIdx].points?.size || 1) * 2,
                    width: (u, seriesIdx, size) => size / 4,
                    stroke: (u, seriesIdx) => {
                        const stroke = u.series[seriesIdx]?.points?.stroke;
                        return typeof stroke === 'function'
                            ? stroke(u, seriesIdx)
                            : stroke;
                    },
                    fill: () => '#fff',
                },
            },
            series: [
                {
                    label: translate('Date'),
                    value: (self, rawValue) => {
                        // outputs legend content - value available when mouse is hovering the chart
                        if (!rawValue) {
                            return '-';
                        }
                        return (0, get_period_date_format_1.default)(period, new Date(rawValue * 1000), (0, i18n_calypso_1.getLocaleSlug)() || 'en');
                    },
                },
                ...seriesSet,
            ],
            legend: {
                isolate: true,
                mount: (self, el) => {
                    // If legendContainer is defined, move the legend into it.
                    if (legendContainer?.current) {
                        legendContainer?.current.append(el);
                    }
                },
            },
        };
        return {
            ...defaultOptions,
            ...(typeof propOptions === 'object' ? propOptions : {}),
        };
    }, [
        mainColor,
        fillColorFrom,
        fillColorTo,
        legendContainer,
        propOptions,
        scaleGradient,
        solidFill,
        spline,
        translate,
        period,
        data,
        yAxisFilter,
    ]);
    (0, use_resize_1.default)(uplot, uplotContainer);
    return ((0, jsx_runtime_1.jsx)("div", { className: "calypso-uplot-chart-container", ref: uplotContainer, children: (0, jsx_runtime_1.jsx)(uplot_react_1.default, { data: data, onCreate: (chart) => (uplot.current = chart), options: options }) }));
}
exports.default = UplotChart;
//# sourceMappingURL=index.js.map