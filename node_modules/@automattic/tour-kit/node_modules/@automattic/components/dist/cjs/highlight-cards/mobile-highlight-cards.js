"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const icons_1 = require("@wordpress/icons");
const number_formatters_1 = tslib_1.__importDefault(require("../number-formatters"));
const count_comparison_card_1 = require("./count-comparison-card");
require("./style.scss");
function MobileHighlightCard({ heading, count, previousCount, icon, preformattedValue, }) {
    // We'll accept a count or a preformatted string as our value.
    // If both are provided, we'll use the preformatted string for display.
    if (!preformattedValue && count === null) {
        return null;
    }
    // We require a heading to go with our value.
    if (!heading) {
        return null;
    }
    // The icon and trendline are optional.
    // Trendline depends on having a previous count value.
    const displayTrendline = Number.isFinite(previousCount);
    const displayIcon = icon !== undefined;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "mobile-highlight-cards__item", children: [displayIcon && ((0, jsx_runtime_1.jsx)("span", { className: "mobile-highlight-cards__item-icon", children: (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icon }) })), (0, jsx_runtime_1.jsx)("span", { className: "mobile-highlight-cards__item-heading", children: heading }), displayTrendline && ((0, jsx_runtime_1.jsx)("span", { className: "mobile-highlight-cards__item-trend", children: (0, jsx_runtime_1.jsx)(count_comparison_card_1.TrendComparison, { count: count, previousCount: previousCount }) })), (0, jsx_runtime_1.jsx)("span", { className: "mobile-highlight-cards__item-count", children: preformattedValue ? preformattedValue : (0, jsx_runtime_1.jsx)(number_formatters_1.default, { value: count }) })] }));
}
function MobileHighlightCardListing({ highlights, }) {
    return ((0, jsx_runtime_1.jsx)("div", { className: "mobile-highlight-cards-listing", children: highlights.map((highlight) => ((0, jsx_runtime_1.jsx)(MobileHighlightCard, { heading: highlight.heading, count: highlight.count, previousCount: highlight.previousCount, icon: highlight.icon, preformattedValue: highlight.preformattedValue }, highlight.heading))) }));
}
exports.default = MobileHighlightCardListing;
//# sourceMappingURL=mobile-highlight-cards.js.map