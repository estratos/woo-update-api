"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
const prop_types_1 = tslib_1.__importDefault(require("prop-types"));
const react_1 = require("react");
const __1 = require("../");
require("./style.scss");
const noop = () => { };
class FoldableCard extends react_1.Component {
    static displayName = 'FoldableCard';
    static propTypes = {
        actionButton: prop_types_1.default.node,
        actionButtonExpanded: prop_types_1.default.node,
        cardKey: prop_types_1.default.string,
        clickableHeader: prop_types_1.default.bool,
        compact: prop_types_1.default.bool,
        disabled: prop_types_1.default.bool,
        expandedSummary: prop_types_1.default.node,
        expanded: prop_types_1.default.bool,
        headerTagName: prop_types_1.default.string,
        icon: prop_types_1.default.string,
        iconSize: prop_types_1.default.number,
        onClick: prop_types_1.default.func,
        onClose: prop_types_1.default.func,
        onOpen: prop_types_1.default.func,
        screenReaderText: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
        summary: prop_types_1.default.node,
        hideSummary: prop_types_1.default.bool,
        highlight: prop_types_1.default.string,
        smooth: prop_types_1.default.bool,
        contentExpandedStyle: prop_types_1.default.object,
        contentCollapsedStyle: prop_types_1.default.object,
    };
    static defaultProps = {
        onOpen: noop,
        onClose: noop,
        cardKey: '',
        headerTagName: 'span',
        icon: 'chevron-down',
        iconSize: 24,
        expanded: false,
        screenReaderText: false,
        smooth: false,
    };
    state = {
        expanded: this.props.expanded,
    };
    // @TODO: Please update https://github.com/Automattic/wp-calypso/issues/58453 if you are refactoring away from UNSAFE_* lifecycle methods!
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (nextProps.expanded !== this.props.expanded) {
            this.setState({ expanded: nextProps.expanded });
        }
    }
    onClick = () => {
        if (this.props.children) {
            this.setState({ expanded: !this.state.expanded });
        }
        if (this.props.onClick) {
            this.props.onClick();
        }
        if (this.state.expanded) {
            this.props.onClose(this.props.cardKey);
        }
        else {
            this.props.onOpen(this.props.cardKey);
        }
    };
    getClickAction() {
        if (this.props.disabled) {
            return;
        }
        return this.onClick;
    }
    getActionButton() {
        if (this.state.expanded) {
            return this.props.actionButtonExpanded || this.props.actionButton;
        }
        return this.props.actionButton;
    }
    renderActionButton() {
        const clickAction = !this.props.clickableHeader ? this.getClickAction() : null;
        if (this.props.actionButton) {
            return ((0, jsx_runtime_1.jsx)("div", { className: "foldable-card__action", role: "presentation", onClick: clickAction, children: this.getActionButton() }));
        }
        if (this.props.children) {
            const screenReaderText = this.props.screenReaderText || this.props.translate('More');
            return ((0, jsx_runtime_1.jsxs)("button", { disabled: this.props.disabled, type: "button", className: "foldable-card__action foldable-card__expand", "aria-expanded": this.state.expanded, onClick: clickAction, children: [(0, jsx_runtime_1.jsx)(__1.ScreenReaderText, { children: screenReaderText }), (0, jsx_runtime_1.jsx)(__1.Gridicon, { icon: this.props.icon, size: this.props.iconSize })] }));
        }
    }
    renderContent() {
        const additionalStyle = this.state.expanded
            ? this.props.contentExpandedStyle
            : this.props.contentCollapsedStyle;
        return ((0, jsx_runtime_1.jsx)("div", { className: "foldable-card__content", style: additionalStyle, children: this.props.children }));
    }
    renderHeader() {
        const summary = this.props.summary ? ((0, jsx_runtime_1.jsxs)("span", { className: "foldable-card__summary", children: [this.props.summary, " "] })) : null;
        const expandedSummary = this.props.expandedSummary ? ((0, jsx_runtime_1.jsxs)("span", { className: "foldable-card__summary-expanded", children: [this.props.expandedSummary, " "] })) : null;
        const headerClickAction = this.props.clickableHeader ? this.getClickAction() : null;
        const headerClasses = (0, clsx_1.default)('foldable-card__header', {
            'is-clickable': !!this.props.clickableHeader,
            'has-border': !!this.props.summary,
        });
        const header = (0, react_1.createElement)(this.props.headerTagName, { className: 'foldable-card__main' }, this.props.header, this.renderActionButton());
        return ((0, jsx_runtime_1.jsxs)("div", { className: headerClasses, role: "presentation", onClick: headerClickAction, children: [header, !this.props.hideSummary && ((0, jsx_runtime_1.jsxs)("span", { className: "foldable-card__secondary", children: [summary, expandedSummary] }))] }));
    }
    render() {
        const Container = this.props.compact ? __1.CompactCard : __1.Card;
        const itemSiteClasses = (0, clsx_1.default)('foldable-card', this.props.className, {
            'is-disabled': !!this.props.disabled,
            'is-expanded': !!this.state.expanded,
            'has-expanded-summary': !!this.props.expandedSummary,
            'is-smooth': !!this.props.smooth,
        });
        return ((0, jsx_runtime_1.jsxs)(Container, { className: itemSiteClasses, highlight: this.props.highlight, children: [this.renderHeader(), (this.state.expanded || this.props.smooth) && this.renderContent()] }));
    }
}
exports.default = (0, i18n_calypso_1.localize)(FoldableCard);
//# sourceMappingURL=index.js.map