"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_OPTIONS = exports.PERCENTAGE_FORMATTING_OPTIONS = exports.STANDARD_FORMATTING_OPTIONS = exports.COMPACT_FORMATTING_OPTIONS = exports.DEFAULT_LOCALE = void 0;
const lodash_1 = require("lodash");
const warnOnce = (0, lodash_1.memoize)(console.warn); // eslint-disable-line no-console
exports.DEFAULT_LOCALE = (typeof window === 'undefined' ? null : window.navigator?.language) ?? 'en-US';
// Preset Options
exports.COMPACT_FORMATTING_OPTIONS = {
    notation: 'compact',
    maximumSignificantDigits: 3,
    maximumFractionDigits: 1,
    compactDisplay: 'short',
};
exports.STANDARD_FORMATTING_OPTIONS = {
    notation: 'standard',
};
exports.PERCENTAGE_FORMATTING_OPTIONS = {
    style: 'percent',
};
// Default Options
exports.DEFAULT_OPTIONS = { ...exports.COMPACT_FORMATTING_OPTIONS };
// For backward compatibility; original implementation did not specify max sigfigs.
delete exports.DEFAULT_OPTIONS.maximumSignificantDigits;
function formatNumber(number, locale = exports.DEFAULT_LOCALE, options = exports.DEFAULT_OPTIONS) {
    if (number === null || !Number.isFinite(number)) {
        return '-';
    }
    // Certain versions of Safari (14.1) on macOS Mojave (10.14) have encountered problems with specific parameters in formatOptions.
    // In the event of an error, problematic parameters are removed from the formatOptions object, and no formatting is applied as a fallback.
    // This approach ensures a smooth user experience by avoiding disruption for unaffected users.
    // Refer to https://github.com/Automattic/wp-calypso/issues/77635 for more details.
    try {
        return new Intl.NumberFormat(locale, options).format(number);
    }
    catch (error) {
        warnOnce(`formatted-number numberFormat error: Intl.NumberFormat().format( ${typeof number} )`, error);
    }
    // Remove these key/values from formatOptions.
    const optionsToRemove = {
        currencyDisplay: 'narrow',
        currencySign: 'accounting',
        style: 'unit',
    };
    // Remove these keys from formatOptions irrespective of value.
    const optionNamesToRemove = ['signDisplay', 'compactDisplay'];
    // Create new format options object with problematic parameters removed.
    const reducedFormatOptions = {};
    for (const [key, value] of Object.entries(options)) {
        if (optionsToRemove[key] && value === optionsToRemove[key]) {
            continue;
        }
        if (optionNamesToRemove.includes(key)) {
            continue;
        }
        reducedFormatOptions[key] = value;
    }
    try {
        return new Intl.NumberFormat(locale, reducedFormatOptions).format(number);
    }
    catch {
        // If the reduced format option still throws an error, try without format options as a fallback.
        return new Intl.NumberFormat(locale).format(number);
    }
}
exports.default = formatNumber;
//# sourceMappingURL=format-number.js.map