"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_i18n_1 = require("@wordpress/react-i18n");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = require("react");
const gridicon_1 = tslib_1.__importDefault(require("../../gridicon"));
const popover_1 = tslib_1.__importDefault(require("../../popover"));
require("./style.scss");
const PremiumBadge = ({ className, labelText: customLabelText, tooltipContent, tooltipClassName, tooltipPosition = 'bottom left', isPremiumThemeAvailable, shouldCompactWithAnimation, shouldHideIcon, shouldHideTooltip, focusOnShow, isClickable, }) => {
    const { __ } = (0, react_i18n_1.useI18n)();
    const tooltipText = isPremiumThemeAvailable
        ? __('Let your site stand out from the crowd with a modern and stylish Premium theme. Premium themes are included in your plan.', __i18n_text_domain__)
        : __('Let your site stand out from the crowd with a modern and stylish Premium theme.', __i18n_text_domain__);
    const divRef = (0, react_1.useRef)(null);
    const labelRef = (0, react_1.useRef)(null);
    const [isPopoverVisible, setIsPopoverVisible] = (0, react_1.useState)(false);
    const [isHovered, setIsHovered] = (0, react_1.useState)(false);
    const [isPressed, setIsPressed] = (0, react_1.useState)(false);
    const [displayLabelAsTooltip, setDisplayLabelAsTooltip] = (0, react_1.useState)(false);
    // This is used to prevent the label from being rendered in compact mode before the first render
    // so that the label can be measured in its uncompacted state.
    const [mayRenderAsCompact, setMayRenderAsCompact] = (0, react_1.useState)(false);
    const labelText = customLabelText || __('Premium');
    // Display the label as a tooltip if the tooltip is being hidden and the label is too long.
    (0, react_1.useLayoutEffect)(() => {
        const scrollWidth = labelRef?.current?.scrollWidth ?? 0;
        const offsetWidth = labelRef?.current?.offsetWidth ?? 0;
        setDisplayLabelAsTooltip(!!shouldHideTooltip && scrollWidth > offsetWidth);
        // Now the dimensions of the label are known, it is safe to render the label in compact mode.
        setMayRenderAsCompact(true);
    }, [shouldHideTooltip, labelRef]);
    const isClickableProps = (0, react_1.useMemo)(() => {
        if (!isClickable) {
            return {};
        }
        return {
            role: 'button',
            tabIndex: 0,
            onBlur: () => {
                setIsPressed(false);
                setIsPopoverVisible(false);
            },
            onClick: () => {
                setIsPressed(!isPopoverVisible);
                setIsPopoverVisible(!isPopoverVisible);
            },
            onKeyDown: (event) => {
                if (event.key === 'Enter' || event.key === ' ') {
                    event.preventDefault();
                    setIsPressed(!isPopoverVisible);
                    setIsPopoverVisible(!isPopoverVisible);
                }
            },
        };
    }, [isClickable, isPopoverVisible]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)('premium-badge', className, {
            'premium-badge__compact-animation': shouldCompactWithAnimation,
            'premium-badge--compact': shouldCompactWithAnimation && !isHovered && mayRenderAsCompact,
            'premium-badge--is-clickable': isClickable,
        }), ref: divRef, onMouseEnter: () => {
            if (!isPressed) {
                setIsPopoverVisible(true);
                setIsHovered(true);
            }
        }, onMouseLeave: () => {
            if (!isPressed) {
                setIsPopoverVisible(false);
                setIsHovered(false);
            }
        }, ...isClickableProps, children: [!shouldHideIcon && ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(gridicon_1.default, { className: "premium-badge__logo", icon: "star", size: 14 }) })), (0, jsx_runtime_1.jsx)("span", { className: "premium-badge__label", ref: labelRef, children: labelText }), !shouldHideTooltip && ((0, jsx_runtime_1.jsx)(popover_1.default, { className: (0, clsx_1.default)('premium-badge__popover', tooltipClassName), context: divRef.current, isVisible: isPopoverVisible, position: tooltipPosition, focusOnShow: focusOnShow, children: tooltipContent || tooltipText })), displayLabelAsTooltip && ((0, jsx_runtime_1.jsx)(popover_1.default, { className: (0, clsx_1.default)('premium-badge__popover', tooltipClassName), context: divRef.current, isVisible: isPopoverVisible, position: "bottom", focusOnShow: focusOnShow, children: labelText }))] }));
};
exports.default = PremiumBadge;
//# sourceMappingURL=index.js.map