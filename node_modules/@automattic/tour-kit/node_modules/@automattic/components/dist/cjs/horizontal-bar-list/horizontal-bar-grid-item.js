"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const html_entities_1 = require("@wordpress/html-entities");
const icons_1 = require("@wordpress/icons");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
const react_1 = require("react");
const number_formatters_1 = tslib_1.__importDefault(require("../number-formatters"));
require("./style.scss");
const BASE_CLASS_NAME = 'horizontal-bar-list';
const HorizontalBarListItem = ({ data, className, maxValue, url, onClick, hasIndicator, leftSideItem, renderLeftSideItem, renderRightSideItem, useShortLabel, useShortNumber, leftGroupToggle, isStatic, additionalColumns, usePlainCard, isLinkUnderlined, hasNoBackground, }) => {
    const { label, value, shortLabel, children: itemChildren } = data;
    const fillPercentage = maxValue > 0 ? (value / maxValue) * 100 : 0;
    const isLink = url || (onClick && !itemChildren);
    const hasChildren = !!itemChildren;
    const [open, setOpen] = (0, react_1.useState)(false);
    const toggleOpen = (e) => {
        e?.preventDefault();
        setOpen(!open);
    };
    const toggleOpenKey = (e) => {
        if (e?.key === 'Enter' || e?.key === 'Space') {
            e?.preventDefault();
            setOpen(!open);
        }
    };
    const onClickHandler = (e) => {
        e?.preventDefault();
        onClick?.(e, data);
    };
    const onKeyDownHandler = (e) => {
        if (e?.key === 'Enter' || e?.key === 'Space') {
            e?.preventDefault();
            onClick?.(e, data);
        }
    };
    const TagName = isLink ? 'a' : 'div'; // group parents and countries don't use anchors.
    let labelText;
    // tags use an array for a label(s)
    if (Array.isArray(label)) {
        // combine all items into one
        labelText = ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: label.length > 1
                ? label.map((item, index) => ((0, jsx_runtime_1.jsxs)(react_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "stats-icon", icon: item.labelIcon === 'folder' ? icons_1.file : icons_1.tag, size: 22 }), (0, jsx_runtime_1.jsx)("span", { children: (0, html_entities_1.decodeEntities)(item.label) })] }, index)))
                : label[0].label }));
    }
    else {
        labelText = (0, html_entities_1.decodeEntities)(useShortLabel ? shortLabel || '' : label); // shortLabel as an empty string to make TS happy
    }
    let rowClick;
    let rowKeyPress;
    if (hasChildren) {
        rowClick = toggleOpen;
        rowKeyPress = toggleOpenKey;
    }
    else if (!url) {
        rowClick = onClickHandler;
        rowKeyPress = onKeyDownHandler;
    }
    const groupChevron = ((0, jsx_runtime_1.jsx)("span", { className: `${BASE_CLASS_NAME}-group-toggle`, children: (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: open ? icons_1.chevronUp : icons_1.chevronDown }) }));
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("li", { className: (0, clsx_1.default)(`${BASE_CLASS_NAME}-item`, {
                    [`${BASE_CLASS_NAME}-item--indicated`]: hasIndicator,
                    [`${BASE_CLASS_NAME}-item--link`]: isLink || hasChildren,
                    [`${BASE_CLASS_NAME}-item--link-underlined`]: isLinkUnderlined,
                    [`${BASE_CLASS_NAME}-item--static`]: isStatic,
                    [`${BASE_CLASS_NAME}-item--no-bg`]: hasNoBackground,
                }, className), style: !usePlainCard
                    ? {
                        [`--${BASE_CLASS_NAME}-fill`]: `${fillPercentage}%`,
                    }
                    : {}, onClick: rowClick, onKeyDown: rowKeyPress, 
                // eslint-disable-next-line jsx-a11y/no-noninteractive-element-to-interactive-role
                role: "button", tabIndex: 0, children: [(0, jsx_runtime_1.jsxs)("div", { className: `${BASE_CLASS_NAME}-item-bar`, children: [(leftSideItem || (renderLeftSideItem && renderLeftSideItem?.(data))) && ((0, jsx_runtime_1.jsx)("span", { className: `${BASE_CLASS_NAME}-item__left-icon`, children: leftSideItem ? leftSideItem : renderLeftSideItem?.(data) })), (0, jsx_runtime_1.jsxs)(TagName, { className: (0, clsx_1.default)(`${BASE_CLASS_NAME}-label`, hasChildren && `${BASE_CLASS_NAME}-label--group-header`), href: url, tabIndex: 0, children: [leftGroupToggle && hasChildren && groupChevron, (0, jsx_runtime_1.jsx)("span", { className: `${BASE_CLASS_NAME}__group-label`, children: labelText }), !leftGroupToggle && hasChildren && groupChevron] }), renderRightSideItem && ((0, jsx_runtime_1.jsx)("span", { className: `${BASE_CLASS_NAME}--hover-action`, children: renderRightSideItem(data) })), additionalColumns && ((0, jsx_runtime_1.jsx)("div", { className: `${BASE_CLASS_NAME}-item--additional`, children: additionalColumns }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "value", children: [usePlainCard ? value : null, !usePlainCard &&
                                (!useShortNumber ? (0, i18n_calypso_1.numberFormat)(value, 0) : (0, jsx_runtime_1.jsx)(number_formatters_1.default, { value: value }))] })] }), itemChildren && open && ((0, jsx_runtime_1.jsx)("li", { children: (0, jsx_runtime_1.jsx)("ul", { className: `${BASE_CLASS_NAME}-group`, children: itemChildren?.map((child, index) => {
                        if (child.value === null) {
                            child.value = value; // take parent's value
                        }
                        return ((0, jsx_runtime_1.jsx)(HorizontalBarListItem, { data: child, className: className, maxValue: maxValue, useShortLabel: useShortLabel, useShortNumber: useShortNumber, renderLeftSideItem: renderLeftSideItem, renderRightSideItem: renderRightSideItem, onClick: (e) => onClick?.(e, child), hasIndicator: hasIndicator, isStatic: isStatic, usePlainCard: usePlainCard, isLinkUnderlined: isLinkUnderlined }, `group-${child?.id ?? index}`));
                    }) }) }))] }));
};
exports.default = HorizontalBarListItem;
//# sourceMappingURL=horizontal-bar-grid-item.js.map