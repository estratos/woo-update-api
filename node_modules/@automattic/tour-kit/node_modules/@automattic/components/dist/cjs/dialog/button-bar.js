"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = require("react");
const button_1 = tslib_1.__importDefault(require("../button"));
const ButtonBar = ({ buttons, baseClassName, onButtonClick }) => {
    if (!buttons) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: baseClassName + '__action-buttons', children: buttons.map((button, index) => {
            const key = index;
            if (isElement(button)) {
                return (0, react_1.cloneElement)(button, { key });
            }
            const classes = (0, clsx_1.default)(button.className, button.additionalClassNames, {
                'is-primary': button.isPrimary || (buttons.length === 1 && !button.scary),
            });
            return ((0, jsx_runtime_1.jsx)(button_1.default, { className: classes, "data-e2e-button": button.action, "data-tip-target": `dialog-base-action-${button.action}`, onClick: () => onButtonClick(button), disabled: !!button.disabled, busy: !!button.busy, href: button.href, target: button.target, scary: button.scary, children: (0, jsx_runtime_1.jsx)("span", { className: baseClassName + '__button-label', children: button.label }) }, key));
        }) }));
};
// Note: a bug in TypeScript doesn't narrow ReactElement properly, but the wrapper
// helps it work. See https://github.com/microsoft/TypeScript/issues/53178#issuecomment-1659301034
function isElement(element) {
    return (0, react_1.isValidElement)(element);
}
exports.default = ButtonBar;
//# sourceMappingURL=button-bar.js.map