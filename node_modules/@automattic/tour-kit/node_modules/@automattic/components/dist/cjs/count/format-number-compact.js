"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatNumberMetric = void 0;
const tslib_1 = require("tslib");
const i18n_calypso_1 = tslib_1.__importStar(require("i18n-calypso"));
const thousands_1 = require("./thousands");
/**
 * Formats a number to a short format given a language code
 * @param   {number}     number              number to format
 * @param   {string}     code                language code e.g. 'es'
 * @returns {?string}                        A formatted string.
 */
function formatNumberCompact(number, code = i18n_calypso_1.default.getLocaleSlug()) {
    //use numberFormat directly from i18n in this case!
    if (isNaN(number) || !thousands_1.THOUSANDS[code]) {
        return null;
    }
    const { decimal, grouping, symbol, unitValue = 1000 } = thousands_1.THOUSANDS[code];
    const sign = number < 0 ? '-' : '';
    const absNumber = Math.abs(number);
    // no-op if we have a small number
    if (absNumber < unitValue) {
        return `${sign}${absNumber}`;
    }
    //show 2 sig figs, otherwise take leading sig figs.
    const decimals = absNumber < unitValue * 10 ? 1 : 0;
    const value = (0, i18n_calypso_1.numberFormat)(absNumber / unitValue, {
        decimals,
        thousandsSep: grouping,
        decPoint: decimal,
    });
    return `${sign}${value}${symbol}`;
}
exports.default = formatNumberCompact;
const ONE_K = 1000;
const ONE_M = ONE_K * 1000;
const ONE_G = ONE_M * 1000;
/*
 * Format a number larger than 1000 by appending a metric unit (K, M, G) and rounding to
 * the received decimal point, defaults to 0.
 * TODO: merge with formatNumberCompact by adding support for metric units other than 'K'
 */
function formatNumberMetric(number, decimalPoints = 1) {
    if (number < ONE_K) {
        return String(number);
    }
    if (number < ONE_M) {
        return (number / ONE_K).toFixed(decimalPoints) + 'K';
    }
    if (number < ONE_G) {
        return (number / ONE_M).toFixed(decimalPoints) + 'M';
    }
    return (number / ONE_G).toFixed(decimalPoints) + 'G';
}
exports.formatNumberMetric = formatNumberMetric;
//# sourceMappingURL=format-number-compact.js.map