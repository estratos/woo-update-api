"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSubmenuPopoverProps = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const components_1 = require("@wordpress/components");
const react_1 = require("react");
/**
 * Adds a11y support to the submenu popover.
 * - Closes the popover when pressing Escape.
 * - Closes the popover when pressing Tab and the focus is on the last element.
 */
function useCloseSubmenuA11y() {
    return (0, react_1.useCallback)(({ event, lastChild, setIsVisible, }) => {
        const isEscape = event.key === 'Escape';
        const tabOnLastChild = event.key === 'Tab' && !event.shiftKey && lastChild === event.target;
        if (isEscape || tabOnLastChild) {
            setIsVisible(false);
        }
    }, []);
}
/**
 * Checks if the submenu popover has enough space to be displayed on the right.
 * If not, it will return false to be displayed on the left.
 */
function useHasRightSpace(parentElement, isVisible) {
    const [widthSubmenu, setWidthSubmenu] = (0, react_1.useState)(0);
    (0, react_1.useEffect)(() => {
        if (isVisible && parentElement) {
            const submenuElement = parentElement.querySelector('.submenu-popover');
            if (submenuElement) {
                setWidthSubmenu(submenuElement.offsetWidth);
            }
        }
    }, [parentElement, isVisible]);
    return (0, react_1.useMemo)(() => {
        if (!parentElement) {
            return true;
        }
        const calculatedThreshold = widthSubmenu;
        const { right } = parentElement.getBoundingClientRect();
        return window.innerWidth - right > calculatedThreshold;
    }, [parentElement, widthSubmenu]);
}
function useSubmenuPopoverProps(options = {
    offset: 0,
    flip: true,
    resize: true,
    inline: false,
}) {
    const { offset, inline, flip, resize } = options;
    const [isVisible, setIsVisible] = (0, react_1.useState)(false);
    const anchor = (0, react_1.useRef)();
    const parentElement = anchor?.current;
    const hasRightSpace = useHasRightSpace(parentElement, isVisible);
    const closeSubmenuA11y = useCloseSubmenuA11y();
    const submenu = {
        isVisible,
        placement: hasRightSpace ? 'right-start' : 'left-start',
        anchor: anchor?.current,
        offset,
        flip,
        resize,
        inline,
    };
    const parent = {
        ref: anchor,
        onMouseOver: () => setIsVisible(true),
        onMouseLeave: () => setIsVisible(false),
        onClick: () => setIsVisible(true),
        onKeyDown: (event) => {
            const lastChild = anchor.current?.querySelector('.submenu-popover > :last-child > :last-child');
            closeSubmenuA11y({ event, lastChild, setIsVisible });
        },
    };
    return {
        parent,
        submenu,
    };
}
exports.useSubmenuPopoverProps = useSubmenuPopoverProps;
function SubmenuPopover(props) {
    const { children, isVisible = false, ...rest } = props;
    if (!isVisible) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)(components_1.Popover, { className: "submenu-popover", ...rest, children: children }));
}
exports.default = SubmenuPopover;
//# sourceMappingURL=index.js.map