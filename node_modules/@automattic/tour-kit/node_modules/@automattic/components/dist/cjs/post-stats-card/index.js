"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const calypso_analytics_1 = require("@automattic/calypso-analytics");
const icons_1 = require("@wordpress/icons");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
const react_1 = require("react");
const __1 = require("../");
const icons_2 = require("../icons");
require("./style.scss");
function PostStatsCard({ commentCount, heading, likeCount, post, viewCount, titleLink, uploadHref, locale, isLoading, }) {
    const translate = (0, i18n_calypso_1.useTranslate)();
    const parsedDate = (0, react_1.useMemo)(() => post?.date
        ? new Date(post?.date).toLocaleDateString(locale, { dateStyle: 'medium' })
        : '', [post?.date, locale]);
    const TitleTag = titleLink ? 'a' : 'div';
    const recordClickOnUploadImageButton = () => {
        (0, calypso_analytics_1.recordTracksEvent)('calypso_stats_insights_upload_image_button_click', { href: uploadHref });
        if (uploadHref) {
            window.location.href = uploadHref;
        }
    };
    const classes = (0, clsx_1.default)('post-stats-card', {
        'is-loading': isLoading,
    });
    return ((0, jsx_runtime_1.jsxs)(__1.Card, { className: classes, children: [(0, jsx_runtime_1.jsx)("h4", { className: "post-stats-card__heading", children: heading }), (0, jsx_runtime_1.jsxs)("div", { className: "post-stats-card__post-info", children: [(0, jsx_runtime_1.jsx)(TitleTag, { className: "post-stats-card__post-title", href: titleLink, children: post?.title }), (isLoading || post?.date) && ((0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__post-date", children: translate('Published %(date)s', {
                            // TODO: Show relative duration instead of published date. Show actual date in a tooltip.
                            args: { date: parsedDate },
                            comment: 'Date when the post was published.',
                        }) }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "post-stats-card__counts", children: [(0, jsx_runtime_1.jsxs)("div", { className: "post-stats-card__count post-stats-card__count--view", children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "gridicon", icon: icons_2.eye }), (0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__count-header", children: translate('Views') }), (0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__count-value", children: (0, jsx_runtime_1.jsx)(__1.ShortenedNumber, { value: isLoading ? null : viewCount }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "post-stats-card__count post-stats-card__count--like", children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "gridicon", icon: icons_1.starEmpty }), (0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__count-header", children: translate('Likes') }), (0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__count-value", children: (0, jsx_runtime_1.jsx)(__1.ShortenedNumber, { value: isLoading ? null : likeCount }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "post-stats-card__count post-stats-card__count--comment", children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { className: "gridicon", icon: icons_1.commentContent }), (0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__count-header", children: translate('Comments') }), (0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__count-value", children: (0, jsx_runtime_1.jsx)(__1.ShortenedNumber, { value: isLoading ? null : commentCount }) })] })] }), (isLoading || (!post?.post_thumbnail && uploadHref)) && ((0, jsx_runtime_1.jsx)("div", { className: "post-stats-card__upload", children: (0, jsx_runtime_1.jsx)(__1.Button, { className: "post-stats-card__upload-btn is-compact", onClick: recordClickOnUploadImageButton, children: translate('Add featured image') }) })), !isLoading && post?.post_thumbnail && ((0, jsx_runtime_1.jsx)("img", { className: "post-stats-card__thumbnail", src: post?.post_thumbnail, alt: translate('Thumbnail for a post titled "%(title)s"', {
                    args: { title: post.title },
                    comment: 'Alt-text for a thumbnail picture for a given post.',
                    textOnly: true,
                }) }))] }));
}
exports.default = PostStatsCard;
//# sourceMappingURL=index.js.map