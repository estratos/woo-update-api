"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const lodash_1 = require("lodash");
const react_1 = require("react");
function escapeRegExpWithSpace(str) {
    return (0, lodash_1.escapeRegExp)(str).replace(/\s/g, '\\s');
}
const createTextWithHighlight = (text, query) => {
    const re = new RegExp('(' + escapeRegExpWithSpace(query) + ')', 'gi');
    const parts = text.split(re);
    // Replaces char code 160 (&nbsp;) with 32 (space)
    const match = query.toLowerCase().replace(/\s/g, ' ');
    return parts.map((part, i) => {
        const key = text + i;
        const lowercasePart = part.toLowerCase();
        const spanClass = (0, clsx_1.default)('suggestions__label', {
            'is-emphasized': lowercasePart === match,
        });
        return ((0, jsx_runtime_1.jsx)("span", { className: spanClass, children: part }, key));
    });
};
const Item = ({ label, hasHighlight = false, query = '', onMount, onMouseDown, onMouseOver }, forwardedRef) => {
    (0, react_1.useEffect)(() => {
        onMount();
        // Disable reason: We don't want to re-fire `onMount` if it changes, literally only fire it onMount.
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    const handleMouseDown = (event) => {
        event.stopPropagation();
        event.preventDefault();
        onMouseDown();
    };
    const className = (0, clsx_1.default)('suggestions__item', { 'has-highlight': hasHighlight });
    return ((0, jsx_runtime_1.jsx)("button", { className: className, onMouseDown: handleMouseDown, onFocus: handleMouseDown, onMouseOver: onMouseOver, ref: forwardedRef, children: createTextWithHighlight(label, query) }));
};
exports.default = (0, react_1.memo)((0, react_1.forwardRef)(Item));
//# sourceMappingURL=item.js.map