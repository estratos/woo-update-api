"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const components_1 = require("@wordpress/components");
const icons_1 = require("@wordpress/icons");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const i18n_calypso_1 = require("i18n-calypso");
const lodash_1 = require("lodash");
const react_1 = require("react");
const swipeable_1 = require("../swipeable");
require("./style.scss");
const Controls = ({ showControlLabels = false, currentPage, numberOfPages, setCurrentPage, navArrowSize, tracksPrefix, tracksFn, }) => {
    const translate = (0, i18n_calypso_1.useTranslate)();
    const isRtl = (0, i18n_calypso_1.useRtl)();
    if (numberOfPages < 2) {
        return null;
    }
    const canGoBack = currentPage > 0;
    const canGoForward = currentPage < numberOfPages - 1;
    return ((0, jsx_runtime_1.jsxs)("ul", { className: "dot-pager__controls", "aria-label": translate('Pager controls'), children: [(0, lodash_1.times)(numberOfPages, (page) => ((0, jsx_runtime_1.jsx)("li", { "aria-current": page === currentPage ? 'page' : undefined, children: (0, jsx_runtime_1.jsx)("button", { className: (0, clsx_1.default)('dot-pager__control-choose-page', {
                        'dot-pager__control-current': page === currentPage,
                    }), disabled: page === currentPage, "aria-label": translate('Page %(page)d of %(numberOfPages)d', {
                        args: { page: page + 1, numberOfPages },
                    }), onClick: () => {
                        tracksFn(tracksPrefix + '_dot_click', {
                            current_page: currentPage,
                            destination_page: page,
                        });
                        setCurrentPage(page);
                    } }, page.toString()) }, `page-${page}`))), (0, jsx_runtime_1.jsx)("li", { className: "dot-pager__control-gap", children: (0, jsx_runtime_1.jsxs)("button", { className: "dot-pager__control-prev", disabled: !canGoBack, "aria-label": translate('Previous'), onClick: () => {
                        const destinationPage = currentPage - 1;
                        tracksFn(tracksPrefix + '_prev_arrow_click', {
                            current_page: currentPage,
                            destination_page: destinationPage,
                        });
                        setCurrentPage(destinationPage);
                    }, children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icons_1.arrowRight, size: navArrowSize, fill: "currentColor", style: 
                            /* Flip the icon for languages with LTR direction. */
                            !isRtl ? { transform: 'scaleX(-1)' } : undefined }), showControlLabels && translate('Previous')] }) }, "dot-pager-prev"), (0, jsx_runtime_1.jsx)("li", { children: (0, jsx_runtime_1.jsxs)("button", { className: "dot-pager__control-next", disabled: !canGoForward, "aria-label": translate('Next'), onClick: () => {
                        const destinationPage = currentPage + 1;
                        tracksFn(tracksPrefix + '_next_arrow_click', {
                            current_page: currentPage,
                            destination_page: destinationPage,
                        });
                        setCurrentPage(destinationPage);
                    }, children: [showControlLabels && translate('Next'), (0, jsx_runtime_1.jsx)(icons_1.Icon, { icon: icons_1.arrowRight, size: navArrowSize, fill: "currentColor", style: 
                            /* Flip the icon for languages with RTL direction. */
                            isRtl ? { transform: 'scaleX(-1)' } : undefined })] }) }, "dot-pager-next")] }));
};
const DotPager = ({ showControlLabels = false, hasDynamicHeight = false, children, className = '', onPageSelected, isClickEnabled = false, rotateTime = 0, navArrowSize = 18, tracksPrefix = '', tracksFn = () => { }, includePreviousButton = false, includeNextButton = false, includeFinishButton = false, onFinish = () => { }, ...props }) => {
    const translate = (0, i18n_calypso_1.useTranslate)();
    // Filter out the empty children
    const normalizedChildren = react_1.Children.toArray(children).filter(Boolean);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(0);
    const numPages = react_1.Children.count(normalizedChildren);
    (0, react_1.useEffect)(() => {
        if (currentPage >= numPages) {
            setCurrentPage(numPages - 1);
        }
    }, [numPages, currentPage]);
    (0, react_1.useEffect)(() => {
        if (rotateTime > 0 && numPages > 1) {
            const timerId = setTimeout(() => {
                setCurrentPage((currentPage + 1) % numPages);
            }, rotateTime);
            return () => clearTimeout(timerId);
        }
    }, [currentPage, numPages, rotateTime]);
    const handleSelectPage = (index) => {
        setCurrentPage(index);
        onPageSelected?.(index);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)('dot-pager', className), ...props, children: [(0, jsx_runtime_1.jsx)(Controls, { showControlLabels: showControlLabels, currentPage: currentPage, numberOfPages: numPages, setCurrentPage: handleSelectPage, navArrowSize: navArrowSize, tracksPrefix: tracksPrefix, tracksFn: tracksFn }), (0, jsx_runtime_1.jsx)(swipeable_1.Swipeable, { hasDynamicHeight: hasDynamicHeight, onPageSelect: handleSelectPage, currentPage: currentPage, pageClassName: "dot-pager__page", containerClassName: "dot-pager__pages", isClickEnabled: isClickEnabled, children: normalizedChildren }), includePreviousButton && currentPage !== 0 && ((0, jsx_runtime_1.jsx)(components_1.Button, { className: "dot-pager__button dot-pager__button_previous", onClick: () => {
                    const destinationPage = currentPage - 1;
                    tracksFn(tracksPrefix + '_prev_button_click', {
                        current_page: currentPage,
                        destination_page: destinationPage,
                    });
                    setCurrentPage(destinationPage);
                }, children: translate('Previous') })), includeNextButton && currentPage < numPages - 1 && ((0, jsx_runtime_1.jsx)(components_1.Button, { className: "dot-pager__button dot-pager__button_next is-primary", onClick: () => {
                    const destinationPage = currentPage + 1;
                    tracksFn(tracksPrefix + '_next_button_click', {
                        current_page: currentPage,
                        destination_page: destinationPage,
                    });
                    setCurrentPage(destinationPage);
                }, children: translate('Next') })), includeFinishButton && currentPage === numPages - 1 && ((0, jsx_runtime_1.jsx)(components_1.Button, { className: "dot-pager__button dot-pager__button_finish is-primary", onClick: () => {
                    tracksFn(tracksPrefix + '_finish_button_click');
                    onFinish();
                }, children: translate('Done') }))] }));
};
exports.default = DotPager;
//# sourceMappingURL=index.js.map