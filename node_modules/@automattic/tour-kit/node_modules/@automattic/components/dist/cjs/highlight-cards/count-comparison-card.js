"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrendComparison = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const icons_1 = require("@wordpress/icons");
const clsx_1 = tslib_1.__importDefault(require("clsx"));
const react_1 = require("react");
const __1 = require("../");
const popover_1 = tslib_1.__importDefault(require("../popover"));
const numbers_1 = require("./lib/numbers");
function TrendComparison({ count, previousCount }) {
    const difference = (0, numbers_1.subtract)(count, previousCount);
    const percentage = Number.isFinite(difference)
        ? (0, numbers_1.percentCalculator)(Math.abs(difference), previousCount)
        : null;
    // Show nothing if inputs are invalid or if there is no change.
    if (difference === null || difference === 0) {
        return null;
    }
    return Math.abs(difference) === 0 ? null : ((0, jsx_runtime_1.jsxs)("span", { className: (0, clsx_1.default)('highlight-card-difference', {
            'highlight-card-difference--positive': difference < 0,
            'highlight-card-difference--negative': difference > 0,
        }), children: [(0, jsx_runtime_1.jsxs)("span", { className: "highlight-card-difference-icon", children: [difference < 0 && (0, jsx_runtime_1.jsx)(icons_1.Icon, { size: 18, icon: icons_1.arrowDown }), difference > 0 && (0, jsx_runtime_1.jsx)(icons_1.Icon, { size: 18, icon: icons_1.arrowUp })] }), percentage !== null && ((0, jsx_runtime_1.jsxs)("span", { className: "highlight-card-difference-absolute-percentage", children: [' ', (0, numbers_1.formatPercentage)(percentage)] }))] }));
}
exports.TrendComparison = TrendComparison;
function TooltipContent({ count, previousCount }) {
    const difference = (0, numbers_1.subtract)(count, previousCount);
    return ((0, jsx_runtime_1.jsx)("div", { className: "highlight-card-tooltip-content", children: (0, jsx_runtime_1.jsxs)("div", { className: "highlight-card-tooltip-counts", children: [(0, numbers_1.formatNumber)(count, false), '  ', difference !== 0 && difference !== null && ((0, jsx_runtime_1.jsxs)("span", { className: "highlight-card-tooltip-count-difference", children: ["(", (0, numbers_1.formatNumber)(difference, false, true), ")"] }))] }) }));
}
function CountComparisonCard({ count, previousCount, icon, heading, showValueTooltip, compact = false, }) {
    const textRef = (0, react_1.useRef)(null);
    const [isTooltipVisible, setTooltipVisible] = (0, react_1.useState)(false);
    return ((0, jsx_runtime_1.jsxs)(__1.Card, { className: "highlight-card", compact: compact, children: [icon && (0, jsx_runtime_1.jsx)("div", { className: "highlight-card-icon", children: icon }), heading && (0, jsx_runtime_1.jsx)("div", { className: "highlight-card-heading", children: heading }), (0, jsx_runtime_1.jsxs)("div", { className: (0, clsx_1.default)('highlight-card-count', {
                    'is-pointer': showValueTooltip,
                }), onMouseEnter: () => setTooltipVisible(true), onMouseLeave: () => setTooltipVisible(false), children: [(0, jsx_runtime_1.jsx)("span", { className: "highlight-card-count-value", ref: textRef, children: (0, numbers_1.formatNumber)(count) }), ' ', (0, jsx_runtime_1.jsx)(TrendComparison, { count: count, previousCount: previousCount }), showValueTooltip && ((0, jsx_runtime_1.jsx)(popover_1.default, { className: "tooltip tooltip--darker highlight-card-tooltip", isVisible: isTooltipVisible, position: "bottom right", context: textRef.current, children: (0, jsx_runtime_1.jsx)(TooltipContent, { count: count, previousCount: previousCount, icon: icon, heading: heading }) }))] })] }));
}
exports.default = CountComparisonCard;
//# sourceMappingURL=count-comparison-card.js.map