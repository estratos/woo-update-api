"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithClickOpenCloseActions = exports.WithMultilineHeader = exports.WithCustomSummary = exports.WithCustomActionIcon = exports.Highlighted = exports.Disabled = exports.Compact = exports.WithLongHeaderAndHiddenSummary = exports.WithLongHeader = exports.Smooth = exports.Default = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable no-console */
const __1 = require("..");
exports.default = { title: 'packages/components/FoldableCard' };
const Default = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a foldable card", screenReaderText: "More", children: "These are its contents" }));
exports.Default = Default;
const Smooth = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a foldable card with smooth animation", screenReaderText: "More", smooth: true, contentExpandedStyle: { maxHeight: '112px' }, children: (0, jsx_runtime_1.jsxs)("div", { style: { padding: '16px 16px 0' }, children: [(0, jsx_runtime_1.jsx)("p", { children: "These are its contents" }), (0, jsx_runtime_1.jsx)("p", { children: "And some more" })] }) }));
exports.Smooth = Smooth;
const WithLongHeader = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a foldable card with a really long header content area that might wrap depending on the page width of the browser being used to view this page when the summary area is not hidden.", screenReaderText: "More", children: "These are the card's contents." }));
exports.WithLongHeader = WithLongHeader;
const WithLongHeaderAndHiddenSummary = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a foldable card with a really long header content area that might wrap depending on the page width of the browser being used to view this page when the summary area is hidden.", hideSummary: true, screenReaderText: "More", children: "These are the card's contents." }));
exports.WithLongHeaderAndHiddenSummary = WithLongHeaderAndHiddenSummary;
const Compact = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a compact card", compact: true, screenReaderText: "More", children: "I'm tiny! :D" }));
exports.Compact = Compact;
const Disabled = () => ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a disabled card", disabled: true, screenReaderText: "More", children: "You can't see me!" }) }));
exports.Disabled = Disabled;
const Highlighted = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a highlighted card", highlight: "info", screenReaderText: "More", children: "I'm highlighted!" }));
exports.Highlighted = Highlighted;
const WithCustomActionIcon = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a foldable card with a custom action icon", icon: "arrow-down", screenReaderText: "More", children: "These are its contents" }));
exports.WithCustomActionIcon = WithCustomActionIcon;
const WithCustomSummary = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This is a compact box with summary", summary: "Unexpanded Summary", expandedSummary: "Expanded Summary", screenReaderText: "More", children: "This is the main content of the card." }));
exports.WithCustomSummary = WithCustomSummary;
const WithMultilineHeader = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { children: "This is a multiline foldable card" }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)("small", { children: " with a summary component & a expanded summary component" }) })] }), summary: (0, jsx_runtime_1.jsx)(__1.Button, { compact: true, scary: true, children: "Update" }), expandedSummary: (0, jsx_runtime_1.jsx)(__1.Button, { compact: true, scary: true, children: "Update" }), children: "Nothing to see here. Keep walking!" }));
exports.WithMultilineHeader = WithMultilineHeader;
const WithClickOpenCloseActions = () => ((0, jsx_runtime_1.jsx)(__1.FoldableCard, { header: "This card includes click, open and close actions. Check your console!", onClick: function () {
        console.log('Clicked!');
    }, onClose: function () {
        console.log('Closed!');
    }, onOpen: function () {
        console.log('Opened!');
    }, children: "Nothing to see here. Keep walking!" }));
exports.WithClickOpenCloseActions = WithClickOpenCloseActions;
//# sourceMappingURL=index.stories.js.map