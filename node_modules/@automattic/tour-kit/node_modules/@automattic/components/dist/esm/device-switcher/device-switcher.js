import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useResizeObserver } from '@wordpress/compose';
import clsx from 'clsx';
import { useState, useEffect, useRef } from 'react';
import { DEVICE_TYPES } from './constants';
import FixedViewport from './fixed-viewport';
import DeviceSwitcherToolbar from './toolbar';
import useZoomOut from './use-zoom-out';
import './device-switcher.scss';
// Transition animation delay
const ANIMATION_DURATION = 250;
const { COMPUTER, TABLET, PHONE } = DEVICE_TYPES;
const DeviceSwitcher = ({ children, className = '', defaultDevice = COMPUTER, isShowDeviceSwitcherToolbar, isShowFrameBorder, isShowFrameShadow = true, isFixedViewport, isFullscreen, isZoomable, frameRef, onDeviceChange, onViewportChange, onZoomOutScaleChange, }) => {
    const [device, setDevice] = useState(defaultDevice);
    const [isZoomActive, setIsZoomActive] = useState(false);
    const [containerResizeListener, { width, height }] = useResizeObserver();
    const { zoomOutStyles, handleZoomOutScaleChange } = useZoomOut(onZoomOutScaleChange);
    const timerRef = useRef(null);
    const handleDeviceClick = (nextDevice) => {
        setDevice(nextDevice);
        onDeviceChange?.(nextDevice);
    };
    const handleZoomClick = () => {
        setIsZoomActive(!isZoomActive);
        handleZoomOutScaleChange(!isZoomActive ? 0.5 : 1);
    };
    // Animate on viewport size update
    useEffect(() => {
        const clearAnimationEndTimer = () => {
            if (timerRef.current) {
                clearTimeout(timerRef.current);
            }
        };
        // Trigger animation end after the duration
        timerRef.current = setTimeout(() => {
            timerRef.current = null;
            const frameHeight = frameRef?.current?.getBoundingClientRect()?.height;
            if (frameHeight) {
                onViewportChange?.(frameHeight);
            }
        }, ANIMATION_DURATION);
        return clearAnimationEndTimer;
    }, [width, height, isFixedViewport]);
    let frame = (_jsx("div", { className: "device-switcher__frame", ref: frameRef, children: children }));
    if (isZoomable) {
        frame = _jsx("div", { style: zoomOutStyles, children: frame });
    }
    if (isFixedViewport) {
        frame = (_jsx(FixedViewport, { device: device, viewportWidth: width ?? 0, children: frame }));
    }
    return (_jsxs("div", { className: clsx(className, 'device-switcher__container', {
            'device-switcher__container--frame-fixed-viewport': isFixedViewport,
            'device-switcher__container--frame-shadow': isShowFrameShadow,
            'device-switcher__container--frame-bordered': isShowFrameBorder,
            'device-switcher__container--is-computer': device === COMPUTER,
            'device-switcher__container--is-tablet': device === TABLET,
            'device-switcher__container--is-phone': device === PHONE,
            'device-switcher__container--is-fullscreen': isFullscreen,
        }), children: [_jsx("div", { className: "device-switcher__header", children: isShowDeviceSwitcherToolbar && (_jsx(DeviceSwitcherToolbar, { device: device, isZoomable: !!isZoomable, isZoomActive: isZoomActive, onDeviceClick: handleDeviceClick, onZoomClick: handleZoomClick })) }), frame, containerResizeListener] }));
};
export default DeviceSwitcher;
//# sourceMappingURL=device-switcher.js.map