import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { commentContent, Icon, people, starEmpty, info, moreVertical, check, } from '@wordpress/icons';
import clsx from 'clsx';
import { useTranslate } from 'i18n-calypso';
import { useState, useRef, useCallback } from 'react';
import ComponentSwapper from '../component-swapper';
import { eye } from '../icons';
import Popover from '../popover';
import { comparingInfoBarsChart, comparingInfoRangeChart } from './charts';
import CountComparisonCard from './count-comparison-card';
import HighlightCardsHeading from './highlight-cards-heading';
import MobileHighlightCardListing from './mobile-highlight-cards';
import './style.scss';
export const PAST_SEVEN_DAYS = 'past_seven_days';
export const PAST_THIRTY_DAYS = 'past_thirty_days';
export const BETWEEN_PAST_EIGHT_AND_FIFTEEN_DAYS = 'between_past_eight_and_fifteen_days';
export const BETWEEN_PAST_THIRTY_ONE_AND_SIXTY_DAYS = 'between_past_thirty_one_and_sixty_days';
const HighlightCardsSettings = function ({ currentPeriod, onTogglePeriod, onTooltipDismiss, showTooltip = false, }) {
    const translate = useTranslate();
    const [isPopoverVisible, setPopoverVisible] = useState(false);
    const togglePopoverMenu = useCallback(() => {
        onTooltipDismiss();
        setPopoverVisible((isVisible) => {
            return !isVisible;
        });
    }, [onTooltipDismiss]);
    // Use state to update the ref of the setting action button to avoid null element.
    const [settingsActionRef, setSettingsActionRef] = useState(useRef(null));
    const buttonRefCallback = useCallback((node) => {
        if (settingsActionRef.current === null) {
            setSettingsActionRef({ current: node });
        }
    }, []);
    return (_jsxs("div", { className: "highlight-cards-heading__settings", children: [_jsx("button", { className: "highlight-cards-heading__settings-action", ref: buttonRefCallback, onClick: togglePopoverMenu, children: _jsx(Icon, { className: "gridicon", icon: moreVertical }) }), _jsx(Popover, { className: "tooltip tooltip--darker highlight-card-tooltip highlight-card__settings-tooltip", isVisible: showTooltip, position: "bottom left", context: settingsActionRef.current, autoRepositionOnInitialLoad: true, children: _jsxs("div", { className: "highlight-card-tooltip-content", children: [_jsx("p", { children: translate('You can now tailor your site highlights by adjusting the time range.') }), _jsx("button", { onClick: onTooltipDismiss, children: translate('Got it') })] }) }), _jsxs(Popover, { className: "tooltip highlight-card-popover", isVisible: isPopoverVisible, position: "bottom left", context: settingsActionRef.current, focusOnShow: false, onClose: () => {
                    setPopoverVisible(false);
                }, children: [_jsxs("button", { onClick: () => {
                            onTogglePeriod(PAST_SEVEN_DAYS);
                        }, children: [translate('7-day highlights'), currentPeriod === PAST_SEVEN_DAYS && _jsx(Icon, { className: "gridicon", icon: check })] }), _jsxs("button", { onClick: () => {
                            onTogglePeriod(PAST_THIRTY_DAYS);
                        }, children: [translate('30-day highlights'), currentPeriod === PAST_THIRTY_DAYS && _jsx(Icon, { className: "gridicon", icon: check })] })] })] }));
};
function WeeklyHighlighCardsStandard({ counts, previousCounts, showValueTooltip, onClickComments, onClickLikes, onClickViews, onClickVisitors, }) {
    const translate = useTranslate();
    return (_jsxs("div", { className: "highlight-cards-list", children: [_jsx(CountComparisonCard, { heading: translate('Views'), icon: _jsx(Icon, { icon: eye }), count: counts?.views ?? null, previousCount: previousCounts?.views ?? null, showValueTooltip: showValueTooltip, onClick: onClickViews }), _jsx(CountComparisonCard, { heading: translate('Visitors'), icon: _jsx(Icon, { icon: people }), count: counts?.visitors ?? null, previousCount: previousCounts?.visitors ?? null, showValueTooltip: showValueTooltip, onClick: onClickVisitors }), _jsx(CountComparisonCard, { heading: translate('Likes'), icon: _jsx(Icon, { icon: starEmpty }), count: counts?.likes ?? null, previousCount: previousCounts?.likes ?? null, showValueTooltip: showValueTooltip, onClick: onClickLikes }), _jsx(CountComparisonCard, { heading: translate('Comments'), icon: _jsx(Icon, { icon: commentContent }), count: counts?.comments ?? null, previousCount: previousCounts?.comments ?? null, showValueTooltip: showValueTooltip, onClick: onClickComments })] }));
}
function WeeklyHighlighCardsMobile({ counts, previousCounts }) {
    const translate = useTranslate();
    const highlights = [
        {
            heading: translate('Visitors'),
            count: counts?.visitors,
            previousCount: previousCounts?.visitors,
            icon: people,
        },
        {
            heading: translate('Views'),
            count: counts?.views,
            previousCount: previousCounts?.views,
            icon: eye,
        },
        {
            heading: translate('Likes'),
            count: counts?.likes,
            previousCount: previousCounts?.likes,
            icon: starEmpty,
        },
        {
            heading: translate('Comments'),
            count: counts?.comments,
            previousCount: previousCounts?.comments,
            icon: commentContent,
        },
    ];
    return _jsx(MobileHighlightCardListing, { highlights: highlights });
}
export default function WeeklyHighlightCards({ className, counts, onClickComments, onClickLikes, onClickViews, onClickVisitors, onTogglePeriod, previousCounts, showValueTooltip, currentPeriod, onSettingsTooltipDismiss, showSettingsTooltip, isHighlightsSettingsSupported = false, }) {
    const translate = useTranslate();
    const textRef = useRef(null);
    const [isTooltipVisible, setTooltipVisible] = useState(false);
    return (_jsxs("div", { className: clsx('highlight-cards', className ?? null), children: [_jsxs(HighlightCardsHeading, { children: [_jsx("span", { children: currentPeriod === PAST_THIRTY_DAYS
                            ? translate('30-day highlights')
                            : translate('7-day highlights') }), isHighlightsSettingsSupported && (_jsx("small", { className: "highlight-cards-heading__description", children: currentPeriod === PAST_THIRTY_DAYS
                            ? translate('Compared to previous 30 days')
                            : translate('Compared to previous 7 days') })), !isHighlightsSettingsSupported && (_jsxs("div", { className: "highlight-cards-heading__tooltip", children: [_jsx("span", { className: "highlight-cards-heading-icon", ref: textRef, onMouseEnter: () => setTooltipVisible(true), onMouseLeave: () => setTooltipVisible(false), children: _jsx(Icon, { className: "gridicon", icon: info }) }), _jsx(Popover, { className: "tooltip tooltip--darker highlight-card-tooltip", isVisible: isTooltipVisible, position: "bottom right", context: textRef.current, children: _jsxs("div", { className: "highlight-card-tooltip-content comparing-info", children: [_jsx("p", { children: translate('Highlights displayed are for the last 7 days, excluding today.') }), _jsx("p", { children: translate('Trends shown are in comparison to the previous 7 days before that.') }), _jsxs("div", { className: "comparing-info-chart", children: [_jsx("small", { children: translate('%(fourteen)d days {{vs/}} %(seven)d days', {
                                                        components: {
                                                            vs: _jsx("span", { children: "vs" }),
                                                        },
                                                        args: {
                                                            fourteen: 14,
                                                            seven: 7,
                                                        },
                                                    }) }), comparingInfoRangeChart, comparingInfoBarsChart] })] }) })] })), isHighlightsSettingsSupported && (_jsx(HighlightCardsSettings, { currentPeriod: currentPeriod, onTogglePeriod: onTogglePeriod, onTooltipDismiss: onSettingsTooltipDismiss, showTooltip: showSettingsTooltip }))] }), _jsx(ComponentSwapper, { breakpoint: "<660px", breakpointActiveComponent: _jsx(WeeklyHighlighCardsMobile, { counts: counts, previousCounts: previousCounts }), breakpointInactiveComponent: _jsx(WeeklyHighlighCardsStandard, { counts: counts, previousCounts: previousCounts, showValueTooltip: showValueTooltip, onClickComments: onClickComments, onClickLikes: onClickLikes, onClickViews: onClickViews, onClickVisitors: onClickVisitors }) })] }));
}
//# sourceMappingURL=weekly-highlight-cards.js.map