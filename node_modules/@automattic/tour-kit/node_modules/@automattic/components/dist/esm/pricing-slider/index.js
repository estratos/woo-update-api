import { jsx as _jsx } from "react/jsx-runtime";
import clsx from 'clsx';
import React from 'react';
import ReactSlider from 'react-slider';
import './style.scss';
/**
 * Generate Pricing Slider
 * More support from the original ReactSlider component: https://zillow.github.io/react-slider/
 * @param {PricingSliderProps} props - Props
 * @returns {React.ReactElement} - JSX element
 */
const PricingSlider = ({ className, maxValue = 100, minValue = 0, step = 1, value, onChange, onBeforeChange, onAfterChange, renderThumb, thumbClassName, marks = false, }) => {
    const [isThumbHolding, setIsThumbHolding] = React.useState(false);
    const componentClassName = clsx('jp-components-pricing-slider', className, {
        'jp-components-pricing-slider--is-holding': isThumbHolding,
    });
    const thumbClassNames = clsx('jp-components-pricing-slider__thumb', thumbClassName);
    const onBeforeChangeCallback = (beforeValue) => {
        setIsThumbHolding(true);
        if (typeof onBeforeChange === 'function') {
            onBeforeChange(beforeValue);
        }
    };
    const onAfterChangeCallback = (afterValue) => {
        setIsThumbHolding(false);
        if (typeof onAfterChange === 'function') {
            onAfterChange(afterValue);
        }
    };
    const renderThumbCallback = renderThumb
        ? renderThumb
        : ((props, state) => {
            return _jsx("div", { ...props, children: state.valueNow });
        });
    const renderMarks = (props) => (_jsx("span", { ...props, className: clsx(props?.className, {
            ['jp-components-pricing-slider__mark--selected']: (props?.key ?? 0) <= (value ?? 0),
        }) }));
    return (_jsx("div", { className: componentClassName, "data-testid": "pricing-slider", children: _jsx(ReactSlider, { className: "jp-components-pricing-slider__control", thumbClassName: thumbClassNames, thumbActiveClassName: "jp-components-pricing-slider__thumb--is-active", trackClassName: "jp-components-pricing-slider__track", marks: marks, renderMark: renderMarks, value: value, max: maxValue, min: minValue, step: step, renderThumb: renderThumbCallback, onChange: onChange, onBeforeChange: onBeforeChangeCallback, onAfterChange: onAfterChangeCallback }) }));
};
export default PricingSlider;
//# sourceMappingURL=index.js.map