import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import clsx from 'clsx';
import { useRef, useState } from 'react';
import { Card } from '../';
import Popover from '../popover';
import { formatNumber } from './lib/numbers';
function TooltipContent({ value }) {
    return (_jsx("div", { className: "highlight-card-tooltip-content", children: _jsx("span", { className: "highlight-card-tooltip-counts", children: formatNumber(value, false) }) }));
}
export default function CountCard({ heading, icon, note, value, showValueTooltip, }) {
    const textRef = useRef(null);
    const [isTooltipVisible, setTooltipVisible] = useState(false);
    // Tooltips are used to show the full number instead of the shortened number.
    // Non-numeric values are not shown in the tooltip.
    const shouldShowTooltip = showValueTooltip && typeof value === 'number';
    return (_jsxs(Card, { className: "highlight-card", children: [icon && _jsx("div", { className: "highlight-card-icon", children: icon }), heading && _jsx("div", { className: "highlight-card-heading", children: heading }), _jsx("div", { className: clsx('highlight-card-count', {
                    'is-pointer': showValueTooltip,
                }), onMouseEnter: () => setTooltipVisible(true), onMouseLeave: () => setTooltipVisible(false), children: _jsx("span", { className: "highlight-card-count-value", ref: textRef, children: typeof value === 'number' ? formatNumber(value, true) : value }) }), shouldShowTooltip && (_jsxs(Popover, { className: "tooltip tooltip--darker highlight-card-tooltip", isVisible: isTooltipVisible, position: "bottom right", context: textRef.current, children: [_jsx(TooltipContent, { value: value }), note && _jsx("div", { className: "highlight-card-tooltip-note", children: note })] }))] }));
}
//# sourceMappingURL=count-card.js.map