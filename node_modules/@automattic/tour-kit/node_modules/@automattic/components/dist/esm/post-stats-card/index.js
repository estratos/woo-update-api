import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { recordTracksEvent } from '@automattic/calypso-analytics';
import { Icon, commentContent, starEmpty } from '@wordpress/icons';
import clsx from 'clsx';
import { useTranslate } from 'i18n-calypso';
import { useMemo } from 'react';
import { Card, ShortenedNumber, Button } from '../';
import { eye } from '../icons';
import './style.scss';
export default function PostStatsCard({ commentCount, heading, likeCount, post, viewCount, titleLink, uploadHref, locale, isLoading, }) {
    const translate = useTranslate();
    const parsedDate = useMemo(() => post?.date
        ? new Date(post?.date).toLocaleDateString(locale, { dateStyle: 'medium' })
        : '', [post?.date, locale]);
    const TitleTag = titleLink ? 'a' : 'div';
    const recordClickOnUploadImageButton = () => {
        recordTracksEvent('calypso_stats_insights_upload_image_button_click', { href: uploadHref });
        if (uploadHref) {
            window.location.href = uploadHref;
        }
    };
    const classes = clsx('post-stats-card', {
        'is-loading': isLoading,
    });
    return (_jsxs(Card, { className: classes, children: [_jsx("h4", { className: "post-stats-card__heading", children: heading }), _jsxs("div", { className: "post-stats-card__post-info", children: [_jsx(TitleTag, { className: "post-stats-card__post-title", href: titleLink, children: post?.title }), (isLoading || post?.date) && (_jsx("div", { className: "post-stats-card__post-date", children: translate('Published %(date)s', {
                            // TODO: Show relative duration instead of published date. Show actual date in a tooltip.
                            args: { date: parsedDate },
                            comment: 'Date when the post was published.',
                        }) }))] }), _jsxs("div", { className: "post-stats-card__counts", children: [_jsxs("div", { className: "post-stats-card__count post-stats-card__count--view", children: [_jsx(Icon, { className: "gridicon", icon: eye }), _jsx("div", { className: "post-stats-card__count-header", children: translate('Views') }), _jsx("div", { className: "post-stats-card__count-value", children: _jsx(ShortenedNumber, { value: isLoading ? null : viewCount }) })] }), _jsxs("div", { className: "post-stats-card__count post-stats-card__count--like", children: [_jsx(Icon, { className: "gridicon", icon: starEmpty }), _jsx("div", { className: "post-stats-card__count-header", children: translate('Likes') }), _jsx("div", { className: "post-stats-card__count-value", children: _jsx(ShortenedNumber, { value: isLoading ? null : likeCount }) })] }), _jsxs("div", { className: "post-stats-card__count post-stats-card__count--comment", children: [_jsx(Icon, { className: "gridicon", icon: commentContent }), _jsx("div", { className: "post-stats-card__count-header", children: translate('Comments') }), _jsx("div", { className: "post-stats-card__count-value", children: _jsx(ShortenedNumber, { value: isLoading ? null : commentCount }) })] })] }), (isLoading || (!post?.post_thumbnail && uploadHref)) && (_jsx("div", { className: "post-stats-card__upload", children: _jsx(Button, { className: "post-stats-card__upload-btn is-compact", onClick: recordClickOnUploadImageButton, children: translate('Add featured image') }) })), !isLoading && post?.post_thumbnail && (_jsx("img", { className: "post-stats-card__thumbnail", src: post?.post_thumbnail, alt: translate('Thumbnail for a post titled "%(title)s"', {
                    args: { title: post.title },
                    comment: 'Alt-text for a thumbnail picture for a given post.',
                    textOnly: true,
                }) }))] }));
}
//# sourceMappingURL=index.js.map