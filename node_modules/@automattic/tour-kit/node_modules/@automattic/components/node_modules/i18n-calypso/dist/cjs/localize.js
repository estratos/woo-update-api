"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = localize;
var _react = require("react");
var _context = _interopRequireDefault(require("./context"));
var _jsxRuntime = require("react/jsx-runtime");
function bindI18nProps(i18n) {
  return {
    numberFormat: i18n.numberFormat.bind(i18n),
    translate: i18n.translate.bind(i18n),
    locale: i18n.getLocaleSlug()
  };
}

/**
 * Localize a React component
 * @param  {import('react').Component} ComposedComponent React component to localize
 * @returns {import('react').Component} The localized component
 */
function localize(ComposedComponent) {
  const LocalizedComponent = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
    const i18n = (0, _react.useContext)(_context.default);
    const [counter, setCounter] = (0, _react.useState)(0);
    (0, _react.useEffect)(() => {
      const onChange = () => setCounter(c => c + 1);
      i18n.on('change', onChange);
      return () => i18n.off('change', onChange);
    }, [i18n]);
    const i18nProps = (0, _react.useMemo)(() => bindI18nProps(i18n, counter), [i18n, counter]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ComposedComponent, {
      ...props,
      ...i18nProps,
      ref: ref
    });
  });
  const componentName = ComposedComponent.displayName || ComposedComponent.name || '';
  LocalizedComponent.displayName = 'Localized(' + componentName + ')';
  return LocalizedComponent;
}