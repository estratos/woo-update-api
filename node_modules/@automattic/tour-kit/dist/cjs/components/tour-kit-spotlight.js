"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPOTLIT_ELEMENT_CLASS = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const element_1 = require("@wordpress/element");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const react_popper_1 = require("react-popper");
const live_resize_modifier_1 = require("../utils/live-resize-modifier");
const tour_kit_overlay_1 = tslib_1.__importDefault(require("./tour-kit-overlay"));
const tour_kit_spotlight_interactivity_1 = require("./tour-kit-spotlight-interactivity");
exports.SPOTLIT_ELEMENT_CLASS = 'wp-tour-kit-spotlit';
const TourKitSpotlight = ({ referenceElement, styles, interactivity, liveResize, }) => {
    const [popperElement, sePopperElement] = (0, element_1.useState)(null);
    const referenceRect = referenceElement?.getBoundingClientRect();
    const modifiers = [
        {
            name: 'flip',
            enabled: false,
        },
        {
            name: 'preventOverflow',
            options: {
                mainAxis: false, // true by default
            },
        },
        (0, element_1.useMemo)(() => ({
            name: 'offset',
            options: {
                offset: ({ placement, reference, popper, }) => {
                    if (placement === 'bottom') {
                        return [0, -(reference.height + (popper.height - reference.height) / 2)];
                    }
                    return [0, 0];
                },
            },
        }), []),
        // useMemo because https://popper.js.org/react-popper/v2/faq/#why-i-get-render-loop-whenever-i-put-a-function-inside-the-popper-configuration
        (0, element_1.useMemo)(() => {
            return (0, live_resize_modifier_1.liveResizeModifier)(liveResize);
        }, [liveResize]),
    ];
    const { styles: popperStyles, attributes: popperAttributes } = (0, react_popper_1.usePopper)(referenceElement, popperElement, {
        strategy: 'fixed',
        placement: 'bottom',
        modifiers,
    });
    const clipDimensions = referenceRect
        ? {
            width: `${referenceRect.width}px`,
            height: `${referenceRect.height}px`,
        }
        : null;
    const clipRepositionProps = referenceElement
        ? {
            style: {
                ...(clipDimensions && clipDimensions),
                ...popperStyles?.popper,
                ...(styles && styles),
            },
            ...popperAttributes?.popper,
        }
        : null;
    /**
     * Add a .wp-spotlit class to the referenced element so that we can
     * apply CSS styles to it, for whatever purposes such as interactivity
     */
    (0, element_1.useEffect)(() => {
        referenceElement?.classList.add(exports.SPOTLIT_ELEMENT_CLASS);
        return () => {
            referenceElement?.classList.remove(exports.SPOTLIT_ELEMENT_CLASS);
        };
    }, [referenceElement]);
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(tour_kit_spotlight_interactivity_1.SpotlightInteractivity, { ...interactivity }), (0, jsx_runtime_1.jsx)(tour_kit_overlay_1.default, { visible: !clipRepositionProps }), (0, jsx_runtime_1.jsx)("div", { className: (0, classnames_1.default)('tour-kit-spotlight', {
                    'is-visible': !!clipRepositionProps,
                }), ref: sePopperElement, ...clipRepositionProps })] }));
};
exports.default = TourKitSpotlight;
//# sourceMappingURL=tour-kit-spotlight.js.map