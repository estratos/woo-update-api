"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External Dependencies
 */
const element_1 = require("@wordpress/element");
/**
 * A hook that returns true/false if ref node receives focus by either tabbing or clicking into any of its children.
 * @param ref React.MutableRefObject< null | HTMLElement >
 */
const useFocusHandler = (ref) => {
    const [hasFocus, setHasFocus] = (0, element_1.useState)(false);
    const handleFocus = (0, element_1.useCallback)(() => {
        if (document.hasFocus() && ref.current?.contains(document.activeElement)) {
            setHasFocus(true);
        }
        else {
            setHasFocus(false);
        }
    }, [ref]);
    const handleMousedown = (0, element_1.useCallback)((event) => {
        if (ref.current?.contains(event.target)) {
            setHasFocus(true);
        }
        else {
            setHasFocus(false);
        }
    }, [ref]);
    const handleKeyup = (0, element_1.useCallback)((event) => {
        if (event.key === 'Tab') {
            if (ref.current?.contains(event.target)) {
                setHasFocus(true);
            }
            else {
                setHasFocus(false);
            }
        }
    }, [ref]);
    (0, element_1.useEffect)(() => {
        document.addEventListener('focusin', handleFocus);
        document.addEventListener('mousedown', handleMousedown);
        document.addEventListener('keyup', handleKeyup);
        return () => {
            document.removeEventListener('focusin', handleFocus);
            document.removeEventListener('mousedown', handleMousedown);
            document.removeEventListener('keyup', handleKeyup);
        };
    }, [ref, handleFocus, handleKeyup, handleMousedown]);
    return hasFocus;
};
exports.default = useFocusHandler;
//# sourceMappingURL=use-focus-handler.js.map