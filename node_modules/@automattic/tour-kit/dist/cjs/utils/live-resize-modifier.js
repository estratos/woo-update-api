"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.liveResizeModifier = void 0;
const utils_1 = require("../utils");
/**
 * Function that returns a Popper modifier that observes the specified root element as well as
 * reference element for any changes. The reason for being a currying function is so that
 * we can customise the root element selector, otherwise observing at a higher than necessary
 * level might cause unnecessary performance penalties.
 *
 * The Popper modifier queues an asynchronous update on the Popper instance whenever either of the
 * Observers trigger its callback.
 * @returns custom Popper modifier
 */
const liveResizeModifier = ({ rootElementSelector, mutation = false, resize = false } = {
    mutation: false,
    resize: false,
}) => ({
    name: 'liveResizeModifier',
    enabled: true,
    phase: 'main',
    fn: () => {
        return;
    },
    effect: (arg0) => {
        try {
            const { state, instance } = arg0; // augment types here because we are mutating the properties on the argument that is passed in
            const ObserversProp = Symbol(); // use a symbol here so that we don't clash with multiple poppers using this modifier on the same reference node
            const { reference } = state.elements;
            reference[ObserversProp] = {
                resizeObserver: new ResizeObserver(() => {
                    instance.update();
                }),
                mutationObserver: new MutationObserver(() => {
                    instance.update();
                }),
            };
            if (resize) {
                if (reference instanceof Element) {
                    reference[ObserversProp].resizeObserver.observe(reference);
                }
                else {
                    (0, utils_1.debug)('Error: ResizeObserver does not work with virtual elements, Tour Kit will not resize automatically if the size of the referenced element changes.');
                }
            }
            if (mutation) {
                const rootElementNode = document.querySelector(rootElementSelector || '#wpwrap');
                if (rootElementNode instanceof Element) {
                    reference[ObserversProp].mutationObserver.observe(rootElementNode, {
                        attributes: true,
                        characterData: true,
                        childList: true,
                        subtree: true,
                    });
                }
                else {
                    (0, utils_1.debug)(`Error: ${rootElementSelector} selector did not find a valid DOM element, Tour Kit will not update automatically if the DOM layout changes.`);
                }
            }
            return () => {
                reference[ObserversProp].resizeObserver.disconnect();
                reference[ObserversProp].mutationObserver.disconnect();
                delete reference[ObserversProp];
            };
        }
        catch (error) {
            (0, utils_1.debug)('Error: Tour Kit live resize modifier failed unexpectedly:', error);
        }
    },
});
exports.liveResizeModifier = liveResizeModifier;
//# sourceMappingURL=live-resize-modifier.js.map