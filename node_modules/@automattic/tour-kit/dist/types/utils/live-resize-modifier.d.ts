import type { Modifier } from 'react-popper';
export interface LiveResizeConfiguration {
    /** CSS Selector for the the DOM node (and children) to observe for mutations */
    rootElementSelector?: string;
    /** True to enable update on reference element resize, defaults to false */
    resize?: boolean;
    /** True to enable update on node and subtree mutation, defaults to false. May be performance intensive */
    mutation?: boolean;
}
type liveResizeModifierFactory = (params: LiveResizeConfiguration | undefined) => Modifier<'liveResizeModifier', Record<string, unknown>>;
/**
 * Function that returns a Popper modifier that observes the specified root element as well as
 * reference element for any changes. The reason for being a currying function is so that
 * we can customise the root element selector, otherwise observing at a higher than necessary
 * level might cause unnecessary performance penalties.
 *
 * The Popper modifier queues an asynchronous update on the Popper instance whenever either of the
 * Observers trigger its callback.
 * @returns custom Popper modifier
 */
export declare const liveResizeModifier: liveResizeModifierFactory;
export {};
//# sourceMappingURL=live-resize-modifier.d.ts.map