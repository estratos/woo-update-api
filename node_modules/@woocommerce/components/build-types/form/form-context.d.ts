/**
 * External dependencies
 */
import { ChangeEvent } from 'react';
export declare type FormContext<Values extends Record<string, any>> = {
    values: Values;
    errors: {
        [P in keyof Values]?: string;
    };
    isDirty: boolean;
    touched: {
        [P in keyof Values]?: boolean | undefined;
    };
    changedFields: {
        [P in keyof Values]?: boolean | undefined;
    };
    setTouched: React.Dispatch<React.SetStateAction<{
        [P in keyof Values]?: boolean | undefined;
    }>>;
    setValue: (name: string, value: any) => void;
    handleSubmit: () => Promise<Values>;
    getInputProps<Value extends Values[keyof Values]>(name: string): {
        value: Value;
        checked: boolean;
        selected?: boolean;
        onChange: (value: ChangeEvent<HTMLInputElement> | Value) => void;
        onBlur: () => void;
        className: string | undefined;
        help: string | null | undefined;
    };
    isValidForm: boolean;
    resetForm: (initialValues: Values) => void;
};
export declare const FormContext: import("react").Context<FormContext<any>>;
export declare function useFormContext<Values extends Record<string, any>>(): FormContext<Values>;
//# sourceMappingURL=form-context.d.ts.map