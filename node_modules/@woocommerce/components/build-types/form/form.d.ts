import { PropsWithChildren } from 'react';
declare type FormProps<Values> = {
    /**
     * Object of all initial errors to store in state.
     */
    errors?: {
        [P in keyof Values]?: string;
    };
    /**
     * Object key:value pair list of all initial field values.
     */
    initialValues?: Values;
    /**
     * This prop helps determine whether or not a field has received focus
     */
    touched?: Record<keyof Values, boolean>;
    /**
     * Function to call when a form is submitted with valid fields.
     *
     * @deprecated
     */
    onSubmitCallback?: (values: Values) => void;
    /**
     * Function to call when a form is submitted with valid fields.
     */
    onSubmit?: (values: Values) => void;
    /**
     * Function to call when a value changes in the form.
     *
     * @deprecated
     */
    onChangeCallback?: () => void;
    /**
     * Function to call when a value changes in the form.
     */
    onChange?: (value: {
        name: string;
        value: any;
    }, values: Values, hasErrors: boolean) => void;
    /**
     * A function that is passed a list of all values and
     * should return an `errors` object with error response.
     */
    validate?: (values: Values) => Record<string, string>;
};
export declare type FormRef<Values> = {
    resetForm: (initialValues: Values) => void;
};
declare const Form: <Values extends Record<string, any>>(props: FormProps<Values> & {
    children?: import("react").ReactNode;
} & {
    ref?: import("react").ForwardedRef<FormRef<Values>> | undefined;
}, ref: import("react").Ref<FormRef<Values>>) => React.ReactElement | null;
export { Form };
//# sourceMappingURL=form.d.ts.map