export default TreeSelectControl;
export type CommonOption = {
    /**
     * The value for the option
     */
    value: string;
    /**
     * Optional unique key for the Option. It will fallback to the value property if not defined
     */
    key?: string | undefined;
};
export type BaseOption = {
    /**
     * The label for the option
     */
    label: string;
    /**
     * The children Option objects
     */
    children?: Option[] | undefined;
};
export type Option = CommonOption & BaseOption;
export type BaseInnerOption = {
    /**
     * The label string or label with highlighted react element for the option.
     */
    label: string | JSX.Element;
    /**
     * The children options. The options are filtered if in searching.
     */
    children: InnerOption[] | undefined;
    /**
     * Whether this option has children.
     */
    hasChildren: boolean;
    /**
     * All leaf options that are flattened under this option. The options are filtered if in searching.
     */
    leaves: InnerOption[];
    /**
     * Whether this option is checked.
     */
    checked: boolean;
    /**
     * Whether this option is partially checked.
     */
    partialChecked: boolean;
    /**
     * Whether this option is expanded.
     */
    expanded: boolean;
    /**
     * The parent of the current option
     */
    parent: boolean;
};
export type InnerOption = CommonOption & BaseInnerOption;
/**
 * @typedef {Object} CommonOption
 * @property {string} value The value for the option
 * @property {string} [key] Optional unique key for the Option. It will fallback to the value property if not defined
 */
/**
 * @typedef {Object} BaseOption
 * @property {string}   label      The label for the option
 * @property {Option[]} [children] The children Option objects
 *
 * @typedef {CommonOption & BaseOption} Option
 */
/**
 * @typedef {Object} BaseInnerOption
 * @property {string|JSX.Element}      label          The label string or label with highlighted react element for the option.
 * @property {InnerOption[]|undefined} children       The children options. The options are filtered if in searching.
 * @property {boolean}                 hasChildren    Whether this option has children.
 * @property {InnerOption[]}           leaves         All leaf options that are flattened under this option. The options are filtered if in searching.
 * @property {boolean}                 checked        Whether this option is checked.
 * @property {boolean}                 partialChecked Whether this option is partially checked.
 * @property {boolean}                 expanded       Whether this option is expanded.
 * @property {boolean}                 parent         The parent of the current option
 * @typedef {CommonOption & BaseInnerOption} InnerOption
 */
/**
 * Renders a component with a searchable control, tags and a tree selector.
 *
 * @param {Object}                     props                              Component props.
 * @param {string}                     [props.id]                         Component id
 * @param {string}                     [props.label]                      Label for the component
 * @param {string | false}             [props.selectAllLabel]             Label for the Select All root element. False for disable.
 * @param {string}                     [props.help]                       Help text under the select input.
 * @param {string}                     [props.placeholder]                Placeholder for the search control input
 * @param {string}                     [props.className]                  The class name for this component
 * @param {boolean}                    [props.disabled]                   Disables the component
 * @param {Option[]}                   [props.options]                    Options to show in the component
 * @param {string[]}                   [props.value]                      Selected values
 * @param {number}                     [props.maxVisibleTags]             The maximum number of tags to show. Undefined, 0 or less than 0 evaluates to "Show All".
 * @param {Function}                   [props.onChange]                   Callback when the selector changes
 * @param {(visible: boolean) => void} [props.onDropdownVisibilityChange] Callback when the visibility of the dropdown options is changed.
 * @return {JSX.Element} The component
 */
declare function TreeSelectControl({ id, label, selectAllLabel, help, placeholder, className, disabled, options, value, maxVisibleTags, onChange, onDropdownVisibilityChange, }: {
    id?: string | undefined;
    label?: string | undefined;
    selectAllLabel?: string | false | undefined;
    help?: string | undefined;
    placeholder?: string | undefined;
    className?: string | undefined;
    disabled?: boolean | undefined;
    options?: Option[] | undefined;
    value?: string[] | undefined;
    maxVisibleTags?: number | undefined;
    onChange?: Function | undefined;
    onDropdownVisibilityChange?: ((visible: boolean) => void) | undefined;
}): JSX.Element;
//# sourceMappingURL=index.d.ts.map