"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const element_1 = require("@wordpress/element");
const classnames_1 = __importDefault(require("classnames"));
const components_1 = require("@wordpress/components");
const icons_1 = require("@wordpress/icons");
const html_entities_1 = require("@wordpress/html-entities");
const prop_types_1 = __importDefault(require("prop-types"));
const compose_1 = require("@wordpress/compose");
/**
 * This component can be used to show an item styled as a "tag", optionally with an `X` + "remove"
 * or with a popover that is shown on click.
 *
 * @param {Object}        props
 * @param {number|string} props.id
 * @param {string}        props.instanceId
 * @param {string}        props.label
 * @param {Object}        props.popoverContents
 * @param {Function}      props.remove
 * @param {string}        props.screenReaderLabel
 * @param {string}        props.className
 * @return {Object} -
 */
const Tag = ({ id, instanceId, label, popoverContents, remove, screenReaderLabel, className, }) => {
    const [isVisible, setIsVisible] = (0, element_1.useState)(false);
    screenReaderLabel = screenReaderLabel || label;
    if (!label) {
        // A null label probably means something went wrong
        // @todo Maybe this should be a loading indicator?
        return null;
    }
    label = (0, html_entities_1.decodeEntities)(label);
    const classes = (0, classnames_1.default)('woocommerce-tag', className, {
        'has-remove': !!remove,
    });
    const labelId = `woocommerce-tag__label-${instanceId}`;
    const labelTextNode = ((0, element_1.createElement)(element_1.Fragment, null,
        (0, element_1.createElement)("span", { className: "screen-reader-text" }, screenReaderLabel),
        (0, element_1.createElement)("span", { "aria-hidden": "true" }, label)));
    return ((0, element_1.createElement)("span", { className: classes },
        popoverContents ? ((0, element_1.createElement)(components_1.Button, { className: "woocommerce-tag__text", id: labelId, onClick: () => setIsVisible(true) }, labelTextNode)) : ((0, element_1.createElement)("span", { className: "woocommerce-tag__text", id: labelId }, labelTextNode)),
        popoverContents && isVisible && ((0, element_1.createElement)(components_1.Popover, { onClose: () => setIsVisible(false) }, popoverContents)),
        remove && ((0, element_1.createElement)(components_1.Button, { className: "woocommerce-tag__remove", onClick: remove(id), label: (0, i18n_1.sprintf)((0, i18n_1.__)('Remove %s', 'woocommerce'), label), "aria-describedby": labelId },
            (0, element_1.createElement)(icons_1.Icon, { icon: icons_1.cancelCircleFilled, size: 20, className: "clear-icon" })))));
};
Tag.propTypes = {
    /**
     * The ID for this item, used in the remove function.
     */
    id: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /**
     * The name for this item, displayed as the tag's text.
     */
    label: prop_types_1.default.string.isRequired,
    /**
     * Contents to display on click in a popover
     */
    popoverContents: prop_types_1.default.node,
    /**
     * A function called when the remove X is clicked. If not used, no X icon will display.
     */
    remove: prop_types_1.default.func,
    /**
     * A more descriptive label for screen reader users. Defaults to the `name` prop.
     */
    screenReaderLabel: prop_types_1.default.string,
};
exports.default = (0, compose_1.withInstanceId)(Tag);
