"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const classnames_1 = __importDefault(require("classnames"));
const element_1 = require("@wordpress/element");
const star_1 = __importDefault(require("gridicons/dist/star"));
const prop_types_1 = __importDefault(require("prop-types"));
/**
 * Use `Rating` to display a set of stars, filled, empty or half-filled, that represents a
 * rating in a scale between 0 and the prop `totalStars` (default 5).
 */
class Rating extends element_1.Component {
    stars(icon) {
        const { size, totalStars } = this.props;
        const starStyles = {
            width: size + 'px',
            height: size + 'px',
        };
        const stars = [];
        for (let i = 0; i < totalStars; i++) {
            const Icon = icon || star_1.default;
            stars.push((0, element_1.createElement)(Icon, { key: 'star-' + i, style: starStyles }));
        }
        return stars;
    }
    render() {
        const { rating, totalStars, className, icon, outlineIcon } = this.props;
        const classes = (0, classnames_1.default)('woocommerce-rating', className);
        const perStar = 100 / totalStars;
        const outlineStyles = {
            width: Math.round(perStar * rating) + '%',
        };
        const label = (0, i18n_1.sprintf)((0, i18n_1.__)('%1$s out of %2$s stars.', 'woocommerce'), rating, totalStars);
        return ((0, element_1.createElement)("div", { className: classes, "aria-label": label },
            this.stars(icon),
            (0, element_1.createElement)("div", { className: "woocommerce-rating__star-outline", style: outlineStyles }, this.stars(outlineIcon || icon))));
    }
}
Rating.propTypes = {
    /**
     * Number of stars that should be filled. You can pass a partial number of stars like `2.5`.
     */
    rating: prop_types_1.default.number,
    /**
     * The total number of stars the rating is out of.
     */
    totalStars: prop_types_1.default.number,
    /**
     * The size in pixels the stars should be rendered at.
     */
    size: prop_types_1.default.number,
    /**
     * Additional CSS classes.
     */
    className: prop_types_1.default.string,
    /**
     * Icon used, defaults to StarIcon
     */
    icon: prop_types_1.default.elementType,
    /**
     * Outline icon used, the not selected rating. Defaults to props.icon or StarIcon
     */
    outlineIcon: prop_types_1.default.elementType,
};
Rating.defaultProps = {
    rating: 0,
    totalStars: 5,
    size: 18,
};
exports.default = Rating;
