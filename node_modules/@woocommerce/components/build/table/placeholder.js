"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const element_1 = require("@wordpress/element");
const lodash_1 = require("lodash");
const prop_types_1 = __importDefault(require("prop-types"));
/**
 * Internal dependencies
 */
const table_1 = __importDefault(require("./table"));
/**
 * `TablePlaceholder` behaves like `Table` but displays placeholder boxes instead of data. This can be used while loading.
 */
class TablePlaceholder extends element_1.Component {
    render() {
        const _a = this.props, { numberOfRows } = _a, tableProps = __rest(_a, ["numberOfRows"]);
        const rows = (0, lodash_1.range)(numberOfRows).map(() => this.props.headers.map(() => ({
            display: (0, element_1.createElement)("span", { className: "is-placeholder" }),
        })));
        return ((0, element_1.createElement)(table_1.default, Object.assign({ ariaHidden: true, classNames: "is-loading", rows: rows }, tableProps)));
    }
}
TablePlaceholder.propTypes = {
    /**
     *  An object of the query parameters passed to the page, ex `{ page: 2, per_page: 5 }`.
     */
    query: prop_types_1.default.object,
    /**
     * A label for the content in this table.
     */
    caption: prop_types_1.default.string.isRequired,
    /**
     * An array of column headers (see `Table` props).
     */
    headers: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        hiddenByDefault: prop_types_1.default.bool,
        defaultSort: prop_types_1.default.bool,
        isSortable: prop_types_1.default.bool,
        key: prop_types_1.default.string,
        label: prop_types_1.default.node,
        required: prop_types_1.default.bool,
    })),
    /**
     * An integer with the number of rows to display.
     */
    numberOfRows: prop_types_1.default.number,
};
TablePlaceholder.defaultProps = {
    numberOfRows: 5,
};
exports.default = TablePlaceholder;
