"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const classnames_1 = __importDefault(require("classnames"));
const components_1 = require("@wordpress/components");
const element_1 = require("@wordpress/element");
const lodash_1 = require("lodash");
const prop_types_1 = __importDefault(require("prop-types"));
/**
 * Internal dependencies
 */
const ellipsis_menu_1 = __importDefault(require("../ellipsis-menu"));
const menu_item_1 = __importDefault(require("../ellipsis-menu/menu-item"));
const menu_title_1 = __importDefault(require("../ellipsis-menu/menu-title"));
const pagination_1 = __importDefault(require("../pagination"));
const table_1 = __importDefault(require("./table"));
const placeholder_1 = __importDefault(require("./placeholder"));
const summary_1 = __importStar(require("./summary"));
/**
 * This is an accessible, sortable, and scrollable table for displaying tabular data (like revenue and other analytics data).
 * It accepts `headers` for column headers, and `rows` for the table content.
 * `rowHeader` can be used to define the index of the row header (or false if no header).
 *
 * `TableCard` serves as Card wrapper & contains a card header, `<Table />`, `<TableSummary />`, and `<Pagination />`.
 * This includes filtering and comparison functionality for report pages.
 */
class TableCard extends element_1.Component {
    constructor(props) {
        super(props);
        const showCols = this.getShowCols(props.headers);
        this.state = { showCols };
        this.onColumnToggle = this.onColumnToggle.bind(this);
        this.onPageChange = this.onPageChange.bind(this);
    }
    componentDidUpdate({ headers: prevHeaders, query: prevQuery }) {
        const { headers, onColumnsChange, query } = this.props;
        const { showCols } = this.state;
        if (!(0, lodash_1.isEqual)(headers, prevHeaders)) {
            /* eslint-disable react/no-did-update-set-state */
            this.setState({
                showCols: this.getShowCols(headers),
            });
            /* eslint-enable react/no-did-update-set-state */
        }
        if (query.orderby !== prevQuery.orderby &&
            !showCols.includes(query.orderby)) {
            const newShowCols = showCols.concat(query.orderby);
            /* eslint-disable react/no-did-update-set-state */
            this.setState({
                showCols: newShowCols,
            });
            /* eslint-enable react/no-did-update-set-state */
            onColumnsChange(newShowCols);
        }
    }
    getShowCols(headers) {
        return headers
            .map(({ key, visible }) => {
            if (typeof visible === 'undefined' || visible) {
                return key;
            }
            return false;
        })
            .filter(Boolean);
    }
    getVisibleHeaders() {
        const { headers } = this.props;
        const { showCols } = this.state;
        return headers.filter(({ key }) => showCols.includes(key));
    }
    getVisibleRows() {
        const { headers, rows } = this.props;
        const { showCols } = this.state;
        return rows.map((row) => {
            return headers
                .map(({ key }, i) => {
                return showCols.includes(key) && row[i];
            })
                .filter(Boolean);
        });
    }
    onColumnToggle(key) {
        const { headers, query, onQueryChange, onColumnsChange } = this.props;
        return () => {
            this.setState((prevState) => {
                const hasKey = prevState.showCols.includes(key);
                if (hasKey) {
                    // Handle hiding a sorted column
                    if (query.orderby === key) {
                        const defaultSort = (0, lodash_1.find)(headers, { defaultSort: true }) ||
                            (0, lodash_1.first)(headers) ||
                            {};
                        onQueryChange('sort')(defaultSort.key, 'desc');
                    }
                    const showCols = (0, lodash_1.without)(prevState.showCols, key);
                    onColumnsChange(showCols, key);
                    return { showCols };
                }
                const showCols = [...prevState.showCols, key];
                onColumnsChange(showCols, key);
                return { showCols };
            });
        };
    }
    onPageChange(...params) {
        const { onPageChange, onQueryChange } = this.props;
        if (onPageChange) {
            onPageChange(...params);
        }
        if (onQueryChange) {
            onQueryChange('paged')(...params);
        }
    }
    render() {
        const { actions, className, hasSearch, isLoading, onQueryChange, onSort, query, rowHeader, rowsPerPage, showMenu, summary, title, totalRows, rowKey, } = this.props;
        const { showCols } = this.state;
        const allHeaders = this.props.headers;
        const headers = this.getVisibleHeaders();
        const rows = this.getVisibleRows();
        const classes = (0, classnames_1.default)('woocommerce-table', className, {
            'has-actions': !!actions,
            'has-menu': showMenu,
            'has-search': hasSearch,
        });
        return ((0, element_1.createElement)(components_1.Card, { className: classes },
            (0, element_1.createElement)(components_1.CardHeader, null,
                (0, element_1.createElement)(components_1.__experimentalText, { size: 16, weight: 600, as: "h2", color: "#23282d" }, title),
                (0, element_1.createElement)("div", { className: "woocommerce-table__actions" }, actions),
                showMenu && ((0, element_1.createElement)(ellipsis_menu_1.default, { label: (0, i18n_1.__)('Choose which values to display', 'woocommerce'), renderContent: () => ((0, element_1.createElement)(element_1.Fragment, null,
                        (0, element_1.createElement)(menu_title_1.default, null, (0, i18n_1.__)('Columns:', 'woocommerce')),
                        allHeaders.map(({ key, label, required }) => {
                            if (required) {
                                return null;
                            }
                            return ((0, element_1.createElement)(menu_item_1.default, { checked: showCols.includes(key), isCheckbox: true, isClickable: true, key: key, onInvoke: this.onColumnToggle(key) }, label));
                        }))) }))),
            (0, element_1.createElement)(components_1.CardBody, { size: null }, isLoading ? ((0, element_1.createElement)(element_1.Fragment, null,
                (0, element_1.createElement)("span", { className: "screen-reader-text" }, (0, i18n_1.__)('Your requested data is loading', 'woocommerce')),
                (0, element_1.createElement)(placeholder_1.default, { numberOfRows: rowsPerPage, headers: headers, rowHeader: rowHeader, caption: title, query: query }))) : ((0, element_1.createElement)(table_1.default, { rows: rows, headers: headers, rowHeader: rowHeader, caption: title, query: query, onSort: onSort || onQueryChange('sort'), rowKey: rowKey }))),
            (0, element_1.createElement)(components_1.CardFooter, { justify: "center" }, isLoading ? ((0, element_1.createElement)(summary_1.TableSummaryPlaceholder, null)) : ((0, element_1.createElement)(element_1.Fragment, null,
                (0, element_1.createElement)(pagination_1.default, { key: parseInt(query.paged, 10) || 1, page: parseInt(query.paged, 10) || 1, perPage: rowsPerPage, total: totalRows, onPageChange: this.onPageChange, onPerPageChange: onQueryChange('per_page') }),
                summary && (0, element_1.createElement)(summary_1.default, { data: summary }))))));
    }
}
TableCard.propTypes = {
    /**
     * If a search is provided in actions and should reorder actions on mobile.
     */
    hasSearch: prop_types_1.default.bool,
    /**
     * An array of column headers (see `Table` props).
     */
    headers: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        hiddenByDefault: prop_types_1.default.bool,
        defaultSort: prop_types_1.default.bool,
        isSortable: prop_types_1.default.bool,
        key: prop_types_1.default.string,
        label: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.node]),
        required: prop_types_1.default.bool,
    })),
    /**
     * A list of IDs, matching to the row list so that ids[ 0 ] contains the object ID for the object displayed in row[ 0 ].
     */
    ids: prop_types_1.default.arrayOf(prop_types_1.default.number),
    /**
     * Defines if the table contents are loading.
     * It will display `TablePlaceholder` component instead of `Table` if that's the case.
     */
    isLoading: prop_types_1.default.bool,
    /**
     * A function which returns a callback function to update the query string for a given `param`.
     */
    onQueryChange: prop_types_1.default.func,
    /**
     * A function which returns a callback function which is called upon the user changing the visiblity of columns.
     */
    onColumnsChange: prop_types_1.default.func,
    /**
     * A function which is called upon the user changing the sorting of the table.
     */
    onSort: prop_types_1.default.func,
    /**
     *  An object of the query parameters passed to the page, ex `{ page: 2, per_page: 5 }`.
     */
    query: prop_types_1.default.object,
    /**
     * Which column should be the row header, defaults to the first item (`0`) (but could be set to `1`, if the first col
     * is checkboxes, for example). Set to false to disable row headers.
     */
    rowHeader: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.bool]),
    /**
     * An array of arrays of display/value object pairs (see `Table` props).
     */
    rows: prop_types_1.default.arrayOf(prop_types_1.default.arrayOf(prop_types_1.default.shape({
        display: prop_types_1.default.node,
        value: prop_types_1.default.oneOfType([
            prop_types_1.default.string,
            prop_types_1.default.number,
            prop_types_1.default.bool,
        ]),
    }))).isRequired,
    /**
     * The total number of rows to display per page.
     */
    rowsPerPage: prop_types_1.default.number.isRequired,
    /**
     * Boolean to determine whether or not ellipsis menu is shown.
     */
    showMenu: prop_types_1.default.bool,
    /**
     * An array of objects with `label` & `value` properties, which display in a line under the table.
     * Optional, can be left off to show no summary.
     */
    summary: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        label: prop_types_1.default.node,
        value: prop_types_1.default.oneOfType([
            prop_types_1.default.string,
            prop_types_1.default.number,
        ]),
    })),
    /**
     * The title used in the card header, also used as the caption for the content in this table.
     */
    title: prop_types_1.default.string.isRequired,
    /**
     * The total number of rows (across all pages).
     */
    totalRows: prop_types_1.default.number.isRequired,
    /**
     * The rowKey used for the key value on each row, this can be a string of the key or a function that returns the value.
     * This uses the index if not defined.
     */
    rowKey: prop_types_1.default.func,
};
TableCard.defaultProps = {
    isLoading: false,
    onQueryChange: () => () => { },
    onColumnsChange: () => { },
    onSort: undefined,
    query: {},
    rowHeader: 0,
    rows: [],
    showMenu: true,
};
exports.default = TableCard;
