"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTaxCode = exports.computeSuggestionMatch = void 0;
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const html_entities_1 = require("@wordpress/html-entities");
/**
 * Parse a string suggestion, split apart by where the first matching query is.
 * Used to display matched partial in bold.
 *
 * @param {string} suggestion The item's label as returned from the API.
 * @param {string} query      The search term to match in the string.
 * @return {Object} A list in three parts: before, match, and after.
 */
function computeSuggestionMatch(suggestion, query) {
    if (!query) {
        return null;
    }
    const indexOfMatch = suggestion
        .toLocaleLowerCase()
        .indexOf(query.toLocaleLowerCase());
    return {
        suggestionBeforeMatch: (0, html_entities_1.decodeEntities)(suggestion.substring(0, indexOfMatch)),
        suggestionMatch: (0, html_entities_1.decodeEntities)(suggestion.substring(indexOfMatch, indexOfMatch + query.length)),
        suggestionAfterMatch: (0, html_entities_1.decodeEntities)(suggestion.substring(indexOfMatch + query.length)),
    };
}
exports.computeSuggestionMatch = computeSuggestionMatch;
function getTaxCode(tax) {
    return [
        tax.country,
        tax.state,
        tax.name || (0, i18n_1.__)('TAX', 'woocommerce'),
        tax.priority,
    ]
        .filter(Boolean)
        .map((item) => item.toString().toUpperCase().trim())
        .join('-');
}
exports.getTaxCode = getTaxCode;
