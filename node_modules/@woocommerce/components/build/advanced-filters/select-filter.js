"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const element_1 = require("@wordpress/element");
const components_1 = require("@wordpress/components");
const lodash_1 = require("lodash");
const prop_types_1 = __importDefault(require("prop-types"));
const interpolate_components_1 = __importDefault(require("@automattic/interpolate-components"));
const classnames_1 = __importDefault(require("classnames"));
const navigation_1 = require("@woocommerce/navigation");
/**
 * Internal dependencies
 */
const utils_1 = require("./utils");
class SelectFilter extends element_1.Component {
    constructor({ filter, config, onFilterChange }) {
        super(...arguments);
        const options = config.input.options;
        this.state = { options };
        this.updateOptions = this.updateOptions.bind(this);
        if (!options && config.input.getOptions) {
            config.input
                .getOptions()
                .then(this.updateOptions)
                .then((returnedOptions) => {
                if (!filter.value) {
                    const value = (0, navigation_1.getDefaultOptionValue)(config, returnedOptions);
                    onFilterChange({ property: 'value', value });
                }
            });
        }
    }
    updateOptions(options) {
        this.setState({ options });
        return options;
    }
    getScreenReaderText(filter, config) {
        if (filter.value === '') {
            return '';
        }
        const rule = (0, lodash_1.find)(config.rules, { value: filter.rule }) || {};
        const value = (0, lodash_1.find)(config.input.options, { value: filter.value }) || {};
        return (0, utils_1.textContent)((0, interpolate_components_1.default)({
            mixedString: config.labels.title,
            components: {
                filter: (0, element_1.createElement)(element_1.Fragment, null, value.label),
                rule: (0, element_1.createElement)(element_1.Fragment, null, rule.label),
                title: (0, element_1.createElement)(element_1.Fragment, null),
            },
        }));
    }
    render() {
        const { className, config, filter, onFilterChange, isEnglish } = this.props;
        const { options } = this.state;
        const { rule, value } = filter;
        const { labels, rules } = config;
        const children = (0, interpolate_components_1.default)({
            mixedString: labels.title,
            components: {
                title: (0, element_1.createElement)("span", { className: className }),
                rule: ((0, element_1.createElement)(components_1.SelectControl, { className: (0, classnames_1.default)(className, 'woocommerce-filters-advanced__rule'), options: rules, value: rule, onChange: (selectedValue) => onFilterChange({
                        property: 'rule',
                        value: selectedValue,
                    }), "aria-label": labels.rule })),
                filter: options ? ((0, element_1.createElement)(components_1.SelectControl, { className: (0, classnames_1.default)(className, 'woocommerce-filters-advanced__input'), options: options, value: value, onChange: (selectedValue) => onFilterChange({
                        property: 'value',
                        value: selectedValue,
                    }), "aria-label": labels.filter })) : ((0, element_1.createElement)(components_1.Spinner, null)),
            },
        });
        const screenReaderText = this.getScreenReaderText(filter, config);
        /*eslint-disable jsx-a11y/no-noninteractive-tabindex*/
        return ((0, element_1.createElement)("fieldset", { className: "woocommerce-filters-advanced__line-item", tabIndex: "0" },
            (0, element_1.createElement)("legend", { className: "screen-reader-text" }, labels.add || ''),
            (0, element_1.createElement)("div", { className: (0, classnames_1.default)('woocommerce-filters-advanced__fieldset', {
                    'is-english': isEnglish,
                }) }, children),
            screenReaderText && ((0, element_1.createElement)("span", { className: "screen-reader-text" }, screenReaderText))));
        /*eslint-enable jsx-a11y/no-noninteractive-tabindex*/
    }
}
SelectFilter.propTypes = {
    /**
     * The configuration object for the single filter to be rendered.
     */
    config: prop_types_1.default.shape({
        labels: prop_types_1.default.shape({
            rule: prop_types_1.default.string,
            title: prop_types_1.default.string,
            filter: prop_types_1.default.string,
        }),
        rules: prop_types_1.default.arrayOf(prop_types_1.default.object),
        input: prop_types_1.default.object,
    }).isRequired,
    /**
     * The activeFilter handed down by AdvancedFilters.
     */
    filter: prop_types_1.default.shape({
        key: prop_types_1.default.string,
        rule: prop_types_1.default.string,
        value: prop_types_1.default.string,
    }).isRequired,
    /**
     * Function to be called on update.
     */
    onFilterChange: prop_types_1.default.func.isRequired,
};
exports.default = SelectFilter;
