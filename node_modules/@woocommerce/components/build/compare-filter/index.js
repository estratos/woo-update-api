"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompareFilter = exports.CompareButton = void 0;
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const element_1 = require("@wordpress/element");
const components_1 = require("@wordpress/components");
const lodash_1 = require("lodash");
const prop_types_1 = __importDefault(require("prop-types"));
const navigation_1 = require("@woocommerce/navigation");
/**
 * Internal dependencies
 */
const button_1 = __importDefault(require("./button"));
const search_1 = __importDefault(require("../search"));
const experimental_1 = require("../experimental");
var button_2 = require("./button");
Object.defineProperty(exports, "CompareButton", { enumerable: true, get: function () { return __importDefault(button_2).default; } });
/**
 * Displays a card + search used to filter results as a comparison between objects.
 */
class CompareFilter extends element_1.Component {
    constructor({ getLabels, param, query }) {
        super(...arguments);
        this.state = {
            selected: [],
        };
        this.clearQuery = this.clearQuery.bind(this);
        this.updateQuery = this.updateQuery.bind(this);
        this.updateLabels = this.updateLabels.bind(this);
        this.onButtonClicked = this.onButtonClicked.bind(this);
        if (query[param]) {
            getLabels(query[param], query).then(this.updateLabels);
        }
    }
    componentDidUpdate({ param: prevParam, query: prevQuery }, { selected: prevSelected }) {
        const { getLabels, param, query } = this.props;
        const { selected } = this.state;
        if (prevParam !== param ||
            (prevSelected.length > 0 && selected.length === 0)) {
            this.clearQuery();
            return;
        }
        const prevIds = (0, navigation_1.getIdsFromQuery)(prevQuery[param]);
        const currentIds = (0, navigation_1.getIdsFromQuery)(query[param]);
        if (!(0, lodash_1.isEqual)(prevIds.sort(), currentIds.sort())) {
            getLabels(query[param], query).then(this.updateLabels);
        }
    }
    clearQuery() {
        const { param, path, query } = this.props;
        this.setState({
            selected: [],
        });
        (0, navigation_1.updateQueryString)({ [param]: undefined }, path, query);
    }
    updateLabels(selected) {
        this.setState({ selected });
    }
    updateQuery() {
        const { param, path, query } = this.props;
        const { selected } = this.state;
        const idList = selected.map((p) => p.key);
        (0, navigation_1.updateQueryString)({ [param]: idList.join(',') }, path, query);
    }
    onButtonClicked(e) {
        this.updateQuery(e);
        if ((0, lodash_1.isFunction)(this.props.onClick)) {
            this.props.onClick(e);
        }
    }
    render() {
        const { labels, type, autocompleter } = this.props;
        const { selected } = this.state;
        return ((0, element_1.createElement)(components_1.Card, { className: "woocommerce-filters__compare" },
            (0, element_1.createElement)(components_1.CardHeader, null,
                (0, element_1.createElement)(experimental_1.Text, { variant: "subtitle.small", weight: "600", size: "14", lineHeight: "20px" }, labels.title)),
            (0, element_1.createElement)(components_1.CardBody, null,
                (0, element_1.createElement)(search_1.default, { autocompleter: autocompleter, type: type, selected: selected, placeholder: labels.placeholder, onChange: (value) => {
                        this.setState({ selected: value });
                    } })),
            (0, element_1.createElement)(components_1.CardFooter, { justify: "flex-start" },
                (0, element_1.createElement)(button_1.default, { count: selected.length, helpText: labels.helpText, onClick: this.onButtonClicked }, labels.update),
                selected.length > 0 && ((0, element_1.createElement)(components_1.Button, { isLink: true, onClick: this.clearQuery }, (0, i18n_1.__)('Clear all', 'woocommerce'))))));
    }
}
exports.CompareFilter = CompareFilter;
CompareFilter.propTypes = {
    /**
     * Function used to fetch object labels via an API request, returns a Promise.
     */
    getLabels: prop_types_1.default.func.isRequired,
    /**
     * Object of localized labels.
     */
    labels: prop_types_1.default.shape({
        /**
         * Label for the search placeholder.
         */
        placeholder: prop_types_1.default.string,
        /**
         * Label for the card title.
         */
        title: prop_types_1.default.string,
        /**
         * Label for button which updates the URL/report.
         */
        update: prop_types_1.default.string,
    }),
    /**
     * The parameter to use in the querystring.
     */
    param: prop_types_1.default.string.isRequired,
    /**
     * The `path` parameter supplied by React-Router
     */
    path: prop_types_1.default.string.isRequired,
    /**
     * The query string represented in object form
     */
    query: prop_types_1.default.object,
    /**
     * Which type of autocompleter should be used in the Search
     */
    type: prop_types_1.default.string.isRequired,
    /**
     * The custom autocompleter to be forwarded to the `Search` component.
     */
    autocompleter: prop_types_1.default.object,
};
CompareFilter.defaultProps = {
    labels: {},
    query: {},
};
