"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const components_1 = require("@wordpress/components");
const element_1 = require("@wordpress/element");
const keycodes_1 = require("@wordpress/keycodes");
const prop_types_1 = __importDefault(require("prop-types"));
/**
 * `MenuItem` is used to give the item an accessible wrapper, with the `menuitem` role and added keyboard functionality (`onInvoke`).
 * `MenuItem`s can also be deemed "clickable", though this is disabled by default because generally the inner component handles
 * the click event.
 */
class MenuItem extends element_1.Component {
    constructor() {
        super(...arguments);
        this.onClick = this.onClick.bind(this);
        this.onFocusFormToggle = this.onFocusFormToggle.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
        this.container = (0, element_1.createRef)();
    }
    onClick(event) {
        const { isClickable, onInvoke } = this.props;
        if (isClickable) {
            event.preventDefault();
            onInvoke();
        }
    }
    onKeyDown(event) {
        if (event.target.isSameNode(event.currentTarget)) {
            if (event.keyCode === keycodes_1.ENTER || event.keyCode === keycodes_1.SPACE) {
                event.preventDefault();
                this.props.onInvoke();
            }
            if (event.keyCode === keycodes_1.UP) {
                event.preventDefault();
            }
            if (event.keyCode === keycodes_1.DOWN) {
                event.preventDefault();
                const nextElementToFocus = event.target.nextSibling ||
                    event.target.parentNode.querySelector('.woocommerce-ellipsis-menu__item');
                nextElementToFocus.focus();
            }
        }
    }
    onFocusFormToggle() {
        this.container.current.focus();
    }
    render() {
        const { checked, children, isCheckbox } = this.props;
        if (isCheckbox) {
            return ((0, element_1.createElement)("div", { "aria-checked": checked, ref: this.container, role: "menuitemcheckbox", tabIndex: "0", onKeyDown: this.onKeyDown, onClick: this.onClick, className: "woocommerce-ellipsis-menu__item" },
                (0, element_1.createElement)(components_1.BaseControl, { className: "components-toggle-control" },
                    (0, element_1.createElement)(components_1.FormToggle, { "aria-hidden": "true", checked: checked, onChange: this.props.onInvoke, onFocus: this.onFocusFormToggle, onClick: (e) => e.stopPropagation(), tabIndex: "-1" }),
                    children)));
        }
        return ((0, element_1.createElement)("div", { role: "menuitem", tabIndex: "0", onKeyDown: this.onKeyDown, onClick: this.onClick, className: "woocommerce-ellipsis-menu__item" }, children));
    }
}
MenuItem.propTypes = {
    /**
     * Whether the menu item is checked or not. Only relevant for menu items with `isCheckbox`.
     */
    checked: prop_types_1.default.bool,
    /**
     * A renderable component (or string) which will be displayed as the content of this item. Generally a `ToggleControl`.
     */
    children: prop_types_1.default.node,
    /**
     * Whether the menu item is a checkbox (will render a FormToggle and use the `menuitemcheckbox` role).
     */
    isCheckbox: prop_types_1.default.bool,
    /**
     * Boolean to control whether the MenuItem should handle the click event. Defaults to false, assuming your child component
     * handles the click event.
     */
    isClickable: prop_types_1.default.bool,
    /**
     * A function called when this item is activated via keyboard ENTER or SPACE; or when the item is clicked
     * (only if `isClickable` is set).
     */
    onInvoke: prop_types_1.default.func.isRequired,
};
MenuItem.defaultProps = {
    isClickable: false,
    isCheckbox: false,
};
exports.default = MenuItem;
