"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const element_1 = require("@wordpress/element");
const classnames_1 = __importDefault(require("classnames"));
const components_1 = require("@wordpress/components");
const icons_1 = require("@wordpress/icons");
const ellipsis_1 = __importDefault(require("gridicons/dist/ellipsis"));
const prop_types_1 = __importDefault(require("prop-types"));
/**
 * This is a dropdown menu hidden behind a vertical ellipsis icon. When clicked, the inner MenuItems are displayed.
 */
class EllipsisMenu extends element_1.Component {
    render() {
        const { label, renderContent, className } = this.props;
        if (!renderContent) {
            return null;
        }
        const renderEllipsis = ({ onToggle, isOpen }) => {
            const toggleClassname = (0, classnames_1.default)('woocommerce-ellipsis-menu__toggle', {
                'is-opened': isOpen,
            });
            return ((0, element_1.createElement)(components_1.Button, { className: toggleClassname, onClick: (e) => {
                    if (this.props.onToggle) {
                        this.props.onToggle(e);
                    }
                    onToggle(e);
                }, title: label, "aria-expanded": isOpen },
                (0, element_1.createElement)(icons_1.Icon, { icon: (0, element_1.createElement)(ellipsis_1.default, null) })));
        };
        const renderMenu = (renderContentArgs) => ((0, element_1.createElement)(components_1.NavigableMenu, { className: "woocommerce-ellipsis-menu__content" }, renderContent(renderContentArgs)));
        return ((0, element_1.createElement)("div", { className: (0, classnames_1.default)(className, 'woocommerce-ellipsis-menu') },
            (0, element_1.createElement)(components_1.Dropdown, { contentClassName: "woocommerce-ellipsis-menu__popover", position: "bottom left", renderToggle: renderEllipsis, renderContent: renderMenu })));
    }
}
EllipsisMenu.propTypes = {
    /**
     * The label shown when hovering/focusing on the icon button.
     */
    label: prop_types_1.default.string.isRequired,
    /**
     * A function returning `MenuTitle`/`MenuItem` components as a render prop. Arguments from Dropdown passed as function arguments.
     */
    renderContent: prop_types_1.default.func,
    /**
     * Classname to add to ellipsis menu.
     */
    className: prop_types_1.default.string,
    /**
     * Callback function when dropdown button is clicked, it provides the click event.
     */
    onToggle: prop_types_1.default.func,
};
exports.default = EllipsisMenu;
