"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupByOptions = exports.orderByOptions = void 0;
/**
 * External dependencies
 */
const classnames_1 = __importDefault(require("classnames"));
const prop_types_1 = __importDefault(require("prop-types"));
const i18n_1 = require("@wordpress/i18n");
const date_1 = require("@wordpress/date");
const element_1 = require("@wordpress/element");
/**
 * Internal dependencies
 */
const timeline_group_1 = __importDefault(require("./timeline-group"));
const util_1 = require("./util");
const Timeline = (props) => {
    const { className, items, groupBy, orderBy, dateFormat, clockFormat } = props;
    const timelineClassName = (0, classnames_1.default)('woocommerce-timeline', className);
    // Early return in case no data was passed to the component.
    if (!items || items.length === 0) {
        return ((0, element_1.createElement)("div", { className: timelineClassName },
            (0, element_1.createElement)("p", { className: 'timeline_no_events' }, (0, i18n_1.__)('No data to display', 'woocommerce'))));
    }
    const addGroupTitles = (group) => {
        return Object.assign(Object.assign({}, group), { title: (0, date_1.format)(dateFormat, group.date) });
    };
    return ((0, element_1.createElement)("div", { className: timelineClassName },
        (0, element_1.createElement)("ul", null, items
            .reduce((0, util_1.groupItemsUsing)(groupBy), [])
            .map(addGroupTitles)
            .sort((0, util_1.sortByDateUsing)(orderBy))
            .map((group) => ((0, element_1.createElement)(timeline_group_1.default, { key: group.date.getTime().toString(), group: group, orderBy: orderBy, clockFormat: clockFormat }))))));
};
Timeline.propTypes = {
    /**
     * Additional CSS classes.
     */
    className: prop_types_1.default.string,
    /**
     * An array of list items.
     */
    items: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        /**
         * Date for the timeline item.
         */
        date: prop_types_1.default.instanceOf(Date).isRequired,
        /**
         * Icon for the Timeline item.
         */
        icon: prop_types_1.default.element.isRequired,
        /**
         * Headline displayed for the list item.
         */
        headline: prop_types_1.default.oneOfType([
            prop_types_1.default.element,
            prop_types_1.default.string,
        ]).isRequired,
        /**
         * Body displayed for the list item.
         */
        body: prop_types_1.default.arrayOf(prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.string])),
        /**
         * Allows users to toggle the timestamp on or off.
         */
        hideTimestamp: prop_types_1.default.bool,
    })).isRequired,
    /**
     * Defines how items should be grouped together.
     */
    groupBy: prop_types_1.default.oneOf(['day', 'week', 'month']),
    /**
     * Defines how groups should be ordered.
     */
    orderBy: prop_types_1.default.oneOf(['asc', 'desc']),
    /**
     * The PHP date format string used to format dates, see php.net/date.
     */
    dateFormat: prop_types_1.default.string,
    /**
     * The PHP clock format string used to format times, see php.net/date.
     */
    clockFormat: prop_types_1.default.string,
};
Timeline.defaultProps = {
    className: '',
    items: [],
    groupBy: 'day',
    orderBy: 'desc',
    /* translators: PHP date format string used to display dates, see php.net/date. */
    dateFormat: (0, i18n_1.__)('F j, Y', 'woocommerce'),
    /* translators: PHP clock format string used to display times, see php.net/date. */
    clockFormat: (0, i18n_1.__)('g:ia', 'woocommerce'),
};
var util_2 = require("./util");
Object.defineProperty(exports, "orderByOptions", { enumerable: true, get: function () { return util_2.orderByOptions; } });
Object.defineProperty(exports, "groupByOptions", { enumerable: true, get: function () { return util_2.groupByOptions; } });
exports.default = Timeline;
