"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const classnames_1 = __importDefault(require("classnames"));
const element_1 = require("@wordpress/element");
const compose_1 = require("@wordpress/compose");
const prop_types_1 = __importDefault(require("prop-types"));
/**
 * Internal dependencies
 */
const index_1 = require("./utils/index");
const color_1 = require("./utils/color");
const constants_1 = require("../constants");
/**
 * A legend specifically designed for the WooCommerce admin charts.
 */
class D3Legend extends element_1.Component {
    constructor() {
        super();
        this.listRef = (0, element_1.createRef)();
        this.state = {
            isScrollable: false,
        };
    }
    componentDidMount() {
        this.updateListScroll();
        window.addEventListener('resize', this.updateListScroll);
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.updateListScroll);
    }
    updateListScroll() {
        if (!this || !this.listRef) {
            return;
        }
        const list = this.listRef.current;
        const scrolledToEnd = list.scrollHeight - list.scrollTop <= list.offsetHeight;
        this.setState({
            isScrollable: !scrolledToEnd,
        });
    }
    render() {
        const { colorScheme, data, handleLegendHover, handleLegendToggle, interactive, legendDirection, legendValueFormat, instanceId, totalLabel, } = this.props;
        const { isScrollable } = this.state;
        const visibleData = data.filter((key) => key.visible);
        const numberOfRowsVisible = visibleData.length;
        const showTotalLabel = legendDirection === 'column' &&
            data.length > constants_1.selectionLimit &&
            totalLabel;
        const keys = data.length > constants_1.selectionLimit ? visibleData : data;
        return ((0, element_1.createElement)("div", { className: (0, classnames_1.default)('woocommerce-legend', `woocommerce-legend__direction-${legendDirection}`, {
                'has-total': showTotalLabel,
                'is-scrollable': isScrollable,
            }, this.props.className) },
            (0, element_1.createElement)("ul", { className: "woocommerce-legend__list", ref: this.listRef, onScroll: showTotalLabel ? this.updateListScroll : null }, data.map((row) => ((0, element_1.createElement)("li", { className: (0, classnames_1.default)('woocommerce-legend__item', {
                    'woocommerce-legend__item-checked': row.visible,
                }), key: row.key, id: `woocommerce-legend-${instanceId}__item__${row.key}`, onMouseEnter: handleLegendHover, onMouseLeave: handleLegendHover, onBlur: handleLegendHover, onFocus: handleLegendHover },
                (0, element_1.createElement)("button", { role: "checkbox", "aria-checked": row.visible ? 'true' : 'false', onClick: handleLegendToggle, id: `woocommerce-legend-${instanceId}__item-button__${row.key}`, disabled: (row.visible &&
                        numberOfRowsVisible <= 1) ||
                        (!row.visible &&
                            numberOfRowsVisible >=
                                constants_1.selectionLimit) ||
                        !interactive, title: numberOfRowsVisible >= constants_1.selectionLimit
                        ? (0, i18n_1.sprintf)((0, i18n_1.__)('You may select up to %d items.', 'woocommerce'), constants_1.selectionLimit)
                        : '' },
                    (0, element_1.createElement)("div", { className: "woocommerce-legend__item-container" },
                        (0, element_1.createElement)("span", { className: (0, classnames_1.default)('woocommerce-legend__item-checkmark', {
                                'woocommerce-legend__item-checkmark-checked': row.visible,
                            }), style: row.visible
                                ? {
                                    color: (0, color_1.getColor)(keys, colorScheme)(row.key),
                                }
                                : null }),
                        (0, element_1.createElement)("span", { className: "woocommerce-legend__item-title" }, row.label),
                        (0, element_1.createElement)("span", { className: "woocommerce-legend__item-total" }, (0, index_1.getFormatter)(legendValueFormat)(row.total)))))))),
            showTotalLabel && ((0, element_1.createElement)("div", { className: "woocommerce-legend__total" }, totalLabel))));
    }
}
D3Legend.propTypes = {
    /**
     * Additional CSS classes.
     */
    className: prop_types_1.default.string,
    /**
     * A chromatic color function to be passed down to d3.
     */
    colorScheme: prop_types_1.default.func,
    /**
     * An array of `orderedKeys`.
     */
    data: prop_types_1.default.array.isRequired,
    /**
     * Handles `onClick` event.
     */
    handleLegendToggle: prop_types_1.default.func,
    /**
     * Handles `onMouseEnter`/`onMouseLeave` events.
     */
    handleLegendHover: prop_types_1.default.func,
    /**
     * Determines whether or not you can click on the legend
     */
    interactive: prop_types_1.default.bool,
    /**
     * Display legend items as a `row` or `column` inside a flex-box.
     */
    legendDirection: prop_types_1.default.oneOf(['row', 'column']),
    /**
     * A number formatting string or function to format the value displayed in the legend.
     */
    legendValueFormat: prop_types_1.default.oneOfType([
        prop_types_1.default.string,
        prop_types_1.default.func,
    ]),
    /**
     * Label to describe the legend items. It will be displayed in the legend of
     * comparison charts when there are many.
     */
    totalLabel: prop_types_1.default.string,
    // from withInstanceId
    instanceId: prop_types_1.default.number,
};
D3Legend.defaultProps = {
    interactive: true,
    legendDirection: 'row',
    legendValueFormat: ',',
};
exports.default = (0, compose_1.withInstanceId)(D3Legend);
