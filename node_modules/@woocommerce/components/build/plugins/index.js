"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugins = void 0;
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const components_1 = require("@wordpress/components");
const element_1 = require("@wordpress/element");
const compose_1 = require("@wordpress/compose");
const prop_types_1 = __importDefault(require("prop-types"));
const data_1 = require("@wordpress/data");
const data_2 = require("@woocommerce/data");
class Plugins extends element_1.Component {
    constructor() {
        super(...arguments);
        this.state = {
            hasErrors: false,
        };
        this.installAndActivate = this.installAndActivate.bind(this);
        this.skipInstaller = this.skipInstaller.bind(this);
        this.handleErrors = this.handleErrors.bind(this);
        this.handleSuccess = this.handleSuccess.bind(this);
    }
    componentDidMount() {
        const { autoInstall } = this.props;
        if (autoInstall) {
            this.installAndActivate();
        }
    }
    installAndActivate(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (event) {
                event.preventDefault();
            }
            const { installAndActivatePlugins, isRequesting, pluginSlugs } = this.props;
            // Avoid double activating.
            if (isRequesting) {
                return false;
            }
            installAndActivatePlugins(pluginSlugs)
                .then((response) => {
                this.handleSuccess(response.data.activated, response);
            })
                .catch((response) => {
                this.handleErrors(response.errors, response);
            });
        });
    }
    handleErrors(errors, response) {
        const { onError } = this.props;
        this.setState({ hasErrors: true });
        onError(errors, response);
    }
    handleSuccess(activePlugins, response) {
        const { onComplete } = this.props;
        onComplete(activePlugins, response);
    }
    skipInstaller() {
        if (this.props.onSkip) {
            this.props.onSkip();
        }
    }
    render() {
        const { isRequesting, skipText, autoInstall, pluginSlugs, onSkip, onAbort, abortText, } = this.props;
        const { hasErrors } = this.state;
        if (hasErrors) {
            return ((0, element_1.createElement)(element_1.Fragment, null,
                (0, element_1.createElement)(components_1.Button, { isPrimary: true, isBusy: isRequesting, onClick: this.installAndActivate }, (0, i18n_1.__)('Retry', 'woocommerce')),
                onSkip && ((0, element_1.createElement)(components_1.Button, { onClick: this.skipInstaller }, (0, i18n_1.__)('Continue without installing', 'woocommerce')))));
        }
        if (autoInstall) {
            return null;
        }
        if (pluginSlugs.length === 0) {
            return ((0, element_1.createElement)(element_1.Fragment, null,
                (0, element_1.createElement)(components_1.Button, { isPrimary: true, isBusy: isRequesting, onClick: this.skipInstaller }, (0, i18n_1.__)('Continue', 'woocommerce'))));
        }
        return ((0, element_1.createElement)(element_1.Fragment, null,
            (0, element_1.createElement)(components_1.Button, { isBusy: isRequesting, isPrimary: true, onClick: this.installAndActivate }, (0, i18n_1.__)('Install & enable', 'woocommerce')),
            onSkip && ((0, element_1.createElement)(components_1.Button, { isTertiary: true, onClick: this.skipInstaller }, skipText || (0, i18n_1.__)('No thanks', 'woocommerce'))),
            onAbort && ((0, element_1.createElement)(components_1.Button, { isTertiary: true, onClick: onAbort }, abortText || (0, i18n_1.__)('Abort', 'woocommerce')))));
    }
}
exports.Plugins = Plugins;
Plugins.propTypes = {
    /**
     * Called when the plugin installer is successfully completed.
     */
    onComplete: prop_types_1.default.func.isRequired,
    /**
     * Called when the plugin installer completes with an error.
     */
    onError: prop_types_1.default.func,
    /**
     * Called when the plugin installer is skipped.
     */
    onSkip: prop_types_1.default.func,
    /**
     * Text used for the skip installer button.
     */
    skipText: prop_types_1.default.string,
    /**
     * If installation should happen automatically, or require user confirmation.
     */
    autoInstall: prop_types_1.default.bool,
    /**
     * An array of plugin slugs to install.
     */
    pluginSlugs: prop_types_1.default.arrayOf(prop_types_1.default.string),
    /**
     * Called when the plugin connection is aborted.
     */
    onAbort: prop_types_1.default.func,
    /**
     * Text used for the abort connection button.
     */
    abortText: prop_types_1.default.string,
};
Plugins.defaultProps = {
    autoInstall: false,
    onError: () => { },
    pluginSlugs: ['jetpack', 'woocommerce-services'],
};
exports.default = (0, compose_1.compose)((0, data_1.withSelect)((select) => {
    const { getActivePlugins, getInstalledPlugins, isPluginsRequesting } = select(data_2.PLUGINS_STORE_NAME);
    const isRequesting = isPluginsRequesting('activatePlugins') ||
        isPluginsRequesting('installPlugins');
    return {
        isRequesting,
        activePlugins: getActivePlugins(),
        installedPlugins: getInstalledPlugins(),
    };
}), (0, data_1.withDispatch)((dispatch) => {
    const { installAndActivatePlugins } = dispatch(data_2.PLUGINS_STORE_NAME);
    return {
        installAndActivatePlugins,
    };
}))(Plugins);
