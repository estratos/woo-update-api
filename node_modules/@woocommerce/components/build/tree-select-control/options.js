"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const lodash_1 = require("lodash");
const components_1 = require("@wordpress/components");
const icons_1 = require("@wordpress/icons");
const classnames_1 = __importDefault(require("classnames"));
const element_1 = require("@wordpress/element");
/**
 * Internal dependencies
 */
const constants_1 = require("./constants");
const checkbox_1 = __importDefault(require("./checkbox"));
/**
 * @typedef {import('./index').InnerOption} InnerOption
 */
/**
 * This component renders a list of options and its children recursively
 *
 * @param {Object}                        props                    Component parameters
 * @param {InnerOption[]}                 props.options            List of options to be rendered
 * @param {Function}                      props.onChange           Callback when an option changes
 * @param {Function}                      [props.onExpanderClick]  Callback when an expander is clicked.
 * @param {(option: InnerOption) => void} [props.onToggleExpanded] Callback when requesting an expander to be toggled.
 */
const Options = ({ options = [], onChange = () => { }, onExpanderClick = lodash_1.noop, onToggleExpanded = lodash_1.noop, }) => {
    /**
     * Alters the node with some keys for accessibility
     * ArrowRight - Expands the node
     * ArrowLeft - Collapses the node
     *
     * @param {Event}       event  The KeyDown event
     * @param {InnerOption} option The option where the event happened
     */
    const handleKeyDown = (event, option) => {
        if (!option.hasChildren) {
            return;
        }
        if (event.key === constants_1.ARROW_RIGHT && !option.expanded) {
            onToggleExpanded(option);
        }
        else if (event.key === constants_1.ARROW_LEFT && option.expanded) {
            onToggleExpanded(option);
        }
    };
    return options.map((option) => {
        var _a;
        const isRoot = option.value === constants_1.ROOT_VALUE;
        const { hasChildren, checked, partialChecked, expanded } = option;
        if (!(option === null || option === void 0 ? void 0 : option.value))
            return null;
        return ((0, element_1.createElement)("div", { key: `${(_a = option.key) !== null && _a !== void 0 ? _a : option.value}`, role: hasChildren ? 'treegroup' : 'treeitem', "aria-expanded": hasChildren ? expanded : undefined, className: (0, classnames_1.default)('woocommerce-tree-select-control__node', hasChildren && 'has-children') },
            (0, element_1.createElement)(components_1.Flex, { justify: "flex-start" },
                !isRoot && ((0, element_1.createElement)("button", { className: (0, classnames_1.default)('woocommerce-tree-select-control__expander', !hasChildren && 'is-hidden'), tabIndex: "-1", onClick: (e) => {
                        onExpanderClick(e);
                        onToggleExpanded(option);
                    } },
                    (0, element_1.createElement)(icons_1.Icon, { icon: expanded ? icons_1.chevronUp : icons_1.chevronDown }))),
                (0, element_1.createElement)(checkbox_1.default, { className: (0, classnames_1.default)('components-base-control', 'woocommerce-tree-select-control__option', partialChecked && 'is-partially-checked'), option: option, checked: checked, onChange: (e) => {
                        onChange(e.target.checked, option);
                    }, onKeyDown: (e) => {
                        handleKeyDown(e, option);
                    } })),
            hasChildren && expanded && ((0, element_1.createElement)("div", { className: (0, classnames_1.default)('woocommerce-tree-select-control__children', isRoot && 'woocommerce-tree-select-control__main') },
                (0, element_1.createElement)(Options, { options: option.children, onChange: onChange, onExpanderClick: onExpanderClick, onToggleExpanded: onToggleExpanded })))));
    });
};
exports.default = Options;
