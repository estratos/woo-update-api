"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const prop_types_1 = __importDefault(require("prop-types"));
const lodash_1 = require("lodash");
const element_1 = require("@wordpress/element");
const navigation_1 = require("@woocommerce/navigation");
/**
 * Use `Link` to create a link to another resource. It accepts a type to automatically
 * create wp-admin links, wc-admin links, and external links.
 */
function Link(_a) {
    var { children, href, type } = _a, props = __rest(_a, ["children", "href", "type"]);
    // @todo Investigate further if we can use <Link /> directly.
    // With React Router 5+, <RouterLink /> cannot be used outside of the main <Router /> elements,
    // which seems to include components imported from @woocommerce/components. For now, we can use the history object directly.
    const wcAdminLinkHandler = (onClick, event) => {
        // If cmd, ctrl, alt, or shift are used, use default behavior to allow opening in a new tab.
        if (event.ctrlKey ||
            event.metaKey ||
            event.altKey ||
            event.shiftKey) {
            return;
        }
        event.preventDefault();
        // If there is an onclick event, execute it.
        const onClickResult = onClick ? onClick(event) : true;
        // Mimic browser behavior and only continue if onClickResult is not explicitly false.
        if (onClickResult === false) {
            return;
        }
        (0, navigation_1.getHistory)().push(event.target.closest('a').getAttribute('href'));
    };
    const passProps = Object.assign(Object.assign({}, props), { 'data-link-type': type });
    if (type === 'wc-admin') {
        passProps.onClick = (0, lodash_1.partial)(wcAdminLinkHandler, passProps.onClick);
    }
    return ((0, element_1.createElement)("a", Object.assign({ href: href }, passProps), children));
}
Link.propTypes = {
    /**
     * The resource to link to.
     */
    href: prop_types_1.default.string.isRequired,
    /**
     * Type of link. For wp-admin and wc-admin, the correct prefix is appended.
     */
    type: prop_types_1.default.oneOf(['wp-admin', 'wc-admin', 'external']).isRequired,
};
Link.defaultProps = {
    type: 'wc-admin',
};
Link.contextTypes = {
    router: prop_types_1.default.object,
};
exports.default = Link;
