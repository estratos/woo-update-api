"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const element_1 = require("@wordpress/element");
const lodash_1 = require("lodash");
const prop_types_1 = __importDefault(require("prop-types"));
const navigation_1 = require("@woocommerce/navigation");
const date_1 = require("@woocommerce/date");
const currency_1 = __importDefault(require("@woocommerce/currency"));
/**
 * Internal dependencies
 */
const advanced_filters_1 = __importDefault(require("../advanced-filters"));
const compare_filter_1 = require("../compare-filter");
const date_range_filter_picker_1 = __importDefault(require("../date-range-filter-picker"));
const filter_picker_1 = __importDefault(require("../filter-picker"));
const section_1 = require("../section");
/**
 * Add a collection of report filters to a page. This uses `DatePicker` & `FilterPicker` for the "basic" filters, and `AdvancedFilters`
 * or a comparison card if "advanced" or "compare" are picked from `FilterPicker`.
 *
 * @return {Object} -
 */
class ReportFilters extends element_1.Component {
    constructor() {
        super();
        this.renderCard = this.renderCard.bind(this);
        this.onRangeSelect = this.onRangeSelect.bind(this);
    }
    renderCard(config) {
        const { siteLocale, advancedFilters, query, path, onAdvancedFilterAction, currency, } = this.props;
        const { filters, param } = config;
        if (!query[param]) {
            return null;
        }
        if (query[param].indexOf('compare') === 0) {
            const filter = (0, lodash_1.find)(filters, { value: query[param] });
            if (!filter) {
                return null;
            }
            const { settings = {} } = filter;
            return ((0, element_1.createElement)("div", { key: param, className: "woocommerce-filters__advanced-filters" },
                (0, element_1.createElement)(compare_filter_1.CompareFilter, Object.assign({ path: path, query: query }, settings))));
        }
        if (query[param] === 'advanced') {
            return ((0, element_1.createElement)("div", { key: param, className: "woocommerce-filters__advanced-filters" },
                (0, element_1.createElement)(advanced_filters_1.default, { siteLocale: siteLocale, currency: currency, config: advancedFilters, path: path, query: query, onAdvancedFilterAction: onAdvancedFilterAction })));
        }
    }
    onRangeSelect(data) {
        const { query, path, onDateSelect } = this.props;
        (0, navigation_1.updateQueryString)(data, path, query);
        onDateSelect(data);
    }
    getDateQuery(query) {
        const { period, compare, before, after } = (0, date_1.getDateParamsFromQuery)(query);
        const { primary: primaryDate, secondary: secondaryDate } = (0, date_1.getCurrentDates)(query);
        return {
            period,
            compare,
            before,
            after,
            primaryDate,
            secondaryDate,
        };
    }
    render() {
        const { dateQuery, filters, query, path, showDatePicker, onFilterSelect, isoDateFormat, advancedFilters, } = this.props;
        return ((0, element_1.createElement)(element_1.Fragment, null,
            (0, element_1.createElement)(section_1.H, { className: "screen-reader-text" }, (0, i18n_1.__)('Filters', 'woocommerce')),
            (0, element_1.createElement)(section_1.Section, { component: "div", className: "woocommerce-filters" },
                (0, element_1.createElement)("div", { className: "woocommerce-filters__basic-filters" },
                    showDatePicker && ((0, element_1.createElement)(date_range_filter_picker_1.default, { key: JSON.stringify(query), dateQuery: dateQuery || this.getDateQuery(query), onRangeSelect: this.onRangeSelect, isoDateFormat: isoDateFormat })),
                    filters.map((config) => {
                        if (config.showFilters(query)) {
                            return ((0, element_1.createElement)(filter_picker_1.default, { key: config.param, config: config, advancedFilters: advancedFilters, query: query, path: path, onFilterSelect: onFilterSelect }));
                        }
                        return null;
                    })),
                filters.map(this.renderCard))));
    }
}
ReportFilters.propTypes = {
    /**
     * The locale of the site (passed through to `AdvancedFilters`)
     */
    siteLocale: prop_types_1.default.string,
    /**
     * Config option passed through to `AdvancedFilters`
     */
    advancedFilters: prop_types_1.default.object,
    /**
     * Config option passed through to `FilterPicker` - if not used, `FilterPicker` is not displayed.
     */
    filters: prop_types_1.default.array,
    /**
     * The `path` parameter supplied by React-Router
     */
    path: prop_types_1.default.string.isRequired,
    /**
     * The query string represented in object form
     */
    query: prop_types_1.default.object,
    /**
     * Whether the date picker must be shown.
     */
    showDatePicker: prop_types_1.default.bool,
    /**
     * Function to be called after date selection.
     */
    onDateSelect: prop_types_1.default.func,
    /**
     * Function to be called after filter selection.
     */
    onFilterSelect: prop_types_1.default.func,
    /**
     * Function to be called after an advanced filter action has been taken.
     */
    onAdvancedFilterAction: prop_types_1.default.func,
    /**
     * The currency formatting instance for the site.
     */
    currency: prop_types_1.default.object,
    /**
     * The date query string represented in object form.
     */
    dateQuery: prop_types_1.default.shape({
        period: prop_types_1.default.string.isRequired,
        compare: prop_types_1.default.string.isRequired,
        before: prop_types_1.default.object,
        after: prop_types_1.default.object,
        primaryDate: prop_types_1.default.shape({
            label: prop_types_1.default.string.isRequired,
            range: prop_types_1.default.string.isRequired,
        }).isRequired,
        secondaryDate: prop_types_1.default.shape({
            label: prop_types_1.default.string.isRequired,
            range: prop_types_1.default.string.isRequired,
        }),
    }),
    /**
     * ISO date format string.
     */
    isoDateFormat: prop_types_1.default.string,
};
ReportFilters.defaultProps = {
    siteLocale: 'en_US',
    advancedFilters: {
        title: '',
        filters: {},
    },
    filters: [],
    query: {},
    showDatePicker: true,
    onDateSelect: () => { },
    currency: (0, currency_1.default)().getCurrencyConfig(),
};
exports.default = ReportFilters;
