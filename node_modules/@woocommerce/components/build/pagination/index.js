"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const element_1 = require("@wordpress/element");
const components_1 = require("@wordpress/components");
const classnames_1 = __importDefault(require("classnames"));
const prop_types_1 = __importDefault(require("prop-types"));
const lodash_1 = require("lodash");
const icons_1 = require("@wordpress/icons");
const PER_PAGE_OPTIONS = [25, 50, 75, 100];
/**
 * Use `Pagination` to allow navigation between pages that represent a collection of items.
 * The component allows for selecting a new page and items per page options.
 */
class Pagination extends element_1.Component {
    constructor(props) {
        super(props);
        this.state = {
            inputValue: this.props.page,
        };
        this.previousPage = this.previousPage.bind(this);
        this.nextPage = this.nextPage.bind(this);
        this.onInputChange = this.onInputChange.bind(this);
        this.onInputBlur = this.onInputBlur.bind(this);
        this.perPageChange = this.perPageChange.bind(this);
        this.selectInputValue = this.selectInputValue.bind(this);
    }
    previousPage(event) {
        event.stopPropagation();
        const { page, onPageChange } = this.props;
        if (page - 1 < 1) {
            return;
        }
        onPageChange(page - 1, 'previous');
    }
    nextPage(event) {
        event.stopPropagation();
        const { page, onPageChange } = this.props;
        if (page + 1 > this.pageCount) {
            return;
        }
        onPageChange(page + 1, 'next');
    }
    perPageChange(perPage) {
        const { onPerPageChange, onPageChange, total, page } = this.props;
        onPerPageChange(parseInt(perPage, 10));
        const newMaxPage = Math.ceil(total / parseInt(perPage, 10));
        if (page > newMaxPage) {
            onPageChange(newMaxPage);
        }
    }
    onInputChange(event) {
        this.setState({
            inputValue: event.target.value,
        });
    }
    onInputBlur(event) {
        const { onPageChange, page } = this.props;
        const newPage = parseInt(event.target.value, 10);
        if (newPage !== page &&
            Number.isFinite(newPage) &&
            newPage > 0 &&
            this.pageCount &&
            this.pageCount >= newPage) {
            onPageChange(newPage, 'goto');
        }
    }
    selectInputValue(event) {
        event.target.select();
    }
    renderPageArrows() {
        const { page, showPageArrowsLabel } = this.props;
        if (this.pageCount <= 1) {
            return null;
        }
        const previousLinkClass = (0, classnames_1.default)('woocommerce-pagination__link', {
            'is-active': page > 1,
        });
        const nextLinkClass = (0, classnames_1.default)('woocommerce-pagination__link', {
            'is-active': page < this.pageCount,
        });
        return ((0, element_1.createElement)("div", { className: "woocommerce-pagination__page-arrows" },
            showPageArrowsLabel && ((0, element_1.createElement)("span", { className: "woocommerce-pagination__page-arrows-label", role: "status", "aria-live": "polite" }, (0, i18n_1.sprintf)((0, i18n_1.__)('Page %d of %d', 'woocommerce'), page, this.pageCount))),
            (0, element_1.createElement)("div", { className: "woocommerce-pagination__page-arrows-buttons" },
                (0, element_1.createElement)(components_1.Button, { className: previousLinkClass, disabled: !(page > 1), onClick: this.previousPage, label: (0, i18n_1.__)('Previous Page', 'woocommerce') },
                    (0, element_1.createElement)(icons_1.Icon, { icon: icons_1.chevronLeft })),
                (0, element_1.createElement)(components_1.Button, { className: nextLinkClass, disabled: !(page < this.pageCount), onClick: this.nextPage, label: (0, i18n_1.__)('Next Page', 'woocommerce') },
                    (0, element_1.createElement)(icons_1.Icon, { icon: icons_1.chevronRight })))));
    }
    renderPagePicker() {
        const { page } = this.props;
        const { inputValue } = this.state;
        const isError = page < 1 || page > this.pageCount;
        const inputClass = (0, classnames_1.default)('woocommerce-pagination__page-picker-input', {
            'has-error': isError,
        });
        const instanceId = (0, lodash_1.uniqueId)('woocommerce-pagination-page-picker-');
        return ((0, element_1.createElement)("div", { className: "woocommerce-pagination__page-picker" },
            (0, element_1.createElement)("label", { htmlFor: instanceId, className: "woocommerce-pagination__page-picker-label" },
                (0, i18n_1.__)('Go to page', 'woocommerce'),
                (0, element_1.createElement)("input", { id: instanceId, className: inputClass, "aria-invalid": isError, type: "number", onClick: this.selectInputValue, onChange: this.onInputChange, onBlur: this.onInputBlur, value: inputValue, min: 1, max: this.pageCount }))));
    }
    renderPerPagePicker() {
        // @todo Replace this with a styleized Select drop-down/control?
        const pickerOptions = PER_PAGE_OPTIONS.map((option) => {
            return { value: option, label: option };
        });
        return ((0, element_1.createElement)("div", { className: "woocommerce-pagination__per-page-picker" },
            (0, element_1.createElement)(components_1.SelectControl, { label: (0, i18n_1.__)('Rows per page', 'woocommerce'), labelPosition: "side", value: this.props.perPage, onChange: this.perPageChange, options: pickerOptions })));
    }
    render() {
        const { total, perPage, className, showPagePicker, showPerPagePicker } = this.props;
        this.pageCount = Math.ceil(total / perPage);
        const classes = (0, classnames_1.default)('woocommerce-pagination', className);
        if (this.pageCount <= 1) {
            return ((total > PER_PAGE_OPTIONS[0] && ((0, element_1.createElement)("div", { className: classes }, this.renderPerPagePicker()))) ||
                null);
        }
        return ((0, element_1.createElement)("div", { className: classes },
            this.renderPageArrows(),
            showPagePicker && this.renderPagePicker(),
            showPerPagePicker && this.renderPerPagePicker()));
    }
}
Pagination.propTypes = {
    /**
     * The current page of the collection.
     */
    page: prop_types_1.default.number.isRequired,
    /**
     * A function to execute when the page is changed.
     */
    onPageChange: prop_types_1.default.func,
    /**
     * The amount of results that are being displayed per page.
     */
    perPage: prop_types_1.default.number.isRequired,
    /**
     * A function to execute when the per page option is changed.
     */
    onPerPageChange: prop_types_1.default.func,
    /**
     * The total number of results.
     */
    total: prop_types_1.default.number.isRequired,
    /**
     * Additional classNames.
     */
    className: prop_types_1.default.string,
    /**
     * Whether the page picker should be rendered.
     */
    showPagePicker: prop_types_1.default.bool,
    /**
     * Whether the perPage picker should be rendered.
     */
    showPerPagePicker: prop_types_1.default.bool,
    /**
     * Whether the page arrows label should be rendered.
     */
    showPageArrowsLabel: prop_types_1.default.bool,
};
Pagination.defaultProps = {
    onPageChange: lodash_1.noop,
    onPerPageChange: lodash_1.noop,
    showPagePicker: true,
    showPerPagePicker: true,
    showPageArrowsLabel: true,
};
exports.default = Pagination;
