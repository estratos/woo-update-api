"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const i18n_1 = require("@wordpress/i18n");
const element_1 = require("@wordpress/element");
const components_1 = require("@wordpress/components");
const prop_types_1 = __importDefault(require("prop-types"));
const classnames_1 = __importDefault(require("classnames"));
const moment_1 = __importDefault(require("moment"));
/**
 * Internal dependencies
 */
const compare_periods_1 = __importDefault(require("./compare-periods"));
const date_range_1 = __importDefault(require("../calendar/date-range"));
const section_1 = require("../section");
const preset_periods_1 = __importDefault(require("./preset-periods"));
class DatePickerContent extends element_1.Component {
    constructor() {
        super();
        this.onTabSelect = this.onTabSelect.bind(this);
        this.controlsRef = (0, element_1.createRef)();
    }
    onTabSelect(tab) {
        const { onUpdate, period } = this.props;
        /**
         * If the period is `custom` and the user switches tabs to view the presets,
         * then a preset should be selected. This logic selects the default, otherwise
         * `custom` value for period will result in no selection.
         */
        if (tab === 'period' && period === 'custom') {
            onUpdate({ period: 'today' });
        }
    }
    isFutureDate(dateString) {
        return (0, moment_1.default)().isBefore((0, moment_1.default)(dateString), 'day');
    }
    render() {
        const { period, compare, after, before, onUpdate, onClose, onSelect, isValidSelection, resetCustomValues, focusedInput, afterText, beforeText, afterError, beforeError, shortDateFormat, } = this.props;
        return ((0, element_1.createElement)("div", null,
            (0, element_1.createElement)(section_1.H, { className: "screen-reader-text", tabIndex: "0" }, (0, i18n_1.__)('Select date range and comparison', 'woocommerce')),
            (0, element_1.createElement)(section_1.Section, { component: false },
                (0, element_1.createElement)(section_1.H, { className: "woocommerce-filters-date__text" }, (0, i18n_1.__)('select a date range', 'woocommerce')),
                (0, element_1.createElement)(components_1.TabPanel, { tabs: [
                        {
                            name: 'period',
                            title: (0, i18n_1.__)('Presets', 'woocommerce'),
                            className: 'woocommerce-filters-date__tab',
                        },
                        {
                            name: 'custom',
                            title: (0, i18n_1.__)('Custom', 'woocommerce'),
                            className: 'woocommerce-filters-date__tab',
                        },
                    ], className: "woocommerce-filters-date__tabs", activeClass: "is-active", initialTabName: period === 'custom' ? 'custom' : 'period', onSelect: this.onTabSelect }, (selected) => ((0, element_1.createElement)(element_1.Fragment, null,
                    selected.name === 'period' && ((0, element_1.createElement)(preset_periods_1.default, { onSelect: onUpdate, period: period })),
                    selected.name === 'custom' && ((0, element_1.createElement)(date_range_1.default, { after: after, before: before, onUpdate: onUpdate, isInvalidDate: this.isFutureDate, focusedInput: focusedInput, afterText: afterText, beforeText: beforeText, afterError: afterError, beforeError: beforeError, shortDateFormat: shortDateFormat, losesFocusTo: this.controlsRef.current })),
                    (0, element_1.createElement)("div", { className: (0, classnames_1.default)('woocommerce-filters-date__content-controls', {
                            'is-custom': selected.name === 'custom',
                        }), ref: this.controlsRef },
                        (0, element_1.createElement)(section_1.H, { className: "woocommerce-filters-date__text" }, (0, i18n_1.__)('compare to', 'woocommerce')),
                        (0, element_1.createElement)(compare_periods_1.default, { onSelect: onUpdate, compare: compare }),
                        (0, element_1.createElement)("div", { className: "woocommerce-filters-date__button-group" },
                            selected.name === 'custom' && ((0, element_1.createElement)(components_1.Button, { className: "woocommerce-filters-date__button", isSecondary: true, onClick: resetCustomValues, disabled: !(after || before) }, (0, i18n_1.__)('Reset', 'woocommerce'))),
                            isValidSelection(selected.name) ? ((0, element_1.createElement)(components_1.Button, { className: "woocommerce-filters-date__button", onClick: onSelect(selected.name, onClose), isPrimary: true }, (0, i18n_1.__)('Update', 'woocommerce'))) : ((0, element_1.createElement)(components_1.Button, { className: "woocommerce-filters-date__button", isPrimary: true, disabled: true }, (0, i18n_1.__)('Update', 'woocommerce')))))))))));
    }
}
DatePickerContent.propTypes = {
    period: prop_types_1.default.string.isRequired,
    compare: prop_types_1.default.string.isRequired,
    onUpdate: prop_types_1.default.func.isRequired,
    onClose: prop_types_1.default.func.isRequired,
    onSelect: prop_types_1.default.func.isRequired,
    resetCustomValues: prop_types_1.default.func.isRequired,
    focusedInput: prop_types_1.default.string,
    afterText: prop_types_1.default.string,
    beforeText: prop_types_1.default.string,
    afterError: prop_types_1.default.string,
    beforeError: prop_types_1.default.string,
    shortDateFormat: prop_types_1.default.string.isRequired,
};
exports.default = DatePickerContent;
