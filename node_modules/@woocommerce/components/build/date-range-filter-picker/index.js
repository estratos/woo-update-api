"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const element_1 = require("@wordpress/element");
const i18n_1 = require("@wordpress/i18n");
const components_1 = require("@wordpress/components");
const prop_types_1 = __importDefault(require("prop-types"));
const viewport_1 = require("@wordpress/viewport");
const classnames_1 = __importDefault(require("classnames"));
/**
 * Internal dependencies
 */
const content_1 = __importDefault(require("./content"));
const dropdown_button_1 = __importDefault(require("../dropdown-button"));
const shortDateFormat = (0, i18n_1.__)('MM/DD/YYYY', 'woocommerce');
/**
 * Select a range of dates or single dates.
 */
class DateRangeFilterPicker extends element_1.Component {
    constructor(props) {
        super(props);
        this.state = this.getResetState();
        this.update = this.update.bind(this);
        this.onSelect = this.onSelect.bind(this);
        this.isValidSelection = this.isValidSelection.bind(this);
        this.resetCustomValues = this.resetCustomValues.bind(this);
    }
    formatDate(date, format) {
        if (date &&
            date._isAMomentObject &&
            typeof date.format === 'function') {
            return date.format(format);
        }
        return '';
    }
    getResetState() {
        const { period, compare, before, after } = this.props.dateQuery;
        return {
            period,
            compare,
            before,
            after,
            focusedInput: 'startDate',
            afterText: this.formatDate(after, shortDateFormat),
            beforeText: this.formatDate(before, shortDateFormat),
            afterError: null,
            beforeError: null,
        };
    }
    update(update) {
        this.setState(update);
    }
    onSelect(selectedTab, onClose) {
        const { isoDateFormat, onRangeSelect } = this.props;
        return (event) => {
            const { period, compare, after, before } = this.state;
            const data = {
                period: selectedTab === 'custom' ? 'custom' : period,
                compare,
            };
            if (selectedTab === 'custom') {
                data.after = this.formatDate(after, isoDateFormat);
                data.before = this.formatDate(before, isoDateFormat);
            }
            else {
                data.after = undefined;
                data.before = undefined;
            }
            onRangeSelect(data);
            onClose(event);
        };
    }
    getButtonLabel() {
        const { primaryDate, secondaryDate } = this.props.dateQuery;
        return [
            `${primaryDate.label} (${primaryDate.range})`,
            `${(0, i18n_1.__)('vs.', 'woocommerce')} ${secondaryDate.label} (${secondaryDate.range})`,
        ];
    }
    isValidSelection(selectedTab) {
        const { compare, after, before } = this.state;
        if (selectedTab === 'custom') {
            return compare && after && before;
        }
        return true;
    }
    resetCustomValues() {
        this.setState({
            after: null,
            before: null,
            focusedInput: 'startDate',
            afterText: '',
            beforeText: '',
            afterError: null,
            beforeError: null,
        });
    }
    render() {
        const { period, compare, after, before, focusedInput, afterText, beforeText, afterError, beforeError, } = this.state;
        const { isViewportMobile } = this.props;
        const contentClasses = (0, classnames_1.default)('woocommerce-filters-date__content', {
            'is-mobile': isViewportMobile,
        });
        return ((0, element_1.createElement)("div", { className: "woocommerce-filters-filter" },
            (0, element_1.createElement)("span", { className: "woocommerce-filters-label" },
                (0, i18n_1.__)('Date range', 'woocommerce'),
                ":"),
            (0, element_1.createElement)(components_1.Dropdown, { contentClassName: contentClasses, position: "bottom", expandOnMobile: true, renderToggle: ({ isOpen, onToggle }) => ((0, element_1.createElement)(dropdown_button_1.default, { onClick: onToggle, isOpen: isOpen, labels: this.getButtonLabel() })), renderContent: ({ onClose }) => ((0, element_1.createElement)(content_1.default, { period: period, compare: compare, after: after, before: before, onUpdate: this.update, onClose: onClose, onSelect: this.onSelect, isValidSelection: this.isValidSelection, resetCustomValues: this.resetCustomValues, focusedInput: focusedInput, afterText: afterText, beforeText: beforeText, afterError: afterError, beforeError: beforeError, shortDateFormat: shortDateFormat })) })));
    }
}
DateRangeFilterPicker.propTypes = {
    /**
     * Callback called when selection is made.
     */
    onRangeSelect: prop_types_1.default.func.isRequired,
    /**
     * The date query string represented in object form.
     */
    dateQuery: prop_types_1.default.shape({
        period: prop_types_1.default.string.isRequired,
        compare: prop_types_1.default.string.isRequired,
        before: prop_types_1.default.object,
        after: prop_types_1.default.object,
        primaryDate: prop_types_1.default.shape({
            label: prop_types_1.default.string.isRequired,
            range: prop_types_1.default.string.isRequired,
        }).isRequired,
        secondaryDate: prop_types_1.default.shape({
            label: prop_types_1.default.string.isRequired,
            range: prop_types_1.default.string.isRequired,
        }).isRequired,
    }).isRequired,
};
exports.default = (0, viewport_1.withViewportMatch)({
    isViewportMobile: '< medium',
})(DateRangeFilterPicker);
