/**
 * External dependencies
 */
import { createElement, useMemo } from '@wordpress/element';
import { Button } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */
import { Form } from '../index';
import { TextField, PasswordField, CheckboxField, SelectField, } from './field-types';
const fieldTypeMap = {
    text: TextField,
    password: PasswordField,
    checkbox: CheckboxField,
    select: SelectField,
    default: TextField,
};
const getInitialConfigValues = (fields) => fields.reduce((data, field) => ({
    ...data,
    [field.id]: field.type === 'checkbox' ? field.value === 'yes' : field.value,
}), {});
export const DynamicForm = ({ fields: baseFields = [], isBusy = false, onSubmit = () => { }, onChange = () => { }, validate = () => ({}), submitLabel = __('Proceed', 'woocommerce'), }) => {
    // Support accepting fields in the format provided by the API (object), but transform to Array
    const fields = baseFields instanceof Array ? baseFields : Object.values(baseFields);
    const initialValues = useMemo(() => getInitialConfigValues(fields), [fields]);
    return (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    createElement(Form, { initialValues: initialValues, onChange: onChange, onSubmit: onSubmit, validate: validate }, ({ getInputProps, handleSubmit, }) => {
        return (createElement("div", { className: "woocommerce-component_dynamic-form" },
            fields.map((field) => {
                if (field.type &&
                    !(field.type in fieldTypeMap)) {
                    /* eslint-disable no-console */
                    console.warn(`Field type of ${field.type} not current supported in DynamicForm component`);
                    /* eslint-enable no-console */
                    return null;
                }
                const Control = fieldTypeMap[field.type || 'default'];
                return (createElement(Control, { key: field.id, field: field, ...getInputProps(field.id) }));
            }),
            createElement(Button, { isPrimary: true, isBusy: isBusy, onClick: () => {
                    handleSubmit();
                } }, submitLabel)));
    }));
};
