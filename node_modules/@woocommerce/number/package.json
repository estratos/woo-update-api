{
  "name": "@woocommerce/number",
  "version": "2.4.0",
  "description": "Number formatting utilities for WooCommerce.",
  "author": "Automattic",
  "license": "GPL-3.0-or-later",
  "keywords": [
    "wordpress",
    "woocommerce"
  ],
  "homepage": "https://github.com/woocommerce/woocommerce/tree/trunk/packages/js/number/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/woocommerce/woocommerce.git"
  },
  "bugs": {
    "url": "https://github.com/woocommerce/woocommerce/issues"
  },
  "main": "build/index.js",
  "module": "build-module/index.js",
  "types": "build-types",
  "react-native": "src/index",
  "dependencies": {
    "locutus": "^2.0.16"
  },
  "publishConfig": {
    "access": "public"
  },
  "devDependencies": {
    "@babel/core": "^7.17.5",
    "@woocommerce/eslint-plugin": "2.2.0",
    "eslint": "^8.12.0",
    "@babel/runtime": "^7.17.2",
    "jest": "^27.5.1",
    "jest-cli": "^27.5.1",
    "require-turbo": "0.0.0",
    "rimraf": "^3.0.2",
    "ts-jest": "^27.1.3",
    "typescript": "^4.6.2"
  },
  "lint-staged": {
    "*.(t|j)s?(x)": [
      "pnpm lint:fix",
      "pnpm test-staged"
    ]
  },
  "scripts": {
    "changelog": "composer exec -- changelogger",
    "clean": "pnpm exec rimraf tsconfig.tsbuildinfo build build-*",
    "build": "node ./node_modules/require-turbo && tsc --build ./tsconfig.json ./tsconfig-cjs.json",
    "start": "tsc --build --watch",
    "lint": "node ./node_modules/require-turbo && eslint src",
    "lint:fix": "eslint src --fix",
    "test": "node ./node_modules/require-turbo && jest --config ./jest.config.json",
    "test-staged": "jest --bail --config ./jest.config.json --findRelatedTests"
  },
  "readme": "# Number\n\nA collection of utilities to properly localize numerical values in WooCommerce\n\n## Installation\n\nInstall the module\n\n```bash\npnpm install @woocommerce/number --save\n```\n\n_This package assumes that your code will run in an **ES2015+** environment. If you're using an environment that has limited or no support for ES2015+ such as lower versions of IE then using [core-js](https://github.com/zloirock/core-js) or [@babel/polyfill](https://babeljs.io/docs/en/next/babel-polyfill) will add support for these methods. Learn more about it in [Babel docs](https://babeljs.io/docs/en/next/caveats)._\n\n## Usage\n\n```JS\nimport { numberFormat, formatValue, calculateDelta } from '@woocommerce/number';\n\n// It's best to retrieve the site currency settings and compose them with the format functions.\nimport { partial } from 'lodash';\n// Retrieve this from the API or a global settings object.\nconst siteNumberOptions = {\n  precision: 2,\n  decimalSeparator: '.',\n  thousandSeparator: ',',\n};\n// Compose.\nconst formatStoreNumber = partial( numberFormat, siteNumberOptions );\nconst formatStoreValue = partial( formatValue, siteNumberOptions );\n\n// Formats a number using site's current locale.\nconst localizedNumber = formatStoreNumber( 1337 ); // '1,377'\n\n// formatValue's second argument is a type: average, or number\n// The third argument is the number/value to format\n// (The first argument is the config object we composed with earlier)\nconst formattedAverage = formatStoreValue( 'average', '10.5' ); // 11 just uses Math.round\nconst formattedNumber = formatStoreValue( 'number', '1337' ); // 1,337 calls formatNumber ( see above )\n\n// Get a rounded percent change/delta between two numbers\nconst delta = calculateDelta( 10, 8 ); // '25'\n```\n"
}