"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateDelta = exports.formatValue = exports.numberFormat = void 0;
/**
 * External dependencies
 */
const number_format_1 = __importDefault(require("locutus/php/strings/number_format"));
/**
 * Formats a number using site's current locale
 *
 * @see http://locutus.io/php/strings/number_format/
 * @param {NumberConfig}  numberConfig Number formatting configuration object.
 * @param {number|string} number       number to format
 * @return {string} A formatted string.
 */
function numberFormat({ precision = null, decimalSeparator = '.', thousandSeparator = ',', }, number) {
    if (number === undefined) {
        return '';
    }
    if (typeof number !== 'number') {
        number = parseFloat(number);
    }
    if (isNaN(number)) {
        return '';
    }
    let parsedPrecision = precision === null ? NaN : Number(precision);
    if (isNaN(parsedPrecision)) {
        const [, decimals] = number.toString().split('.');
        parsedPrecision = decimals ? decimals.length : 0;
    }
    return (0, number_format_1.default)(number, parsedPrecision, decimalSeparator, thousandSeparator);
}
exports.numberFormat = numberFormat;
/**
 * Formats a number as average or number string according to the given `type`.
 *  - `type = 'average'` returns a rounded `Number`
 *  - `type = 'number'` returns a formatted `String`
 *
 * @param {NumberConfig} numberConfig number formatting configuration object.
 * @param {string}       type         of number to format, `'average'` or `'number'`
 * @param {number}       value        to format.
 * @return {string | number | null} A formatted string.
 */
function formatValue(numberConfig, type, value) {
    if (!Number.isFinite(value)) {
        return null;
    }
    switch (type) {
        case 'average':
            return Math.round(value);
        case 'number':
            return numberFormat(Object.assign(Object.assign({}, numberConfig), { precision: null }), value);
    }
    return null;
}
exports.formatValue = formatValue;
/**
 * Calculates the delta/percentage change between two numbers.
 *
 * @param {number} primaryValue   the value to calculate change for.
 * @param {number} secondaryValue the baseline which to calculdate the change against.
 * @return {?number} Percent change between the primaryValue from the secondaryValue.
 */
function calculateDelta(primaryValue, secondaryValue) {
    if (!Number.isFinite(primaryValue) ||
        !Number.isFinite(secondaryValue)) {
        return null;
    }
    if (secondaryValue === 0) {
        return 0;
    }
    return Math.round(((primaryValue - secondaryValue) / secondaryValue) * 100);
}
exports.calculateDelta = calculateDelta;
