/**
 * Internal dependencies
 */
import CRUD_ACTIONS from './crud-actions';
import TYPES from './action-types';
import { IdType, Item, ItemQuery } from './types';
declare type ResolverOptions = {
    resourceName: string;
    namespace: string;
};
export declare function createItemError(query: Partial<ItemQuery>, error: unknown): {
    type: TYPES.CREATE_ITEM_ERROR;
    query: Partial<ItemQuery>;
    error: unknown;
    errorType: CRUD_ACTIONS;
};
export declare function createItemSuccess(id: IdType, item: Item): {
    type: TYPES.CREATE_ITEM_SUCCESS;
    id: IdType;
    item: Item;
};
export declare function deleteItemError(id: IdType, error: unknown): {
    type: TYPES.DELETE_ITEM_ERROR;
    id: IdType;
    error: unknown;
    errorType: CRUD_ACTIONS;
};
export declare function deleteItemSuccess(id: IdType, force: boolean, item: Item): {
    type: TYPES.DELETE_ITEM_SUCCESS;
    id: IdType;
    force: boolean;
    item: Item;
};
export declare function getItemError(id: unknown, error: unknown): {
    type: TYPES.GET_ITEM_ERROR;
    id: unknown;
    error: unknown;
    errorType: CRUD_ACTIONS;
};
export declare function getItemSuccess(id: IdType, item: Item): {
    type: TYPES.GET_ITEM_SUCCESS;
    id: IdType;
    item: Item;
};
export declare function getItemsError(query: unknown, error: unknown): {
    type: TYPES.GET_ITEMS_ERROR;
    query: unknown;
    error: unknown;
    errorType: CRUD_ACTIONS;
};
export declare function getItemsSuccess(query: unknown, items: Item[]): {
    type: TYPES.GET_ITEMS_SUCCESS;
    items: Item[];
    query: unknown;
};
export declare function updateItemError(id: unknown, error: unknown): {
    type: TYPES.UPDATE_ITEM_ERROR;
    id: unknown;
    error: unknown;
    errorType: CRUD_ACTIONS;
};
export declare function updateItemSuccess(id: IdType, item: Item): {
    type: TYPES.UPDATE_ITEM_SUCCESS;
    id: IdType;
    item: Item;
};
export declare const createDispatchActions: ({ namespace, resourceName, }: ResolverOptions) => {
    [x: string]: ((query: Partial<ItemQuery>) => Generator<unknown, Item, Item>) | ((id: IdType, force?: boolean) => Generator<unknown, Item, Item>) | ((id: IdType, query: Partial<ItemQuery>) => Generator<unknown, Item, Item>);
};
export declare type Actions = ReturnType<typeof createItemError | typeof createItemSuccess | typeof deleteItemError | typeof deleteItemSuccess | typeof getItemError | typeof getItemSuccess | typeof getItemsError | typeof getItemsSuccess | typeof updateItemError | typeof updateItemSuccess>;
export {};
//# sourceMappingURL=actions.d.ts.map