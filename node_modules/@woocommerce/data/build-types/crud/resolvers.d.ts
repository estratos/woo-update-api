import { Item, ItemQuery } from './types';
declare type ResolverOptions = {
    resourceName: string;
    pluralResourceName: string;
    namespace: string;
};
export declare const createResolvers: ({ resourceName, pluralResourceName, namespace, }: ResolverOptions) => {
    [x: string]: ((id: number) => Generator<unknown, Item, Item>) | ((query: Partial<ItemQuery>) => Generator<{
        type: import("./action-types").TYPES.GET_ITEMS_ERROR;
        query: unknown;
        error: unknown;
        errorType: import("./crud-actions").CRUD_ACTIONS;
    } | {
        type: import("./action-types").TYPES.GET_ITEMS_SUCCESS;
        items: Item[];
        query: unknown;
    } | Generator<unknown, {
        items: Item[];
        totalCount: number;
    } | undefined, Item[] | ({
        data: Item[];
    } & Response)>, Item[], {
        items: Item[];
    }>);
};
export {};
//# sourceMappingURL=resolvers.d.ts.map