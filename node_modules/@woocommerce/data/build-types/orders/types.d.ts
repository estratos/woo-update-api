/**
 * External dependencies
 */
import { Schema } from '@wordpress/core-data';
/**
 * Internal dependencies
 */
import { BaseQueryParams } from '../types';
export declare type Address = {
    first_name: string;
    last_name: string;
    company: string;
    address_1: string;
    address_2: string;
    city: string;
    state: string;
    postcode: string;
    country: string;
    email: string;
    phone: string;
};
export declare type OrderTax = {
    id: number;
    total: string;
    subtotal: string;
};
export declare type OrderTaxLine = {
    id: number;
    rate_code: string;
    rate_id: string;
    label: string;
    compound: boolean;
    tax_total: string;
    shipping_tax_total: string;
};
export declare type OrderFeeLine = {
    id: number;
    name: string;
    tax_class: string;
    tax_status: string;
    total: string;
    total_tax: string;
    taxes: OrderTax[];
};
export declare type OrderShippingLine = {
    id: number;
    method_title: string;
    method_id: string;
    total: string;
    total_tax: string;
    taxes: Omit<OrderTax, 'subtotal'>[];
};
export declare type OrderCoupon = {
    id: number;
    code: string;
    discount: string;
    discount_tax: string;
};
export declare type OrderMetaData = {
    key: string;
    label: string;
    value: unknown;
};
export declare type OrderRefund = {
    id: number;
    reason: string;
    total: string;
};
export declare type OrderLineItem = {
    id: number;
    name: string;
    sku: string;
    product_id: string | number;
    variation_id: number;
    quantity: number;
    tax_class: string;
    price: string;
    subtotal: string;
    subtotal_tax: string;
    total: string;
    total_tax: string;
    taxes: OrderTax[];
    meta_data: OrderMetaData[];
};
export declare type OrderStatus = 'processing' | 'pending' | 'on-hold' | 'completed' | 'cancelled' | 'refunded' | 'failed';
export declare type Order<Status = OrderStatus> = Omit<Schema.Post, 'status'> & {
    id: number;
    number: string;
    order_key: string;
    created_via: string;
    status: Status;
    currency: string;
    version: number;
    prices_include_tax: boolean;
    customer_id: number;
    discount_total: string;
    discount_tax: string;
    shipping_total: string;
    shipping_tax: string;
    cart_tax: string;
    total: string;
    total_tax: string;
    billing: Address;
    shipping: Address;
    payment_method: string;
    payment_method_title: string;
    set_paid: boolean;
    transaction_id: string;
    customer_ip_address: string;
    customer_user_agent: string;
    customer_note: string;
    date_completed: string;
    date_paid: string;
    cart_hash: string;
    line_items: OrderLineItem[];
    tax_lines: OrderTaxLine[];
    shipping_lines: OrderShippingLine[];
    fee_lines: OrderFeeLine[];
    coupon_lines: OrderCoupon[];
    refunds: OrderRefund[];
};
export declare type PartialOrder = Partial<Order> & Pick<Order, 'id'>;
declare type OrdersQueryStatus = 'any' | 'pending' | 'processing' | 'on-hold' | 'completed' | 'cancelled' | 'refunded' | 'failed' | 'trash';
export declare type OrdersQuery<Status = OrdersQueryStatus> = BaseQueryParams<keyof Order> & {
    status: Status;
    customer: number;
    product: number;
    dp: number;
};
export {};
//# sourceMappingURL=types.d.ts.map