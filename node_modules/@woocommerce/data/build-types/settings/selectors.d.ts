/**
 * Retrieves a setting value from the setting store.
 *
 * @param {Object}   state                   State param added by wp.data.
 * @param {string}   group                   The settings group.
 * @param {string}   name                    The identifier for the setting.
 * @param {*}        [fallback=false]        The value to use as a fallback
 *                                           if the setting is not in the
 *                                           state.
 * @param {Function} [filter=( val ) => val] A callback for filtering the
 *                                           value before it's returned.
 *                                           Receives both the found value
 *                                           (if it exists for the key) and
 *                                           the provided fallback arg.
 *
 * @return {*}  The value present in the settings state for the given
 *                   name.
 */
export function getSetting(state: Object, group: string, name: string, fallback?: any, filter?: Function | undefined): any;
export function getSettingsGroupNames(state: any): string[];
export function getSettings(state: any, group: any): {};
export function getDirtyKeys(state: any, group: any): any;
export function getIsDirty(state: any, group: any, keys?: any[]): boolean;
export function getSettingsForGroup(state: any, group: any, keys: any): any;
export function isUpdateSettingsRequesting(state: any, group: any): any;
export function getLastSettingsErrorForGroup(state: any, group: any): any;
export function getSettingsError(state: any, group: any, id: any): any;
//# sourceMappingURL=selectors.d.ts.map