/// <reference types="react" />
/**
 * Internal dependencies
 */
import { Plugin } from '../plugins/types';
export declare type TaskType = {
    actionLabel?: string;
    actionUrl?: string;
    content: string;
    id: string;
    parentId: string;
    isComplete: boolean;
    isDismissable: boolean;
    isDismissed: boolean;
    isSnoozed: boolean;
    isVisible: boolean;
    isSnoozeable: boolean;
    isDisabled: boolean;
    snoozedUntil: number;
    time: string;
    title: string;
    isVisited: boolean;
    additionalInfo: string;
    canView: boolean;
    isActioned: boolean;
    eventPrefix: string;
    level: number;
    additionalData?: {
        woocommerceTaxCountries?: string[];
        taxJarActivated?: boolean;
        avalaraActivated?: boolean;
    };
    isDeprecated?: boolean;
};
export declare type DeprecatedTaskType = {
    key: string;
    title: string;
    content: string;
    container: React.ReactNode;
    completed: boolean;
    visible: boolean;
    additionalInfo: string;
    time: string;
    isDismissable: boolean;
    onDelete: () => void;
    onDismiss: () => void;
    allowRemindMeLater: string;
    remindMeLater: () => () => void;
    level?: string;
    type?: string;
};
export declare type TaskListSection = {
    id: string;
    title: string;
    description: string;
    image: string;
    tasks: string[];
    isComplete: boolean;
};
export declare type TaskListType = {
    id: string;
    title: string;
    isHidden: boolean;
    isVisible: boolean;
    isComplete: boolean;
    tasks: TaskType[];
    eventPrefix: string;
    displayProgressHeader: boolean;
    keepCompletedTaskList: 'yes' | 'no';
    showCESFeedback?: boolean;
    sections?: TaskListSection[];
    isToggleable?: boolean;
    isCollapsible?: boolean;
    isExpandable?: boolean;
};
export declare type OnboardingState = {
    freeExtensions: ExtensionList[];
    profileItems: ProfileItems;
    taskLists: Record<string, TaskListType>;
    paymentMethods: Plugin[];
    productTypes: OnboardingProductType[];
    emailPrefill: string;
    errors: Record<string, unknown>;
    requesting: Record<string, boolean>;
};
export declare type Industry = {
    slug: string;
};
export declare type ProductCount = '0' | '1-10' | '11-100' | '101 - 1000' | '1000+';
export declare type ProductTypeSlug = 'physical' | 'bookings' | 'downloads' | 'memberships' | 'product-add-ons' | 'product-bundles' | 'subscriptions';
export declare type OtherPlatformSlug = 'shopify' | 'bigcommerce' | 'wix' | 'amazon' | 'ebay' | 'etsy' | 'squarespace' | 'other';
export declare type RevenueTypeSlug = 'none' | 'rather-not-say' | 'up-to-2500' | '2500-10000' | '10000-50000' | '50000-250000' | 'more-than-250000';
export declare type ProfileItems = {
    business_extensions: [] | null;
    completed: boolean | null;
    industry: Industry[] | null;
    number_employees: string | null;
    other_platform: OtherPlatformSlug | null;
    other_platform_name: string | null;
    product_count: ProductCount | null;
    product_types: ProductTypeSlug[] | null;
    revenue: RevenueTypeSlug | null;
    selling_venues: string | null;
    setup_client: boolean | null;
    skipped: boolean | null;
    theme: string | null;
    wccom_connected: boolean | null;
    is_agree_marketing: boolean | null;
    store_email: string | null;
};
export declare type FieldLocale = {
    locale: string;
    label: string;
};
export declare type MethodFields = {
    name: string;
    option?: string;
    label?: string;
    locales?: FieldLocale[];
    type?: string;
    value?: string;
};
export declare type OnboardingProductType = {
    default?: boolean;
    label: string;
    product?: number;
};
export declare type ExtensionList = {
    key: string;
    title: string;
    plugins: Extension[];
};
export declare type Extension = {
    description: string;
    key: string;
    image_url: string;
    manage_url: string;
    name: string;
    is_built_by_wc: boolean;
    is_visible: boolean;
};
//# sourceMappingURL=types.d.ts.map