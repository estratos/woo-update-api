import { DispatchFromMap } from '@automattic/data-stores';
/**
 * Internal dependencies
 */
import TYPES from './action-types';
import { ReadOnlyProperties, PartialProduct, Product, ProductQuery } from './types';
export declare function getProductSuccess(id: number, product: PartialProduct): {
    type: TYPES.GET_PRODUCT_SUCCESS;
    id: number;
    product: PartialProduct;
};
export declare function getProductError(query: Partial<ProductQuery>, error: unknown): {
    type: TYPES.GET_PRODUCT_ERROR;
    query: Partial<ProductQuery<import("./types").ProductStatus, import("./types").ProductType>>;
    error: unknown;
};
declare function createProductSuccess(id: number, product: Partial<Product>): {
    type: TYPES.CREATE_PRODUCT_SUCCESS;
    id: number;
    product: Partial<Product<import("./types").ProductStatus, import("./types").ProductType>>;
};
export declare function createProductError(query: Partial<Product>, error: unknown): {
    type: TYPES.CREATE_PRODUCT_ERROR;
    query: Partial<Product<import("./types").ProductStatus, import("./types").ProductType>>;
    error: unknown;
};
declare function updateProductSuccess(id: number, product: Partial<Product>): {
    type: TYPES.UPDATE_PRODUCT_SUCCESS;
    id: number;
    product: Partial<Product<import("./types").ProductStatus, import("./types").ProductType>>;
};
export declare function updateProductError(id: number, error: unknown): {
    type: TYPES.UPDATE_PRODUCT_ERROR;
    id: number;
    error: unknown;
};
export declare function getProductsSuccess(query: Partial<ProductQuery>, products: PartialProduct[], totalCount: number): {
    type: TYPES.GET_PRODUCTS_SUCCESS;
    products: PartialProduct[];
    query: Partial<ProductQuery<import("./types").ProductStatus, import("./types").ProductType>>;
    totalCount: number;
};
export declare function getProductsError(query: Partial<ProductQuery>, error: unknown): {
    type: TYPES.GET_PRODUCTS_ERROR;
    query: Partial<ProductQuery<import("./types").ProductStatus, import("./types").ProductType>>;
    error: unknown;
};
export declare function getProductsTotalCountSuccess(query: Partial<ProductQuery>, totalCount: number): {
    type: TYPES.GET_PRODUCTS_TOTAL_COUNT_SUCCESS;
    query: Partial<ProductQuery<import("./types").ProductStatus, import("./types").ProductType>>;
    totalCount: number;
};
export declare function getProductsTotalCountError(query: Partial<ProductQuery>, error: unknown): {
    type: TYPES.GET_PRODUCTS_TOTAL_COUNT_ERROR;
    query: Partial<ProductQuery<import("./types").ProductStatus, import("./types").ProductType>>;
    error: unknown;
};
export declare function createProduct(data: Omit<Product, ReadOnlyProperties>): Generator<unknown, Product<import("./types").ProductStatus, import("./types").ProductType>, Omit<Pick<import("@wordpress/core-data").Schema.BasePost<"view">, import("@wordpress/core-data").Schema.ViewKeys.Post>, "status"> & {
    id: number;
    name: string;
    slug: string;
    permalink: string;
    date_created: string;
    date_created_gmt: string;
    date_modified: string;
    date_modified_gmt: string;
    type: import("./types").ProductType;
    status: import("./types").ProductStatus;
    featured: boolean;
    description: string;
    short_description: string;
    sku: string;
    price: string;
    regular_price: string;
    sale_price: string;
}>;
export declare function updateProduct(id: number, data: Omit<Product, ReadOnlyProperties>): Generator<unknown, Product<import("./types").ProductStatus, import("./types").ProductType>, Omit<Pick<import("@wordpress/core-data").Schema.BasePost<"view">, import("@wordpress/core-data").Schema.ViewKeys.Post>, "status"> & {
    id: number;
    name: string;
    slug: string;
    permalink: string;
    date_created: string;
    date_created_gmt: string;
    date_modified: string;
    date_modified_gmt: string;
    type: import("./types").ProductType;
    status: import("./types").ProductStatus;
    featured: boolean;
    description: string;
    short_description: string;
    sku: string;
    price: string;
    regular_price: string;
    sale_price: string;
}>;
export declare function deleteProductSuccess(id: number, product: PartialProduct, force: boolean): {
    type: TYPES.DELETE_PRODUCT_SUCCESS;
    id: number;
    product: PartialProduct;
    force: boolean;
};
export declare function deleteProductError(id: number, error: unknown): {
    type: TYPES.DELETE_PRODUCT_ERROR;
    id: number;
    error: unknown;
};
export declare function removeProduct(id: number, force?: boolean): Generator<unknown, Product<import("./types").ProductStatus, import("./types").ProductType>, Omit<Pick<import("@wordpress/core-data").Schema.BasePost<"view">, import("@wordpress/core-data").Schema.ViewKeys.Post>, "status"> & {
    id: number;
    name: string;
    slug: string;
    permalink: string;
    date_created: string;
    date_created_gmt: string;
    date_modified: string;
    date_modified_gmt: string;
    type: import("./types").ProductType;
    status: import("./types").ProductStatus;
    featured: boolean;
    description: string;
    short_description: string;
    sku: string;
    price: string;
    regular_price: string;
    sale_price: string;
}>;
export declare type Actions = ReturnType<typeof createProductError | typeof createProductSuccess | typeof getProductSuccess | typeof getProductError | typeof getProductsSuccess | typeof getProductsError | typeof getProductsTotalCountSuccess | typeof getProductsTotalCountError | typeof updateProductError | typeof updateProductSuccess | typeof deleteProductSuccess | typeof deleteProductError>;
export declare type ActionDispatchers = DispatchFromMap<{
    createProduct: typeof createProduct;
    updateProduct: typeof updateProduct;
}>;
export {};
//# sourceMappingURL=actions.d.ts.map