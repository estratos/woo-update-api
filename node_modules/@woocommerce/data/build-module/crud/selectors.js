/**
 * External dependencies
 */
import createSelector from 'rememo';
/**
 * Internal dependencies
 */
import { getResourceName } from '../utils';
import CRUD_ACTIONS from './crud-actions';
export const getItemCreateError = (state, query) => {
    const itemQuery = getResourceName(CRUD_ACTIONS.CREATE_ITEM, query);
    return state.errors[itemQuery];
};
export const getItemDeleteError = (state, id) => {
    const itemQuery = getResourceName(CRUD_ACTIONS.DELETE_ITEM, { id });
    return state.errors[itemQuery];
};
export const getItem = (state, id) => {
    return state.data[id];
};
export const getItemError = (state, id) => {
    const itemQuery = getResourceName(CRUD_ACTIONS.GET_ITEM, { id });
    return state.errors[itemQuery];
};
export const getItems = createSelector((state, query) => {
    const itemQuery = getResourceName(CRUD_ACTIONS.GET_ITEMS, query);
    const ids = state.items[itemQuery]
        ? state.items[itemQuery].data
        : undefined;
    if (!ids) {
        return null;
    }
    if (query._fields) {
        return ids.map((id) => {
            return query._fields.reduce((item, field) => {
                return {
                    ...item,
                    [field]: state.data[id][field],
                };
            }, {});
        });
    }
    return ids
        .map((id) => {
        return state.data[id];
    })
        .filter((item) => item !== undefined);
}, (state, query) => {
    const itemQuery = getResourceName(CRUD_ACTIONS.GET_ITEMS, query);
    const ids = state.items[itemQuery]
        ? state.items[itemQuery].data
        : undefined;
    return [
        state.items[itemQuery],
        ...(ids || []).map((id) => {
            return state.data[id];
        }),
    ];
});
export const getItemsError = (state, query) => {
    const itemQuery = getResourceName(CRUD_ACTIONS.GET_ITEMS, query);
    return state.errors[itemQuery];
};
export const getItemUpdateError = (state, id) => {
    const itemQuery = getResourceName(CRUD_ACTIONS.UPDATE_ITEM, { id });
    return state.errors[itemQuery];
};
export const createSelectors = ({ resourceName, pluralResourceName, }) => {
    return {
        [`get${resourceName}`]: getItem,
        [`get${resourceName}Error`]: getItemError,
        [`get${pluralResourceName}`]: getItems,
        [`get${pluralResourceName}Error`]: getItemsError,
        [`get${resourceName}CreateError`]: getItemCreateError,
        [`get${resourceName}DeleteError`]: getItemDeleteError,
        [`get${resourceName}UpdateError`]: getItemUpdateError,
    };
};
