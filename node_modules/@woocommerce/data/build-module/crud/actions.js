/**
 * External dependencies
 */
import { addQueryArgs } from '@wordpress/url';
import { apiFetch } from '@wordpress/data-controls';
/**
 * Internal dependencies
 */
import CRUD_ACTIONS from './crud-actions';
import TYPES from './action-types';
export function createItemError(query, error) {
    return {
        type: TYPES.CREATE_ITEM_ERROR,
        query,
        error,
        errorType: CRUD_ACTIONS.CREATE_ITEM,
    };
}
export function createItemSuccess(id, item) {
    return {
        type: TYPES.CREATE_ITEM_SUCCESS,
        id,
        item,
    };
}
export function deleteItemError(id, error) {
    return {
        type: TYPES.DELETE_ITEM_ERROR,
        id,
        error,
        errorType: CRUD_ACTIONS.DELETE_ITEM,
    };
}
export function deleteItemSuccess(id, force, item) {
    return {
        type: TYPES.DELETE_ITEM_SUCCESS,
        id,
        force,
        item,
    };
}
export function getItemError(id, error) {
    return {
        type: TYPES.GET_ITEM_ERROR,
        id,
        error,
        errorType: CRUD_ACTIONS.GET_ITEM,
    };
}
export function getItemSuccess(id, item) {
    return {
        type: TYPES.GET_ITEM_SUCCESS,
        id,
        item,
    };
}
export function getItemsError(query, error) {
    return {
        type: TYPES.GET_ITEMS_ERROR,
        query,
        error,
        errorType: CRUD_ACTIONS.GET_ITEMS,
    };
}
export function getItemsSuccess(query, items) {
    return {
        type: TYPES.GET_ITEMS_SUCCESS,
        items,
        query,
    };
}
export function updateItemError(id, error) {
    return {
        type: TYPES.UPDATE_ITEM_ERROR,
        id,
        error,
        errorType: CRUD_ACTIONS.UPDATE_ITEM,
    };
}
export function updateItemSuccess(id, item) {
    return {
        type: TYPES.UPDATE_ITEM_SUCCESS,
        id,
        item,
    };
}
export const createDispatchActions = ({ namespace, resourceName, }) => {
    const createItem = function* (query) {
        try {
            const item = yield apiFetch({
                path: addQueryArgs(namespace, query),
                method: 'POST',
            });
            yield createItemSuccess(item.id, item);
            return item;
        }
        catch (error) {
            yield createItemError(query, error);
            throw error;
        }
    };
    const deleteItem = function* (id, force = true) {
        try {
            const item = yield apiFetch({
                path: addQueryArgs(`${namespace}/${id}`, { force }),
                method: 'DELETE',
            });
            yield deleteItemSuccess(id, force, item);
            return item;
        }
        catch (error) {
            yield deleteItemError(id, error);
            throw error;
        }
    };
    const updateItem = function* (id, query) {
        try {
            const item = yield apiFetch({
                path: addQueryArgs(`${namespace}/${id}`, query),
                method: 'PUT',
            });
            yield updateItemSuccess(item.id, item);
            return item;
        }
        catch (error) {
            yield updateItemError(query, error);
            throw error;
        }
    };
    return {
        [`create${resourceName}`]: createItem,
        [`delete${resourceName}`]: deleteItem,
        [`update${resourceName}`]: updateItem,
    };
};
