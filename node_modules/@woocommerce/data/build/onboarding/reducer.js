"use strict";
/**
 * External dependencies
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultState = void 0;
/**
 * Internal dependencies
 */
const action_types_1 = __importDefault(require("./action-types"));
exports.defaultState = {
    errors: {},
    freeExtensions: [],
    profileItems: {
        business_extensions: null,
        completed: null,
        industry: null,
        number_employees: null,
        other_platform: null,
        other_platform_name: null,
        product_count: null,
        product_types: null,
        revenue: null,
        selling_venues: null,
        setup_client: null,
        skipped: null,
        theme: null,
        wccom_connected: null,
        is_agree_marketing: null,
        store_email: null,
    },
    emailPrefill: '',
    paymentMethods: [],
    productTypes: [],
    requesting: {},
    taskLists: {},
};
const getUpdatedTaskLists = (taskLists, args) => {
    return Object.keys(taskLists).reduce((lists, taskListId) => {
        return Object.assign(Object.assign({}, lists), { [taskListId]: Object.assign(Object.assign({}, taskLists[taskListId]), { tasks: taskLists[taskListId].tasks.map((task) => {
                    if (args.id === task.id) {
                        return Object.assign(Object.assign({}, task), args);
                    }
                    return task;
                }) }) });
    }, Object.assign({}, taskLists));
};
const reducer = (state = exports.defaultState, action) => {
    switch (action.type) {
        case action_types_1.default.SET_PROFILE_ITEMS:
            return Object.assign(Object.assign({}, state), { profileItems: action.replace
                    ? action.profileItems
                    : Object.assign(Object.assign({}, state.profileItems), action.profileItems) });
        case action_types_1.default.SET_EMAIL_PREFILL:
            return Object.assign(Object.assign({}, state), { emailPrefill: action.emailPrefill });
        case action_types_1.default.SET_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { [action.selector]: action.error }) });
        case action_types_1.default.SET_IS_REQUESTING:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { [action.selector]: action.isRequesting }) });
        case action_types_1.default.GET_PAYMENT_METHODS_SUCCESS:
            return Object.assign(Object.assign({}, state), { paymentMethods: action.paymentMethods });
        case action_types_1.default.GET_PRODUCT_TYPES_SUCCESS:
            return Object.assign(Object.assign({}, state), { productTypes: action.productTypes });
        case action_types_1.default.GET_PRODUCT_TYPES_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { productTypes: action.error }) });
        case action_types_1.default.GET_FREE_EXTENSIONS_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { getFreeExtensions: action.error }) });
        case action_types_1.default.GET_FREE_EXTENSIONS_SUCCESS:
            return Object.assign(Object.assign({}, state), { freeExtensions: action.freeExtensions });
        case action_types_1.default.GET_TASK_LISTS_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { getTaskLists: action.error }) });
        case action_types_1.default.GET_TASK_LISTS_SUCCESS:
            return Object.assign(Object.assign({}, state), { taskLists: action.taskLists.reduce((lists, list) => {
                    return Object.assign(Object.assign({}, lists), { [list.id]: list });
                }, state.taskLists || {}) });
        case action_types_1.default.DISMISS_TASK_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { dismissTask: action.error }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isDismissed: false,
                }) });
        case action_types_1.default.DISMISS_TASK_REQUEST:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { dismissTask: true }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isDismissed: true,
                }) });
        case action_types_1.default.DISMISS_TASK_SUCCESS:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { dismissTask: false }), taskLists: getUpdatedTaskLists(state.taskLists, action.task) });
        case action_types_1.default.UNDO_DISMISS_TASK_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { undoDismissTask: action.error }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isDismissed: true,
                }) });
        case action_types_1.default.UNDO_DISMISS_TASK_REQUEST:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { undoDismissTask: true }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isDismissed: false,
                }) });
        case action_types_1.default.UNDO_DISMISS_TASK_SUCCESS:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { undoDismissTask: false }), taskLists: getUpdatedTaskLists(state.taskLists, action.task) });
        case action_types_1.default.SNOOZE_TASK_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { snoozeTask: action.error }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isSnoozed: false,
                }) });
        case action_types_1.default.SNOOZE_TASK_REQUEST:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { snoozeTask: true }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isSnoozed: true,
                }) });
        case action_types_1.default.SNOOZE_TASK_SUCCESS:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { snoozeTask: false }), taskLists: getUpdatedTaskLists(state.taskLists, action.task) });
        case action_types_1.default.UNDO_SNOOZE_TASK_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { undoSnoozeTask: action.error }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isSnoozed: true,
                }) });
        case action_types_1.default.UNDO_SNOOZE_TASK_REQUEST:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { undoSnoozeTask: true }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isSnoozed: false,
                }) });
        case action_types_1.default.UNDO_SNOOZE_TASK_SUCCESS:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { undoSnoozeTask: false }), taskLists: getUpdatedTaskLists(state.taskLists, action.task) });
        case action_types_1.default.HIDE_TASK_LIST_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { hideTaskList: action.error }), taskLists: Object.assign(Object.assign({}, state.taskLists), { [action.taskListId]: Object.assign(Object.assign({}, state.taskLists[action.taskListId]), { isHidden: false, isVisible: true }) }) });
        case action_types_1.default.HIDE_TASK_LIST_REQUEST:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { hideTaskList: true }), taskLists: Object.assign(Object.assign({}, state.taskLists), { [action.taskListId]: Object.assign(Object.assign({}, state.taskLists[action.taskListId]), { isHidden: true, isVisible: false }) }) });
        case action_types_1.default.HIDE_TASK_LIST_SUCCESS:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { hideTaskList: false }), taskLists: Object.assign(Object.assign({}, state.taskLists), { [action.taskListId]: action.taskList }) });
        case action_types_1.default.UNHIDE_TASK_LIST_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { unhideTaskList: action.error }), taskLists: Object.assign(Object.assign({}, state.taskLists), { [action.taskListId]: Object.assign(Object.assign({}, state.taskLists[action.taskListId]), { isHidden: true, isVisible: false }) }) });
        case action_types_1.default.UNHIDE_TASK_LIST_REQUEST:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { unhideTaskList: true }), taskLists: Object.assign(Object.assign({}, state.taskLists), { [action.taskListId]: Object.assign(Object.assign({}, state.taskLists[action.taskListId]), { isHidden: false, isVisible: true }) }) });
        case action_types_1.default.UNHIDE_TASK_LIST_SUCCESS:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { unhideTaskList: false }), taskLists: Object.assign(Object.assign({}, state.taskLists), { [action.taskListId]: action.taskList }) });
        case action_types_1.default.KEEP_COMPLETED_TASKS_SUCCESS:
            return Object.assign(Object.assign({}, state), { taskLists: Object.assign(Object.assign({}, state.taskLists), { [action.taskListId]: Object.assign(Object.assign({}, state.taskLists[action.taskListId]), { keepCompletedTaskList: action.keepCompletedTaskList }) }) });
        case action_types_1.default.OPTIMISTICALLY_COMPLETE_TASK_REQUEST:
            return Object.assign(Object.assign({}, state), { taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isComplete: true,
                }) });
        case action_types_1.default.VISITED_TASK:
            return Object.assign(Object.assign({}, state), { taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isVisited: true,
                }) });
        case action_types_1.default.ACTION_TASK_ERROR:
            return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { actionTask: action.error }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isActioned: false,
                }) });
        case action_types_1.default.ACTION_TASK_REQUEST:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { actionTask: true }), taskLists: getUpdatedTaskLists(state.taskLists, {
                    id: action.taskId,
                    isActioned: true,
                }) });
        case action_types_1.default.ACTION_TASK_SUCCESS:
            return Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { actionTask: false }), taskLists: getUpdatedTaskLists(state.taskLists, action.task) });
        default:
            return state;
    }
};
exports.default = reducer;
