"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Internal dependencies
 */
const action_types_1 = __importDefault(require("./action-types"));
const reducer = (state = {
    error: null,
    menuItems: [],
    favorites: [],
    requesting: {},
    persistedQuery: {},
}, { type, error, favorite, favorites, menuItems, persistedQuery }) => {
    switch (type) {
        case action_types_1.default.SET_MENU_ITEMS:
            state = Object.assign(Object.assign({}, state), { menuItems });
            break;
        case action_types_1.default.ADD_MENU_ITEMS:
            state = Object.assign(Object.assign({}, state), { menuItems: [...state.menuItems, ...menuItems] });
            break;
        case action_types_1.default.ON_HISTORY_CHANGE:
            state = Object.assign(Object.assign({}, state), { persistedQuery });
            break;
        case action_types_1.default.GET_FAVORITES_FAILURE:
            state = Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { getFavorites: false }) });
            break;
        case action_types_1.default.GET_FAVORITES_REQUEST:
            state = Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { getFavorites: true }) });
            break;
        case action_types_1.default.GET_FAVORITES_SUCCESS:
            state = Object.assign(Object.assign({}, state), { favorites, requesting: Object.assign(Object.assign({}, state.requesting), { getFavorites: false }) });
            break;
        case action_types_1.default.ADD_FAVORITE_FAILURE:
            state = Object.assign(Object.assign({}, state), { error, requesting: Object.assign(Object.assign({}, state.requesting), { addFavorite: false }) });
            break;
        case action_types_1.default.ADD_FAVORITE_REQUEST:
            state = Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { addFavorite: true }) });
            break;
        case action_types_1.default.ADD_FAVORITE_SUCCESS:
            const newFavorites = !state.favorites.includes(favorite)
                ? [...state.favorites, favorite]
                : state.favorites;
            state = Object.assign(Object.assign({}, state), { favorites: newFavorites, menuItems: state.menuItems.map((item) => {
                    if (item.id === favorite) {
                        return Object.assign(Object.assign({}, item), { menuId: 'favorites' });
                    }
                    return item;
                }), requesting: Object.assign(Object.assign({}, state.requesting), { addFavorite: false }) });
            break;
        case action_types_1.default.REMOVE_FAVORITE_FAILURE:
            state = Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { error, removeFavorite: false }) });
            break;
        case action_types_1.default.REMOVE_FAVORITE_REQUEST:
            state = Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { removeFavorite: true }) });
            break;
        case action_types_1.default.REMOVE_FAVORITE_SUCCESS:
            const filteredFavorites = state.favorites.filter((f) => f !== favorite);
            state = Object.assign(Object.assign({}, state), { favorites: filteredFavorites, menuItems: state.menuItems.map((item) => {
                    if (item.id === favorite) {
                        return Object.assign(Object.assign({}, item), { menuId: 'plugins' });
                    }
                    return item;
                }), requesting: Object.assign(Object.assign({}, state.requesting), { removeFavorite: false }) });
            break;
    }
    return state;
};
exports.default = reducer;
