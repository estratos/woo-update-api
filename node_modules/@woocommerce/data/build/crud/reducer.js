"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReducer = void 0;
const crud_actions_1 = __importDefault(require("./crud-actions"));
const utils_1 = require("../utils");
const action_types_1 = require("./action-types");
const createReducer = () => {
    const reducer = (state = {
        items: {},
        data: {},
        errors: {},
    }, payload) => {
        if (payload && 'type' in payload) {
            switch (payload.type) {
                case action_types_1.TYPES.CREATE_ITEM_ERROR:
                case action_types_1.TYPES.GET_ITEMS_ERROR:
                    return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { [(0, utils_1.getResourceName)(payload.errorType, payload.query)]: payload.error }) });
                case action_types_1.TYPES.CREATE_ITEM_SUCCESS:
                case action_types_1.TYPES.GET_ITEM_SUCCESS:
                case action_types_1.TYPES.UPDATE_ITEM_SUCCESS:
                    const itemData = state.data || {};
                    return Object.assign(Object.assign({}, state), { data: Object.assign(Object.assign({}, itemData), { [payload.id]: Object.assign(Object.assign({}, (itemData[payload.id] || {})), payload.item) }) });
                case action_types_1.TYPES.DELETE_ITEM_SUCCESS:
                    const itemIds = Object.keys(state.data);
                    const nextData = itemIds.reduce((items, id) => {
                        if (id !== payload.id.toString()) {
                            items[id] = state.data[id];
                            return items;
                        }
                        if (payload.force) {
                            return items;
                        }
                        items[id] = payload.item;
                        return items;
                    }, {});
                    return Object.assign(Object.assign({}, state), { data: nextData });
                case action_types_1.TYPES.DELETE_ITEM_ERROR:
                case action_types_1.TYPES.GET_ITEM_ERROR:
                case action_types_1.TYPES.UPDATE_ITEM_ERROR:
                    return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { [(0, utils_1.getResourceName)(payload.errorType, {
                                id: payload.id,
                            })]: payload.error }) });
                case action_types_1.TYPES.GET_ITEMS_SUCCESS:
                    const ids = [];
                    const nextResources = payload.items.reduce((result, item) => {
                        ids.push(item.id);
                        result[item.id] = Object.assign(Object.assign({}, (state.data[item.id] || {})), item);
                        return result;
                    }, {});
                    const itemQuery = (0, utils_1.getResourceName)(crud_actions_1.default.GET_ITEMS, payload.query);
                    return Object.assign(Object.assign({}, state), { items: Object.assign(Object.assign({}, state.items), { [itemQuery]: { data: ids } }), data: Object.assign(Object.assign({}, state.data), nextResources) });
                default:
                    return state;
            }
        }
        return state;
    };
    return reducer;
};
exports.createReducer = createReducer;
