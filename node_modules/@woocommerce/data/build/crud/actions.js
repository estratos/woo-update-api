"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDispatchActions = exports.updateItemSuccess = exports.updateItemError = exports.getItemsSuccess = exports.getItemsError = exports.getItemSuccess = exports.getItemError = exports.deleteItemSuccess = exports.deleteItemError = exports.createItemSuccess = exports.createItemError = void 0;
/**
 * External dependencies
 */
const url_1 = require("@wordpress/url");
const data_controls_1 = require("@wordpress/data-controls");
/**
 * Internal dependencies
 */
const crud_actions_1 = __importDefault(require("./crud-actions"));
const action_types_1 = __importDefault(require("./action-types"));
function createItemError(query, error) {
    return {
        type: action_types_1.default.CREATE_ITEM_ERROR,
        query,
        error,
        errorType: crud_actions_1.default.CREATE_ITEM,
    };
}
exports.createItemError = createItemError;
function createItemSuccess(id, item) {
    return {
        type: action_types_1.default.CREATE_ITEM_SUCCESS,
        id,
        item,
    };
}
exports.createItemSuccess = createItemSuccess;
function deleteItemError(id, error) {
    return {
        type: action_types_1.default.DELETE_ITEM_ERROR,
        id,
        error,
        errorType: crud_actions_1.default.DELETE_ITEM,
    };
}
exports.deleteItemError = deleteItemError;
function deleteItemSuccess(id, force, item) {
    return {
        type: action_types_1.default.DELETE_ITEM_SUCCESS,
        id,
        force,
        item,
    };
}
exports.deleteItemSuccess = deleteItemSuccess;
function getItemError(id, error) {
    return {
        type: action_types_1.default.GET_ITEM_ERROR,
        id,
        error,
        errorType: crud_actions_1.default.GET_ITEM,
    };
}
exports.getItemError = getItemError;
function getItemSuccess(id, item) {
    return {
        type: action_types_1.default.GET_ITEM_SUCCESS,
        id,
        item,
    };
}
exports.getItemSuccess = getItemSuccess;
function getItemsError(query, error) {
    return {
        type: action_types_1.default.GET_ITEMS_ERROR,
        query,
        error,
        errorType: crud_actions_1.default.GET_ITEMS,
    };
}
exports.getItemsError = getItemsError;
function getItemsSuccess(query, items) {
    return {
        type: action_types_1.default.GET_ITEMS_SUCCESS,
        items,
        query,
    };
}
exports.getItemsSuccess = getItemsSuccess;
function updateItemError(id, error) {
    return {
        type: action_types_1.default.UPDATE_ITEM_ERROR,
        id,
        error,
        errorType: crud_actions_1.default.UPDATE_ITEM,
    };
}
exports.updateItemError = updateItemError;
function updateItemSuccess(id, item) {
    return {
        type: action_types_1.default.UPDATE_ITEM_SUCCESS,
        id,
        item,
    };
}
exports.updateItemSuccess = updateItemSuccess;
const createDispatchActions = ({ namespace, resourceName, }) => {
    const createItem = function* (query) {
        try {
            const item = yield (0, data_controls_1.apiFetch)({
                path: (0, url_1.addQueryArgs)(namespace, query),
                method: 'POST',
            });
            yield createItemSuccess(item.id, item);
            return item;
        }
        catch (error) {
            yield createItemError(query, error);
            throw error;
        }
    };
    const deleteItem = function* (id, force = true) {
        try {
            const item = yield (0, data_controls_1.apiFetch)({
                path: (0, url_1.addQueryArgs)(`${namespace}/${id}`, { force }),
                method: 'DELETE',
            });
            yield deleteItemSuccess(id, force, item);
            return item;
        }
        catch (error) {
            yield deleteItemError(id, error);
            throw error;
        }
    };
    const updateItem = function* (id, query) {
        try {
            const item = yield (0, data_controls_1.apiFetch)({
                path: (0, url_1.addQueryArgs)(`${namespace}/${id}`, query),
                method: 'PUT',
            });
            yield updateItemSuccess(item.id, item);
            return item;
        }
        catch (error) {
            yield updateItemError(query, error);
            throw error;
        }
    };
    return {
        [`create${resourceName}`]: createItem,
        [`delete${resourceName}`]: deleteItem,
        [`update${resourceName}`]: updateItem,
    };
};
exports.createDispatchActions = createDispatchActions;
