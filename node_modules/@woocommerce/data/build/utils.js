"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.getResourceIdentifier = exports.isResourcePrefix = exports.getResourcePrefix = exports.getResourceName = void 0;
/**
 * External dependencies
 */
const url_1 = require("@wordpress/url");
const data_controls_1 = require("@wordpress/data-controls");
const controls_1 = require("./controls");
function getResourceName(prefix, identifier) {
    const identifierString = JSON.stringify(identifier, Object.keys(identifier).sort());
    return `${prefix}:${identifierString}`;
}
exports.getResourceName = getResourceName;
function getResourcePrefix(resourceName) {
    const hasPrefixIndex = resourceName.indexOf(':');
    return hasPrefixIndex < 0
        ? resourceName
        : resourceName.substring(0, hasPrefixIndex);
}
exports.getResourcePrefix = getResourcePrefix;
function isResourcePrefix(resourceName, prefix) {
    const resourcePrefix = getResourcePrefix(resourceName);
    return resourcePrefix === prefix;
}
exports.isResourcePrefix = isResourcePrefix;
function getResourceIdentifier(resourceName) {
    const identifierString = resourceName.substring(resourceName.indexOf(':') + 1);
    return JSON.parse(identifierString);
}
exports.getResourceIdentifier = getResourceIdentifier;
function* request(namespace, query) {
    const url = (0, url_1.addQueryArgs)(namespace, query);
    const isUnboundedRequest = query.per_page === -1;
    const fetch = isUnboundedRequest ? data_controls_1.apiFetch : controls_1.fetchWithHeaders;
    const response = yield fetch({
        path: url,
        method: 'GET',
    });
    if (isUnboundedRequest && !('data' in response)) {
        return { items: response, totalCount: response.length };
    }
    if (!isUnboundedRequest && 'data' in response) {
        const totalCount = parseInt(response.headers.get('x-wp-total') || '', 10);
        return { items: response.data, totalCount };
    }
}
exports.request = request;
