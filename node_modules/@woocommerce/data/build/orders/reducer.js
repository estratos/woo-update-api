"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Internal dependencies
 */
const action_types_1 = __importDefault(require("./action-types"));
const utils_1 = require("./utils");
const reducer = (state = {
    orders: {},
    ordersCount: {},
    errors: {},
    data: {},
}, payload) => {
    if (payload && 'type' in payload) {
        switch (payload.type) {
            case action_types_1.default.GET_ORDER_SUCCESS:
                const orderData = state.data || {};
                return Object.assign(Object.assign({}, state), { data: Object.assign(Object.assign({}, orderData), { [payload.id]: Object.assign(Object.assign({}, (orderData[payload.id] || {})), payload.order) }) });
            case action_types_1.default.GET_ORDERS_SUCCESS:
                const ids = [];
                const nextOrders = payload.orders.reduce((result, order) => {
                    ids.push(order.id);
                    result[order.id] = Object.assign(Object.assign({}, (state.data[order.id] || {})), order);
                    return result;
                }, {});
                const resourceName = (0, utils_1.getOrderResourceName)(payload.query);
                return Object.assign(Object.assign({}, state), { orders: Object.assign(Object.assign({}, state.orders), { [resourceName]: { data: ids } }), data: Object.assign(Object.assign({}, state.data), nextOrders) });
            case action_types_1.default.GET_ORDERS_TOTAL_COUNT_SUCCESS:
                const totalResourceName = (0, utils_1.getTotalOrderCountResourceName)(payload.query);
                return Object.assign(Object.assign({}, state), { ordersCount: Object.assign(Object.assign({}, state.ordersCount), { [totalResourceName]: payload.totalCount }) });
            case action_types_1.default.GET_ORDER_ERROR:
            case action_types_1.default.GET_ORDERS_ERROR:
            case action_types_1.default.GET_ORDERS_TOTAL_COUNT_ERROR:
                return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { [(0, utils_1.getOrderResourceName)(payload.query)]: payload.error }) });
            default:
                return state;
        }
    }
    return state;
};
exports.default = reducer;
