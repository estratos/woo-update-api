"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withCurrentUserHydration = void 0;
/**
 * External dependencies
 */
const compose_1 = require("@wordpress/compose");
const data_1 = require("@wordpress/data");
const element_1 = require("@wordpress/element");
/**
 * Internal dependencies
 */
const constants_1 = require("./constants");
/**
 * Higher-order component used to hydrate current user data.
 *
 * @param {Object} currentUser Current user object in the same format as the WP REST API returns.
 */
const withCurrentUserHydration = (currentUser) => (0, compose_1.createHigherOrderComponent)((OriginalComponent) => (props) => {
    const userRef = (0, element_1.useRef)(currentUser);
    // Use currentUser to hydrate calls to @wordpress/core-data's getCurrentUser().
    // @ts-expect-error // @ts-expect-error registry is not defined in the wp.data typings
    (0, data_1.useSelect)((select, registry) => {
        if (!userRef.current) {
            return;
        }
        const { isResolving, hasFinishedResolution } = select(constants_1.STORE_NAME);
        const { startResolution, finishResolution, receiveCurrentUser, } = registry.dispatch(constants_1.STORE_NAME);
        if (!isResolving('getCurrentUser') &&
            !hasFinishedResolution('getCurrentUser')) {
            startResolution('getCurrentUser', []);
            receiveCurrentUser(userRef.current);
            finishResolution('getCurrentUser', []);
        }
    });
    return (0, element_1.createElement)(OriginalComponent, Object.assign({}, props));
}, 'withCurrentUserHydration');
exports.withCurrentUserHydration = withCurrentUserHydration;
