"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUserPreferences = void 0;
/**
 * External dependencies
 */
const lodash_1 = require("lodash");
const data_1 = require("@wordpress/data");
/**
 * Internal dependencies
 */
const constants_1 = require("./constants");
/**
 * Retrieve and decode the user's WooCommerce meta values.
 *
 * @param {Object} user WP User object.
 * @return {Object} User's WooCommerce preferences.
 */
const getWooCommerceMeta = (user) => {
    const wooMeta = user.woocommerce_meta || {};
    const userData = (0, lodash_1.mapValues)(wooMeta, (data, key) => {
        if (!data || data.length === 0) {
            return '';
        }
        try {
            return JSON.parse(data);
        }
        catch (e) {
            if (e instanceof Error) {
                /* eslint-disable no-console */
                console.error(`Error parsing value '${data}' for ${key}`, e.message);
                /* eslint-enable no-console */
            }
            else {
                /* eslint-disable no-console */
                console.error(`Unexpected Error parsing value '${data}' for ${key} ${e}`);
                /* eslint-enable no-console */
            }
            return '';
        }
    });
    return userData;
};
// Create wrapper for updating user's `woocommerce_meta`.
function updateUserPrefs(receiveCurrentUser, user, saveUser, getLastEntitySaveError, userPrefs) {
    return __awaiter(this, void 0, void 0, function* () {
        // @todo Handle unresolved getCurrentUser() here.
        // Prep fields for update.
        const metaData = (0, lodash_1.mapValues)(userPrefs, JSON.stringify);
        if (Object.keys(metaData).length === 0) {
            return {
                error: new Error('Invalid woocommerce_meta data for update.'),
                updatedUser: undefined,
            };
        }
        // Optimistically propagate new woocommerce_meta to the store for instant update.
        receiveCurrentUser(Object.assign(Object.assign({}, user), { woocommerce_meta: Object.assign(Object.assign({}, user.woocommerce_meta), metaData) }));
        // Use saveUser() to update WooCommerce meta values.
        const updatedUser = yield saveUser({
            id: user.id,
            woocommerce_meta: metaData,
        });
        if (undefined === updatedUser) {
            // Return the encountered error to the caller.
            const error = getLastEntitySaveError('root', 'user', user.id);
            return {
                error,
                updatedUser,
            };
        }
        // Decode the WooCommerce meta after save.
        const updatedUserResponse = Object.assign(Object.assign({}, updatedUser), { woocommerce_meta: getWooCommerceMeta(updatedUser) });
        return {
            updatedUser: updatedUserResponse,
        };
    });
}
/**
 * Custom react hook for retrieving thecurrent user's WooCommerce preferences.
 *
 * This is a wrapper around @wordpress/core-data's getCurrentUser() and saveUser().
 */
const useUserPreferences = () => {
    // Get our dispatch methods now - this can't happen inside the callback below.
    const dispatch = (0, data_1.useDispatch)(constants_1.STORE_NAME);
    const { addEntities, receiveCurrentUser, saveEntityRecord } = dispatch;
    // @ts-expect-error WP 5.3.x doesn't have the User entity defined.
    let { saveUser } = dispatch;
    const userData = (0, data_1.useSelect)((select) => {
        const { getCurrentUser, getEntity, getEntityRecord, 
        // @ts-expect-error type definition is missing.
        getLastEntitySaveError, 
        // @ts-expect-error type definition is missing.
        hasStartedResolution, 
        // @ts-expect-error type definition is missing.
        hasFinishedResolution, } = select(constants_1.STORE_NAME);
        return {
            isRequesting: hasStartedResolution('getCurrentUser') &&
                !hasFinishedResolution('getCurrentUser'),
            user: getCurrentUser(),
            getCurrentUser,
            getEntity,
            getEntityRecord,
            getLastEntitySaveError,
        };
    });
    const updateUserPreferences = (userPrefs) => {
        // WP 5.3.x doesn't have the User entity defined.
        if (typeof saveUser !== 'function') {
            // Polyfill saveUser() - wrapper of saveEntityRecord.
            saveUser = (userToSave) => __awaiter(void 0, void 0, void 0, function* () {
                const entityDefined = Boolean(userData.getEntity('root', 'user'));
                if (!entityDefined) {
                    // Add the User entity so saveEntityRecord works.
                    yield addEntities([
                        {
                            name: 'user',
                            kind: 'root',
                            baseURL: '/wp/v2/users',
                            plural: 'users',
                        },
                    ]);
                }
                // Fire off the save action.
                yield saveEntityRecord('root', 'user', userToSave);
                // Respond with the updated user.
                return userData.getEntityRecord('root', 'user', userToSave.id);
            });
        }
        // Get most recent user before update.
        const currentUser = userData.getCurrentUser();
        return updateUserPrefs(receiveCurrentUser, currentUser, saveUser, userData.getLastEntitySaveError, userPrefs);
    };
    const userPreferences = userData.user
        ? getWooCommerceMeta(userData.user)
        : {};
    return Object.assign(Object.assign({ isRequesting: userData.isRequesting }, userPreferences), { updateUserPreferences });
};
exports.useUserPreferences = useUserPreferences;
