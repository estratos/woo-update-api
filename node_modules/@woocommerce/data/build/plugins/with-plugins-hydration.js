"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withPluginsHydration = void 0;
/**
 * External dependencies
 */
const compose_1 = require("@wordpress/compose");
const data_1 = require("@wordpress/data");
const element_1 = require("@wordpress/element");
/**
 * Internal dependencies
 */
const constants_1 = require("./constants");
const withPluginsHydration = (data) => (0, compose_1.createHigherOrderComponent)((OriginalComponent) => (props) => {
    const dataRef = (0, element_1.useRef)(data);
    (0, data_1.useSelect)(
    // @ts-expect-error registry is not defined in the wp.data typings
    (select, registry) => {
        if (!dataRef.current) {
            return;
        }
        const { isResolving, hasFinishedResolution } = select(constants_1.STORE_NAME);
        const { startResolution, finishResolution, updateActivePlugins, updateInstalledPlugins, updateIsJetpackConnected, } = registry.dispatch(constants_1.STORE_NAME);
        if (!isResolving('getActivePlugins', []) &&
            !hasFinishedResolution('getActivePlugins', [])) {
            startResolution('getActivePlugins', []);
            startResolution('getInstalledPlugins', []);
            startResolution('isJetpackConnected', []);
            updateActivePlugins(dataRef.current.activePlugins, true);
            updateInstalledPlugins(dataRef.current.installedPlugins, true);
            updateIsJetpackConnected(dataRef.current.jetpackStatus &&
                dataRef.current.jetpackStatus.isActive
                ? true
                : false);
            finishResolution('getActivePlugins', []);
            finishResolution('getInstalledPlugins', []);
            finishResolution('isJetpackConnected', []);
        }
    }, []);
    return (0, element_1.createElement)(OriginalComponent, Object.assign({}, props));
}, 'withPluginsHydration');
exports.withPluginsHydration = withPluginsHydration;
