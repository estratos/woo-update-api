"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const lodash_1 = require("lodash");
/**
 * Internal dependencies
 */
const action_types_1 = require("./action-types");
const reducer = (state = {
    active: [],
    installed: [],
    requesting: {},
    errors: {},
    jetpackConnectUrls: {},
    recommended: {},
}, payload) => {
    if (payload && 'type' in payload) {
        switch (payload.type) {
            case action_types_1.ACTION_TYPES.UPDATE_ACTIVE_PLUGINS:
                state = Object.assign(Object.assign({}, state), { active: payload.replace
                        ? payload.active
                        : (0, lodash_1.concat)(state.active, payload.active), requesting: Object.assign(Object.assign({}, state.requesting), { getActivePlugins: false, activatePlugins: false }), errors: Object.assign(Object.assign({}, state.errors), { getActivePlugins: false, activatePlugins: false }) });
                break;
            case action_types_1.ACTION_TYPES.UPDATE_INSTALLED_PLUGINS:
                state = Object.assign(Object.assign({}, state), { installed: payload.replace
                        ? payload.installed
                        : (0, lodash_1.concat)(state.installed, payload.installed), requesting: Object.assign(Object.assign({}, state.requesting), { getInstalledPlugins: false, installPlugins: false }), errors: Object.assign(Object.assign({}, state.errors), { getInstalledPlugins: false, installPlugin: false }) });
                break;
            case action_types_1.ACTION_TYPES.SET_IS_REQUESTING:
                state = Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { [payload.selector]: payload.isRequesting }) });
                break;
            case action_types_1.ACTION_TYPES.SET_ERROR:
                state = Object.assign(Object.assign({}, state), { requesting: Object.assign(Object.assign({}, state.requesting), { [payload.selector]: false }), errors: Object.assign(Object.assign({}, state.errors), { [payload.selector]: payload.error }) });
                break;
            case action_types_1.ACTION_TYPES.UPDATE_JETPACK_CONNECTION:
                state = Object.assign(Object.assign({}, state), { jetpackConnection: payload.jetpackConnection });
                break;
            case action_types_1.ACTION_TYPES.UPDATE_JETPACK_CONNECT_URL:
                state = Object.assign(Object.assign({}, state), { jetpackConnectUrls: Object.assign(Object.assign({}, state.jetpackConnectUrls), { [payload.redirectUrl]: payload.jetpackConnectUrl }) });
                break;
            case action_types_1.ACTION_TYPES.SET_PAYPAL_ONBOARDING_STATUS:
                state = Object.assign(Object.assign({}, state), { paypalOnboardingStatus: payload.paypalOnboardingStatus });
                break;
            case action_types_1.ACTION_TYPES.SET_RECOMMENDED_PLUGINS:
                state = Object.assign(Object.assign({}, state), { recommended: Object.assign(Object.assign({}, state.recommended), { [payload.recommendedType]: payload.plugins }) });
                break;
        }
    }
    return state;
};
exports.default = reducer;
