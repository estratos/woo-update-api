"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * External dependencies
 */
const lodash_1 = require("lodash");
/**
 * Internal dependencies
 */
const action_types_1 = __importDefault(require("./action-types"));
const utils_1 = require("../utils");
const updateGroupDataInNewState = (newState, { group, groupIds, data, time, error }) => {
    groupIds.forEach((id) => {
        newState[(0, utils_1.getResourceName)(group, id)] = {
            data: data[id],
            lastReceived: time,
            error,
        };
    });
    return newState;
};
const receiveSettings = (state = {}, { type, group, data, error, time, isRequesting }) => {
    const newState = {};
    switch (type) {
        case action_types_1.default.SET_IS_REQUESTING:
            state = Object.assign(Object.assign({}, state), { [group]: Object.assign(Object.assign({}, state[group]), { isRequesting }) });
            break;
        case action_types_1.default.CLEAR_IS_DIRTY:
            state = Object.assign(Object.assign({}, state), { [group]: Object.assign(Object.assign({}, state[group]), { dirty: [] }) });
            break;
        case action_types_1.default.UPDATE_SETTINGS_FOR_GROUP:
        case action_types_1.default.UPDATE_ERROR_FOR_GROUP:
            const groupIds = data ? Object.keys(data) : [];
            if (data === null) {
                state = Object.assign(Object.assign({}, state), { [group]: {
                        data: state[group] ? state[group].data : [],
                        error,
                        lastReceived: time,
                    } });
            }
            else {
                state = Object.assign(Object.assign(Object.assign({}, state), { [group]: {
                        data: state[group] && state[group].data
                            ? [...state[group].data, ...groupIds]
                            : groupIds,
                        error,
                        lastReceived: time,
                        isRequesting: false,
                        dirty: state[group] && state[group].dirty
                            ? (0, lodash_1.union)(state[group].dirty, groupIds)
                            : groupIds,
                    } }), updateGroupDataInNewState(newState, {
                    group,
                    groupIds,
                    data,
                    time,
                    error,
                }));
            }
            break;
        case action_types_1.default.CLEAR_SETTINGS:
            state = {};
    }
    return state;
};
exports.default = receiveSettings;
