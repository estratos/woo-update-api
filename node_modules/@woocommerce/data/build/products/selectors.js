"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeleteProductError = exports.getUpdateProductError = exports.getCreateProductError = exports.getProductsError = exports.getProductsTotalCount = exports.getProducts = void 0;
/**
 * External dependencies
 */
const rememo_1 = __importDefault(require("rememo"));
/**
 * Internal dependencies
 */
const utils_1 = require("./utils");
exports.getProducts = (0, rememo_1.default)((state, query, defaultValue = undefined) => {
    const resourceName = (0, utils_1.getProductResourceName)(query);
    const ids = state.products[resourceName]
        ? state.products[resourceName].data
        : undefined;
    if (!ids) {
        return defaultValue;
    }
    if (query._fields) {
        return ids.map((id) => {
            return query._fields.reduce((product, field) => {
                return Object.assign(Object.assign({}, product), { [field]: state.data[id][field] });
            }, {});
        });
    }
    return ids.map((id) => {
        return state.data[id];
    });
}, (state, query) => {
    const resourceName = (0, utils_1.getProductResourceName)(query);
    const ids = state.products[resourceName]
        ? state.products[resourceName].data
        : undefined;
    return [
        state.products[resourceName],
        ...(ids || []).map((id) => {
            return state.data[id];
        }),
    ];
});
const getProductsTotalCount = (state, query, defaultValue = undefined) => {
    const resourceName = (0, utils_1.getTotalProductCountResourceName)(query);
    const totalCount = state.productsCount.hasOwnProperty(resourceName)
        ? state.productsCount[resourceName]
        : defaultValue;
    return totalCount;
};
exports.getProductsTotalCount = getProductsTotalCount;
const getProductsError = (state, query) => {
    const resourceName = (0, utils_1.getProductResourceName)(query);
    return state.errors[resourceName];
};
exports.getProductsError = getProductsError;
const getCreateProductError = (state, query) => {
    const resourceName = (0, utils_1.getProductResourceName)(query);
    return state.errors[resourceName];
};
exports.getCreateProductError = getCreateProductError;
const getUpdateProductError = (state, id, query) => {
    const resourceName = (0, utils_1.getProductResourceName)(query);
    return state.errors[`update/${id}/${resourceName}`];
};
exports.getUpdateProductError = getUpdateProductError;
const getDeleteProductError = (state, id) => {
    return state.errors[`delete/${id}`];
};
exports.getDeleteProductError = getDeleteProductError;
