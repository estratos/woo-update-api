"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Internal dependencies
 */
const action_types_1 = __importDefault(require("./action-types"));
const utils_1 = require("./utils");
const reducer = (state = {
    products: {},
    productsCount: {},
    errors: {},
    data: {},
}, payload) => {
    if (payload && 'type' in payload) {
        switch (payload.type) {
            case action_types_1.default.CREATE_PRODUCT_SUCCESS:
            case action_types_1.default.GET_PRODUCT_SUCCESS:
            case action_types_1.default.UPDATE_PRODUCT_SUCCESS:
                const productData = state.data || {};
                return Object.assign(Object.assign({}, state), { data: Object.assign(Object.assign({}, productData), { [payload.id]: Object.assign(Object.assign({}, (productData[payload.id] || {})), payload.product) }) });
            case action_types_1.default.GET_PRODUCTS_SUCCESS:
                const ids = [];
                const nextProducts = payload.products.reduce((result, product) => {
                    ids.push(product.id);
                    result[product.id] = Object.assign(Object.assign({}, (state.data[product.id] || {})), product);
                    return result;
                }, {});
                const resourceName = (0, utils_1.getProductResourceName)(payload.query);
                return Object.assign(Object.assign({}, state), { products: Object.assign(Object.assign({}, state.products), { [resourceName]: { data: ids } }), data: Object.assign(Object.assign({}, state.data), nextProducts) });
            case action_types_1.default.GET_PRODUCTS_TOTAL_COUNT_SUCCESS:
                const totalResourceName = (0, utils_1.getTotalProductCountResourceName)(payload.query);
                return Object.assign(Object.assign({}, state), { productsCount: Object.assign(Object.assign({}, state.productsCount), { [totalResourceName]: payload.totalCount }) });
            case action_types_1.default.GET_PRODUCT_ERROR:
            case action_types_1.default.GET_PRODUCTS_ERROR:
            case action_types_1.default.GET_PRODUCTS_TOTAL_COUNT_ERROR:
            case action_types_1.default.CREATE_PRODUCT_ERROR:
                return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { [(0, utils_1.getProductResourceName)(payload.query)]: payload.error }) });
            case action_types_1.default.UPDATE_PRODUCT_ERROR:
                return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { [`update/${payload.id}`]: payload.error }) });
            case action_types_1.default.DELETE_PRODUCT_ERROR:
                return Object.assign(Object.assign({}, state), { errors: Object.assign(Object.assign({}, state.errors), { [`delete/${payload.id}`]: payload.error }) });
            case action_types_1.default.DELETE_PRODUCT_SUCCESS:
                const prData = state.data || {};
                return Object.assign(Object.assign({}, state), { data: Object.assign(Object.assign({}, prData), { [payload.id]: Object.assign(Object.assign(Object.assign({}, (prData[payload.id] || {})), payload.product), { status: payload.force ? 'deleted' : 'trash' }) }) });
            default:
                return state;
        }
    }
    return state;
};
exports.default = reducer;
