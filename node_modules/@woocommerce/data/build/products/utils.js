"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTotalProductCountResourceName = exports.getProductResourceName = void 0;
/**
 * Internal dependencies
 */
const utils_1 = require("../utils");
const PRODUCT_PREFIX = 'product';
/**
 * Generate a resource name for products.
 *
 * @param {Object} query Query for products.
 * @return {string} Resource name for products.
 */
function getProductResourceName(query) {
    return (0, utils_1.getResourceName)(PRODUCT_PREFIX, query);
}
exports.getProductResourceName = getProductResourceName;
/**
 * Generate a resource name for product totals count.
 *
 * It omits query parameters from the identifier that don't affect
 * totals values like pagination and response field filtering.
 *
 * @param {Object} query Query for product totals count.
 * @return {string} Resource name for product totals.
 */
function getTotalProductCountResourceName(query) {
    const { _fields, page, per_page } = query, totalsQuery = __rest(query, ["_fields", "page", "per_page"]);
    return getProductResourceName(totalsQuery);
}
exports.getTotalProductCountResourceName = getTotalProductCountResourceName;
