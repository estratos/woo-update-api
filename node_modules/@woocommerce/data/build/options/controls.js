"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.controls = exports.batchFetch = void 0;
/**
 * External dependencies
 */
const data_controls_1 = require("@wordpress/data-controls");
const api_fetch_1 = __importDefault(require("@wordpress/api-fetch"));
/**
 * Internal dependencies
 */
const constants_1 = require("../constants");
let optionNames = [];
const fetches = {};
const batchFetch = (optionName) => {
    return {
        type: 'BATCH_FETCH',
        optionName,
    };
};
exports.batchFetch = batchFetch;
exports.controls = Object.assign(Object.assign({}, data_controls_1.controls), { BATCH_FETCH({ optionName }) {
        optionNames.push(optionName);
        return new Promise((resolve) => {
            setTimeout(function () {
                if (fetches.hasOwnProperty(optionName) &&
                    fetches[optionName]) {
                    return fetches[optionName].then((result) => {
                        resolve(result);
                    });
                }
                // Get unique option names.
                const names = [...new Set(optionNames)].join(',');
                // Send request for a group of options.
                const url = constants_1.WC_ADMIN_NAMESPACE + '/options?options=' + names;
                const fetch = (0, api_fetch_1.default)({ path: url });
                fetch.then((result) => resolve(result));
                optionNames.forEach((option) => {
                    fetches[option] = fetch;
                    fetches[option].then(() => {
                        // Delete the fetch after to allow wp data to handle cache invalidation.
                        delete fetches[option];
                    });
                });
                // Clear option names after we've sent the request for a group of options.
                optionNames = [];
            }, 1);
        });
    } });
