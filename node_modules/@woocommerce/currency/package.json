{
  "name": "@woocommerce/currency",
  "version": "4.2.0",
  "description": "WooCommerce currency utilities.",
  "author": "Automattic",
  "license": "GPL-3.0-or-later",
  "keywords": [
    "wordpress",
    "woocommerce",
    "currency"
  ],
  "homepage": "https://github.com/woocommerce/woocommerce/tree/trunk/packages/js/currency/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/woocommerce/woocommerce.git"
  },
  "bugs": {
    "url": "https://github.com/woocommerce/woocommerce/issues"
  },
  "main": "build/index.js",
  "module": "build-module/index.js",
  "types": "build-types",
  "react-native": "src/index",
  "dependencies": {
    "@woocommerce/number": "2.4.0",
    "@wordpress/deprecated": "^2.12.3",
    "@wordpress/element": "^4.1.1",
    "@wordpress/html-entities": "^3.3.1",
    "@wordpress/i18n": "^3.20.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "devDependencies": {
    "@babel/core": "^7.17.5",
    "@woocommerce/eslint-plugin": "2.2.0",
    "eslint": "^8.12.0",
    "jest": "^27.5.1",
    "jest-cli": "^27.5.1",
    "require-turbo": "0.0.0",
    "rimraf": "^3.0.2",
    "ts-jest": "^27.1.3",
    "typescript": "^4.6.2"
  },
  "lint-staged": {
    "*.(t|j)s?(x)": [
      "pnpm lint:fix",
      "pnpm test-staged"
    ]
  },
  "scripts": {
    "changelog": "composer exec -- changelogger",
    "clean": "pnpm exec rimraf tsconfig.tsbuildinfo build build-*",
    "build": "node ./node_modules/require-turbo && tsc --build ./tsconfig.json ./tsconfig-cjs.json",
    "start": "tsc --build --watch",
    "lint": "node ./node_modules/require-turbo && eslint src",
    "lint:fix": "eslint src --fix",
    "test": "node ./node_modules/require-turbo && jest --config ./jest.config.json",
    "test-staged": "jest --bail --config ./jest.config.json --findRelatedTests"
  },
  "readme": "# Currency\n\nA collection of utilities to display and work with currency values.\n\n## Installation\n\nInstall the module\n\n```bash\npnpm install @woocommerce/currency --save\n```\n\n_This package assumes that your code will run in an **ES2015+** environment. If you're using an environment that has limited or no support for ES2015+ such as lower versions of IE then using [core-js](https://github.com/zloirock/core-js) or [@babel/polyfill](https://babeljs.io/docs/en/next/babel-polyfill) will add support for these methods. Learn more about it in [Babel docs](https://babeljs.io/docs/en/next/caveats)._\n\n## Usage\n\n```JS\nimport CurrencyFactory from '@woocommerce/currency';\n\nconst storeCurrency = CurrencyFactory(); // pass store settings into constructor.\n\n// Formats money with a given currency symbol. Uses site's currency settings for formatting,\n// from the settings api. Defaults to symbol=`$`, precision=2, decimalSeparator=`.`, thousandSeparator=`,`\nconst total = storeCurrency.formatAmount( 20.923 ); // '$20.92'\n\n// Get the rounded decimal value of a number at the precision used for the current currency,\n// from the settings api. Defaults to 2.\nconst total = storeCurrency.formatDecimal( '6.2892' ); // 6.29\n\n// Get the string representation of a floating point number to the precision used by the current\n// currency. This is different from `formatAmount` by not returning the currency symbol.\nconst total = storeCurrency.formatDecimalString( 1088.478 ); // '1088.48'\n```\n"
}