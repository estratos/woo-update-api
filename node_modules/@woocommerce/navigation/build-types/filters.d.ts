/**
 * Collapse an array of filter values with subFilters into a 1-dimensional array.
 *
 * @param {Array} filters Set of filters with possible subfilters.
 * @return {Array} Flattened array of all filters.
 */
export function flattenFilters(filters: any[]): any[];
/**
 * Describe activeFilter object.
 *
 * @typedef {Object} activeFilter
 * @property {string} key    - filter key.
 * @property {string} [rule] - a modifying rule for a filter, eg 'includes' or 'is_not'.
 * @property {string} value  - filter value(s).
 */
/**
 * Given a query object, return an array of activeFilters, if any.
 *
 * @param {Object} query  - query oject
 * @param {Object} config - config object
 * @return {Array} - array of activeFilters
 */
export function getActiveFiltersFromQuery(query: Object, config: Object): any[];
/**
 * Get the default option's value from the configuration object for a given filter. The first
 * option is used as default if no `defaultOption` is provided.
 *
 * @param {Object} config  - a filter config object.
 * @param {Array}  options - select options.
 * @return {string|undefined}  - the value of the default option.
 */
export function getDefaultOptionValue(config: Object, options: any[]): string | undefined;
/**
 * Given activeFilters, create a new query object to update the url. Use previousFilters to
 * Remove unused params.
 *
 * @param {Array}  activeFilters - Array of activeFilters shown in the UI
 * @param {Object} query         - the current url query object
 * @param {Object} config        - config object
 * @return {Object} - query object representing the new parameters
 */
export function getQueryFromActiveFilters(activeFilters: any[], query: Object, config: Object): Object;
/**
 * Get the url query key from the filter key and rule.
 *
 * @param {string} key  - filter key.
 * @param {string} rule - filter rule.
 * @return {string} - url query key.
 */
export function getUrlKey(key: string, rule: string): string;
/**
 * Describe activeFilter object.
 */
export type activeFilter = {
    /**
     * - filter key.
     */
    key: string;
    /**
     * - a modifying rule for a filter, eg 'includes' or 'is_not'.
     */
    rule?: string | undefined;
    /**
     * - filter value(s).
     */
    value: string;
};
//# sourceMappingURL=filters.d.ts.map