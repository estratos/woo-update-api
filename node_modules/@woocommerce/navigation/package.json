{
  "name": "@woocommerce/navigation",
  "version": "8.1.0",
  "description": "WooCommerce navigation utilities.",
  "author": "Automattic",
  "license": "GPL-3.0-or-later",
  "keywords": [
    "wordpress",
    "woocommerce",
    "navigation"
  ],
  "homepage": "https://github.com/woocommerce/woocommerce/tree/trunk/packages/js/navigation/README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/woocommerce/woocommerce.git"
  },
  "bugs": {
    "url": "https://github.com/woocommerce/woocommerce/issues"
  },
  "main": "build/index.js",
  "module": "build-module/index.js",
  "types": "build-types",
  "react-native": "src/index",
  "dependencies": {
    "@wordpress/api-fetch": "^6.0.1",
    "@wordpress/components": "^19.5.0",
    "@wordpress/compose": "^5.1.2",
    "@wordpress/element": "^4.1.1",
    "@wordpress/hooks": "^3.5.0",
    "@wordpress/notices": "^3.3.2",
    "@wordpress/url": "^3.4.1",
    "history": "^5.3.0",
    "qs": "^6.10.3"
  },
  "peerDependencies": {
    "lodash": "^4.17.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "devDependencies": {
    "@babel/core": "^7.17.5",
    "@woocommerce/eslint-plugin": "2.2.0",
    "eslint": "^8.12.0",
    "@babel/runtime": "^7.17.2",
    "jest": "^27.5.1",
    "jest-cli": "^27.5.1",
    "require-turbo": "0.0.0",
    "rimraf": "^3.0.2",
    "ts-jest": "^27.1.3",
    "typescript": "^4.6.2"
  },
  "lint-staged": {
    "*.(t|j)s?(x)": [
      "pnpm lint:fix",
      "pnpm test-staged"
    ]
  },
  "scripts": {
    "changelog": "composer exec -- changelogger",
    "clean": "pnpm exec rimraf tsconfig.tsbuildinfo build build-*",
    "build": "node ./node_modules/require-turbo && tsc --build ./tsconfig.json ./tsconfig-cjs.json",
    "start": "tsc --build --watch",
    "lint": "node ./node_modules/require-turbo && eslint src",
    "lint:fix": "eslint src --fix",
    "test": "node ./node_modules/require-turbo && jest --config ./jest.config.json",
    "test-staged": "jest --bail --config ./jest.config.json --findRelatedTests"
  },
  "readme": "# Navigation\n\nA collection of navigation-related functions for handling query parameter objects, serializing query parameters, updating query parameters, and triggering path changes.\n\n## Installation\n\nInstall the module\n\n```bash\npnpm install @woocommerce/navigation --save\n```\n\n## Usage\n\n### getHistory\n\nA single history object used to perform path changes. This needs to be passed into ReactRouter to use the other path functions from this library.\n\n```jsx\nimport { getHistory } from '@woocommerce/navigation';\n\nrender() {\n\treturn (\n\t\t<Router history={ getHistory() }>\n\t\t\t…\n\t\t</Router>\n\t);\n}\n```\n\n### getPath() ⇒ <code>String</code>\nGet the current path from history.\n\n**Returns**: <code>String</code> - Current path.\n\n### getTimeRelatedQuery(query) ⇒ <code>Object</code>\nGets time related parameters from a query.\n\n**Returns**: <code>Object</code> - Object containing the time related queries.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| query | <code>Object</code> | Query containing the parameters. |\n\n### getIdsFromQuery(queryString) ⇒ <code>Array</code>\nGet an array of IDs from a comma-separated query parameter.\n\n**Returns**: <code>Array</code> - List of IDs converted to an array of unique integers.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| queryString | <code>string</code> | string value extracted from URL. |\n\n### getNewPath(query, path, currentQuery) ⇒ <code>String</code>\nReturn a URL with set query parameters.\n\n**Returns**: <code>String</code> - Updated URL merging query params into existing params.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| query | <code>Object</code> | object of params to be updated. |\n| path | <code>String</code> | Relative path (defaults to current path). |\n| currentQuery | <code>Object</code> | object of current query params (defaults to current querystring). |\n\n### getQuery() ⇒ <code>Object</code>\nGet the current query string, parsed into an object, from history.\n\n**Returns**: <code>Object</code> - Current query object, defaults to empty object.\n\n### onQueryChange(param, path, query) ⇒ <code>function</code>\nThis function returns an event handler for the given `param`\n\n**Returns**: <code>function</code> - A callback which will update `param` to the passed value when called.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| param | <code>string</code> | The parameter in the querystring which should be updated (ex `page`, `per_page`) |\n| path | <code>string</code> | Relative path (defaults to current path). |\n| query | <code>string</code> | object of current query params (defaults to current querystring). |\n\n### updateQueryString(query, path, currentQuery)\nUpdates the query parameters of the current page.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| query | <code>Object</code> | object of params to be updated. |\n| path | <code>String</code> | Relative path (defaults to current path). |\n| currentQuery | <code>Object</code> | object of current query params (defaults to current querystring). |\n\n### flattenFilters(filters) ⇒ <code>Array</code>\nCollapse an array of filter values with subFilters into a 1-dimensional array.\n\n**Returns**: <code>Array</code> - Flattened array of all filters.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| filters | <code>Array</code> | Set of filters with possible subfilters. |\n\n### getActiveFiltersFromQuery(query, config) ⇒ <code>Array.&lt;activeFilters&gt;</code>\nGiven a query object, return an array of activeFilters, if any.\n\n**Returns**: <code>Array.&lt;activeFilters&gt;</code> - - array of activeFilters\n\n| Param | Type | Description |\n| --- | --- | --- |\n| query | <code>object</code> | query oject |\n| config | <code>object</code> | config object |\n\n### getDefaultOptionValue(config, options) ⇒ <code>string</code> \\| <code>undefined</code>\nGet the default option's value from the configuration object for a given filter. The first option is used as default if no <code>defaultOption</code> is provided.\n\n**Returns**: <code>string</code> \\| <code>undefined</code> - - the value of the default option.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| config | <code>object</code> | a filter config object. |\n| options | <code>array</code> | select options. |\n\n### getQueryFromActiveFilters(activeFilters, query, config) ⇒ <code>object</code>\nGiven activeFilters, create a new query object to update the url. Use previousFilters to\nRemove unused params.\n\n**Returns**: <code>object</code> - - query object representing the new parameters\n\n| Param | Type | Description |\n| --- | --- | --- |\n| activeFilters | <code>Array.&lt;activeFilters&gt;</code> | activeFilters shown in the UI |\n| query | <code>object</code> | the current url query object |\n| config | <code>object</code> | config object |\n\n### getUrlKey(key, rule) ⇒ <code>string</code>\nGet the url query key from the filter key and rule.\n\n**Returns**: <code>string</code> - - url query key.\n\n| Param | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | filter key. |\n| rule | <code>string</code> | filter rule. |\n\n### activeFilter : <code>Object</code>\nDescribe activeFilter object.\n\n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | filter key. |\n| [rule] | <code>string</code> | a modifying rule for a filter, eg 'includes' or 'is_not'. |\n| value | <code>string</code> | filter value(s). |\n"
}