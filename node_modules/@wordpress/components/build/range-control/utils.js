"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floatClamp = floatClamp;
exports.useControlledRangeValue = useControlledRangeValue;
exports.useDebouncedHoverInteraction = useDebouncedHoverInteraction;

var _element = require("@wordpress/element");

var _hooks = require("../utils/hooks");

var _math = require("../utils/math");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const noop = () => {};
/**
 * A float supported clamp function for a specific value.
 *
 * @param  value The value to clamp.
 * @param  min   The minimum value.
 * @param  max   The maximum value.
 *
 * @return A (float) number
 */


function floatClamp(value, min, max) {
  if (typeof value !== 'number') {
    return null;
  }

  return parseFloat(`${(0, _math.clamp)(value, min, max)}`);
}
/**
 * Hook to store a clamped value, derived from props.
 *
 * @param  settings
 * @return The controlled value and the value setter.
 */


function useControlledRangeValue(settings) {
  const {
    min,
    max,
    value: valueProp,
    initial
  } = settings;
  const [state, setInternalState] = (0, _hooks.useControlledState)(floatClamp(valueProp, min, max), {
    initial: floatClamp(initial !== null && initial !== void 0 ? initial : null, min, max),
    fallback: null
  });
  const setState = (0, _element.useCallback)(nextValue => {
    if (nextValue === null) {
      setInternalState(null);
    } else {
      setInternalState(floatClamp(nextValue, min, max));
    }
  }, [min, max]); // `state` can't be an empty string because we specified a fallback value of
  // `null` in `useControlledState`

  return [state, setState];
}
/**
 * Hook to encapsulate the debouncing "hover" to better handle the showing
 * and hiding of the Tooltip.
 *
 * @param  settings
 * @return Bound properties for use on a React.Node.
 */


function useDebouncedHoverInteraction(settings) {
  const {
    onHide = noop,
    onMouseLeave = noop,
    onMouseMove = noop,
    onShow = noop,
    timeout = 300
  } = settings;
  const [show, setShow] = (0, _element.useState)(false);
  const timeoutRef = (0, _element.useRef)();
  const setDebouncedTimeout = (0, _element.useCallback)(callback => {
    window.clearTimeout(timeoutRef.current);
    timeoutRef.current = window.setTimeout(callback, timeout);
  }, [timeout]);
  const handleOnMouseMove = (0, _element.useCallback)(event => {
    onMouseMove(event);
    setDebouncedTimeout(() => {
      if (!show) {
        setShow(true);
        onShow();
      }
    });
  }, []);
  const handleOnMouseLeave = (0, _element.useCallback)(event => {
    onMouseLeave(event);
    setDebouncedTimeout(() => {
      setShow(false);
      onHide();
    });
  }, []);
  (0, _element.useEffect)(() => {
    return () => {
      window.clearTimeout(timeoutRef.current);
    };
  });
  return {
    onMouseMove: handleOnMouseMove,
    onMouseLeave: handleOnMouseLeave
  };
}
//# sourceMappingURL=utils.js.map