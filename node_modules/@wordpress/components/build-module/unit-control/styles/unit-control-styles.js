import _styled from "@emotion/styled/base";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/**
 * External dependencies
 */
import { css } from '@emotion/react';

/**
 * Internal dependencies
 */
import { COLORS, CONFIG, rtl } from '../../utils';
import NumberControl from '../../number-control';
import { BackdropUI } from '../../input-control/styles/input-control-styles';
import { space } from '../../ui/utils/space'; // Using `selectSize` instead of `size` to avoid a type conflict with the
// `size` HTML attribute of the `select` element.

export const Root = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1bagdl33"
} : {
  target: "e1bagdl33",
  label: "Root"
})("box-sizing:border-box;position:relative;&&& ", BackdropUI, "{transition:box-shadow 0.1s linear;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCOEIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdWkvdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxudHlwZSBJbnB1dFByb3BzID0ge1xuXHRkaXNhYmxlVW5pdHM/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQuZGl2YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0LyogVGFyZ2V0IHRoZSBJbnB1dENvbnRyb2wncyBiYWNrZHJvcCBhbmQgbWFrZSBmb2N1cyBzdHlsZXMgc21vb3RoZXIuICovXG5cdCYmJiAkeyBCYWNrZHJvcFVJIH0ge1xuXHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdH1cbmA7XG5cbmNvbnN0IGFycm93U3R5bGVzID0gKCB7IGRpc2FibGVVbml0cyB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRpZiAoIGRpc2FibGVVbml0cyApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzYFxuXHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHQtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHRtYXJnaW46IDA7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHQtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cblx0XHRcdCR7IGFycm93U3R5bGVzIH07XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRwYWRkaW5nOiAycHggMXB4O1xuXHRcdFx0d2lkdGg6IDIwcHg7XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLmRhcmtHcmF5WyA1MDAgXSB9O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRcdG1heC13aWR0aDogNDhweDtcblx0XHRcdGhlaWdodDogMjRweDtcblx0XHRcdG1hcmdpbi1pbmxpbmUtZW5kOiAkeyBzcGFjZSggMiApIH07XG5cdFx0XHRwYWRkaW5nOiAkeyBzcGFjZSggMSApIH07XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzZWxlY3RTaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyBzaXplcy5sYXJnZSA6IHNpemVzLmRlZmF1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdExhYmVsID0gc3R5bGVkLmRpdjwgU2VsZWN0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblxuXHRcdCR7IGJhc2VVbml0TGFiZWxTdHlsZXMgfTtcblxuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0fVxuYDtcblxuY29uc3QgdW5pdFNlbGVjdFNpemVzID0gKCB7IHNlbGVjdFNpemUgPSAnZGVmYXVsdCcgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhciwgYm9yZGVyIDAuMXMgbGluZWFyO1xuXG5cdFx0XHQkeyBydGwoIHsgYm9yZGVyVG9wTGVmdFJhZGl1czogMCwgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCB9ICkoKSB9XG5cblx0XHRcdCY6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMubGlnaHRHcmF5WyAzMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdFx0Jjpob3ZlciB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0U2VsZWN0ID0gc3R5bGVkLnNlbGVjdDwgU2VsZWN0UHJvcHMgPmBcblx0Ly8gVGhlICYmIGNvdW50ZXJhY3RzIDxzZWxlY3Q+IHN0eWxlcyBpbiBXUCBmb3Jtcy5jc3Ncblx0JiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */"));

var _ref = process.env.NODE_ENV === "production" ? {
  name: "1y65o8",
  styles: "&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none;margin:0;}"
} : {
  name: "lcexyi-arrowStyles",
  styles: "&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none;margin:0;};label:arrowStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDVyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3VuaXQtY29udHJvbC9zdHlsZXMvdW5pdC1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XG5pbXBvcnQgeyBCYWNrZHJvcFVJIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RTaXplIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi8uLi91aS91dGlscy9zcGFjZSc7XG5cbi8vIFVzaW5nIGBzZWxlY3RTaXplYCBpbnN0ZWFkIG9mIGBzaXplYCB0byBhdm9pZCBhIHR5cGUgY29uZmxpY3Qgd2l0aCB0aGVcbi8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbnR5cGUgU2VsZWN0UHJvcHMgPSB7XG5cdHNlbGVjdFNpemU6IFNlbGVjdFNpemU7XG59O1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdGRpc2FibGVVbml0cz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXZgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHQvKiBUYXJnZXQgdGhlIElucHV0Q29udHJvbCdzIGJhY2tkcm9wIGFuZCBtYWtlIGZvY3VzIHN0eWxlcyBzbW9vdGhlci4gKi9cblx0JiYmICR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhcjtcblx0fVxuYDtcblxuY29uc3QgYXJyb3dTdHlsZXMgPSAoIHsgZGlzYWJsZVVuaXRzIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGlmICggZGlzYWJsZVVuaXRzICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Jjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcblx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdG1hcmdpbjogMDtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBWYWx1ZUlucHV0ID0gc3R5bGVkKCBOdW1iZXJDb250cm9sIClgXG5cdCYmJiB7XG5cdFx0aW5wdXQge1xuXHRcdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHR3aWR0aDogMTAwJTtcblxuXHRcdFx0JHsgYXJyb3dTdHlsZXMgfTtcblx0XHR9XG5cdH1cbmA7XG5cbmNvbnN0IGJhc2VVbml0TGFiZWxTdHlsZXMgPSAoIHsgc2VsZWN0U2l6ZSB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZGFya0dyYXlbIDUwMCBdIH07XG5cdFx0XHRmb250LXNpemU6IDhweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0bGV0dGVyLXNwYWNpbmc6IC0wLjVweDtcblx0XHRcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGhlbWUgfTtcblx0XHRcdGZvbnQtc2l6ZTogMTNweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyLCBib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5saWdodEdyYXlbIDMwMCBdIH07XG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZS1vZmZzZXQ6IDA7XG5cdFx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHRcdFx0ei1pbmRleDogMTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOmhvdmVyIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2VsZWN0U2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gc2l6ZXMubGFyZ2UgOiBzaXplcy5kZWZhdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiB7XG5cdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0LyogUmVtb3ZpbmcgbWFyZ2luIGVuc3VyZXMgZm9jdXMgc3R5bGVzIG5lYXRseSBvdmVybGF5IHRoZSB3cmFwcGVyLiAqL1xuXHRcdG1hcmdpbjogMDtcblx0XHRtaW4taGVpZ2h0OiBhdXRvO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXG5cdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR9XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cdFx0JHsgdW5pdFNlbGVjdFNpemVzIH07XG5cdH1cbmA7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const arrowStyles = _ref2 => {
  let {
    disableUnits
  } = _ref2;
  if (disableUnits) return '';
  return _ref;
}; // TODO: Resolve need to use &&& to increase specificity
// https://github.com/WordPress/gutenberg/issues/18483


export const ValueInput = /*#__PURE__*/_styled(NumberControl, process.env.NODE_ENV === "production" ? {
  target: "e1bagdl32"
} : {
  target: "e1bagdl32",
  label: "ValueInput"
})("&&&{input{appearance:none;-moz-appearance:textfield;display:block;width:100%;", arrowStyles, ";}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlEaUQiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdWkvdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxudHlwZSBJbnB1dFByb3BzID0ge1xuXHRkaXNhYmxlVW5pdHM/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQuZGl2YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0LyogVGFyZ2V0IHRoZSBJbnB1dENvbnRyb2wncyBiYWNrZHJvcCBhbmQgbWFrZSBmb2N1cyBzdHlsZXMgc21vb3RoZXIuICovXG5cdCYmJiAkeyBCYWNrZHJvcFVJIH0ge1xuXHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdH1cbmA7XG5cbmNvbnN0IGFycm93U3R5bGVzID0gKCB7IGRpc2FibGVVbml0cyB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRpZiAoIGRpc2FibGVVbml0cyApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzYFxuXHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHQtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHRtYXJnaW46IDA7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHQtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cblx0XHRcdCR7IGFycm93U3R5bGVzIH07XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRwYWRkaW5nOiAycHggMXB4O1xuXHRcdFx0d2lkdGg6IDIwcHg7XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLmRhcmtHcmF5WyA1MDAgXSB9O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRcdG1heC13aWR0aDogNDhweDtcblx0XHRcdGhlaWdodDogMjRweDtcblx0XHRcdG1hcmdpbi1pbmxpbmUtZW5kOiAkeyBzcGFjZSggMiApIH07XG5cdFx0XHRwYWRkaW5nOiAkeyBzcGFjZSggMSApIH07XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzZWxlY3RTaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyBzaXplcy5sYXJnZSA6IHNpemVzLmRlZmF1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdExhYmVsID0gc3R5bGVkLmRpdjwgU2VsZWN0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblxuXHRcdCR7IGJhc2VVbml0TGFiZWxTdHlsZXMgfTtcblxuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0fVxuYDtcblxuY29uc3QgdW5pdFNlbGVjdFNpemVzID0gKCB7IHNlbGVjdFNpemUgPSAnZGVmYXVsdCcgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhciwgYm9yZGVyIDAuMXMgbGluZWFyO1xuXG5cdFx0XHQkeyBydGwoIHsgYm9yZGVyVG9wTGVmdFJhZGl1czogMCwgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCB9ICkoKSB9XG5cblx0XHRcdCY6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMubGlnaHRHcmF5WyAzMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdFx0Jjpob3ZlciB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0U2VsZWN0ID0gc3R5bGVkLnNlbGVjdDwgU2VsZWN0UHJvcHMgPmBcblx0Ly8gVGhlICYmIGNvdW50ZXJhY3RzIDxzZWxlY3Q+IHN0eWxlcyBpbiBXUCBmb3Jtcy5jc3Ncblx0JiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */"));

const baseUnitLabelStyles = _ref3 => {
  let {
    selectSize
  } = _ref3;
  const sizes = {
    default: /*#__PURE__*/css("box-sizing:border-box;padding:2px 1px;width:20px;color:", COLORS.darkGray[500], ";font-size:8px;line-height:1;letter-spacing:-0.5px;text-transform:uppercase;text-align-last:center;" + (process.env.NODE_ENV === "production" ? "" : ";label:default;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdFYyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3VuaXQtY29udHJvbC9zdHlsZXMvdW5pdC1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XG5pbXBvcnQgeyBCYWNrZHJvcFVJIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RTaXplIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi8uLi91aS91dGlscy9zcGFjZSc7XG5cbi8vIFVzaW5nIGBzZWxlY3RTaXplYCBpbnN0ZWFkIG9mIGBzaXplYCB0byBhdm9pZCBhIHR5cGUgY29uZmxpY3Qgd2l0aCB0aGVcbi8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbnR5cGUgU2VsZWN0UHJvcHMgPSB7XG5cdHNlbGVjdFNpemU6IFNlbGVjdFNpemU7XG59O1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdGRpc2FibGVVbml0cz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXZgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHQvKiBUYXJnZXQgdGhlIElucHV0Q29udHJvbCdzIGJhY2tkcm9wIGFuZCBtYWtlIGZvY3VzIHN0eWxlcyBzbW9vdGhlci4gKi9cblx0JiYmICR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhcjtcblx0fVxuYDtcblxuY29uc3QgYXJyb3dTdHlsZXMgPSAoIHsgZGlzYWJsZVVuaXRzIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGlmICggZGlzYWJsZVVuaXRzICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Jjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcblx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdG1hcmdpbjogMDtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBWYWx1ZUlucHV0ID0gc3R5bGVkKCBOdW1iZXJDb250cm9sIClgXG5cdCYmJiB7XG5cdFx0aW5wdXQge1xuXHRcdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHR3aWR0aDogMTAwJTtcblxuXHRcdFx0JHsgYXJyb3dTdHlsZXMgfTtcblx0XHR9XG5cdH1cbmA7XG5cbmNvbnN0IGJhc2VVbml0TGFiZWxTdHlsZXMgPSAoIHsgc2VsZWN0U2l6ZSB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZGFya0dyYXlbIDUwMCBdIH07XG5cdFx0XHRmb250LXNpemU6IDhweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0bGV0dGVyLXNwYWNpbmc6IC0wLjVweDtcblx0XHRcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGhlbWUgfTtcblx0XHRcdGZvbnQtc2l6ZTogMTNweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyLCBib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5saWdodEdyYXlbIDMwMCBdIH07XG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZS1vZmZzZXQ6IDA7XG5cdFx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHRcdFx0ei1pbmRleDogMTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOmhvdmVyIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2VsZWN0U2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gc2l6ZXMubGFyZ2UgOiBzaXplcy5kZWZhdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiB7XG5cdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0LyogUmVtb3ZpbmcgbWFyZ2luIGVuc3VyZXMgZm9jdXMgc3R5bGVzIG5lYXRseSBvdmVybGF5IHRoZSB3cmFwcGVyLiAqL1xuXHRcdG1hcmdpbjogMDtcblx0XHRtaW4taGVpZ2h0OiBhdXRvO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXG5cdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR9XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cdFx0JHsgdW5pdFNlbGVjdFNpemVzIH07XG5cdH1cbmA7XG4iXX0= */"),
    large: /*#__PURE__*/css("box-sizing:border-box;min-width:24px;max-width:48px;height:24px;margin-inline-end:", space(2), ";padding:", space(1), ";color:", COLORS.ui.theme, ";font-size:13px;line-height:1;text-align-last:center;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;" + (process.env.NODE_ENV === "production" ? "" : ";label:large;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJFWSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3VuaXQtY29udHJvbC9zdHlsZXMvdW5pdC1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XG5pbXBvcnQgeyBCYWNrZHJvcFVJIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RTaXplIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi8uLi91aS91dGlscy9zcGFjZSc7XG5cbi8vIFVzaW5nIGBzZWxlY3RTaXplYCBpbnN0ZWFkIG9mIGBzaXplYCB0byBhdm9pZCBhIHR5cGUgY29uZmxpY3Qgd2l0aCB0aGVcbi8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbnR5cGUgU2VsZWN0UHJvcHMgPSB7XG5cdHNlbGVjdFNpemU6IFNlbGVjdFNpemU7XG59O1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdGRpc2FibGVVbml0cz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXZgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHQvKiBUYXJnZXQgdGhlIElucHV0Q29udHJvbCdzIGJhY2tkcm9wIGFuZCBtYWtlIGZvY3VzIHN0eWxlcyBzbW9vdGhlci4gKi9cblx0JiYmICR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhcjtcblx0fVxuYDtcblxuY29uc3QgYXJyb3dTdHlsZXMgPSAoIHsgZGlzYWJsZVVuaXRzIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGlmICggZGlzYWJsZVVuaXRzICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Jjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcblx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdG1hcmdpbjogMDtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBWYWx1ZUlucHV0ID0gc3R5bGVkKCBOdW1iZXJDb250cm9sIClgXG5cdCYmJiB7XG5cdFx0aW5wdXQge1xuXHRcdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHR3aWR0aDogMTAwJTtcblxuXHRcdFx0JHsgYXJyb3dTdHlsZXMgfTtcblx0XHR9XG5cdH1cbmA7XG5cbmNvbnN0IGJhc2VVbml0TGFiZWxTdHlsZXMgPSAoIHsgc2VsZWN0U2l6ZSB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZGFya0dyYXlbIDUwMCBdIH07XG5cdFx0XHRmb250LXNpemU6IDhweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0bGV0dGVyLXNwYWNpbmc6IC0wLjVweDtcblx0XHRcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGhlbWUgfTtcblx0XHRcdGZvbnQtc2l6ZTogMTNweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyLCBib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5saWdodEdyYXlbIDMwMCBdIH07XG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZS1vZmZzZXQ6IDA7XG5cdFx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHRcdFx0ei1pbmRleDogMTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOmhvdmVyIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2VsZWN0U2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gc2l6ZXMubGFyZ2UgOiBzaXplcy5kZWZhdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiB7XG5cdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0LyogUmVtb3ZpbmcgbWFyZ2luIGVuc3VyZXMgZm9jdXMgc3R5bGVzIG5lYXRseSBvdmVybGF5IHRoZSB3cmFwcGVyLiAqL1xuXHRcdG1hcmdpbjogMDtcblx0XHRtaW4taGVpZ2h0OiBhdXRvO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXG5cdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR9XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cdFx0JHsgdW5pdFNlbGVjdFNpemVzIH07XG5cdH1cbmA7XG4iXX0= */")
  };
  return selectSize === '__unstable-large' ? sizes.large : sizes.default;
};

export const UnitLabel = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "e1bagdl31"
} : {
  target: "e1bagdl31",
  label: "UnitLabel"
})("&&&{pointer-events:none;", baseUnitLabelStyles, ";color:", COLORS.gray[900], ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStGa0QiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdWkvdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxudHlwZSBJbnB1dFByb3BzID0ge1xuXHRkaXNhYmxlVW5pdHM/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQuZGl2YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0LyogVGFyZ2V0IHRoZSBJbnB1dENvbnRyb2wncyBiYWNrZHJvcCBhbmQgbWFrZSBmb2N1cyBzdHlsZXMgc21vb3RoZXIuICovXG5cdCYmJiAkeyBCYWNrZHJvcFVJIH0ge1xuXHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdH1cbmA7XG5cbmNvbnN0IGFycm93U3R5bGVzID0gKCB7IGRpc2FibGVVbml0cyB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRpZiAoIGRpc2FibGVVbml0cyApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzYFxuXHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHQtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHRtYXJnaW46IDA7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHQtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cblx0XHRcdCR7IGFycm93U3R5bGVzIH07XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRwYWRkaW5nOiAycHggMXB4O1xuXHRcdFx0d2lkdGg6IDIwcHg7XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLmRhcmtHcmF5WyA1MDAgXSB9O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRcdG1heC13aWR0aDogNDhweDtcblx0XHRcdGhlaWdodDogMjRweDtcblx0XHRcdG1hcmdpbi1pbmxpbmUtZW5kOiAkeyBzcGFjZSggMiApIH07XG5cdFx0XHRwYWRkaW5nOiAkeyBzcGFjZSggMSApIH07XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzZWxlY3RTaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyBzaXplcy5sYXJnZSA6IHNpemVzLmRlZmF1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdExhYmVsID0gc3R5bGVkLmRpdjwgU2VsZWN0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblxuXHRcdCR7IGJhc2VVbml0TGFiZWxTdHlsZXMgfTtcblxuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0fVxuYDtcblxuY29uc3QgdW5pdFNlbGVjdFNpemVzID0gKCB7IHNlbGVjdFNpemUgPSAnZGVmYXVsdCcgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhciwgYm9yZGVyIDAuMXMgbGluZWFyO1xuXG5cdFx0XHQkeyBydGwoIHsgYm9yZGVyVG9wTGVmdFJhZGl1czogMCwgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCB9ICkoKSB9XG5cblx0XHRcdCY6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMubGlnaHRHcmF5WyAzMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdFx0Jjpob3ZlciB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0U2VsZWN0ID0gc3R5bGVkLnNlbGVjdDwgU2VsZWN0UHJvcHMgPmBcblx0Ly8gVGhlICYmIGNvdW50ZXJhY3RzIDxzZWxlY3Q+IHN0eWxlcyBpbiBXUCBmb3Jtcy5jc3Ncblx0JiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */"));

const unitSelectSizes = _ref4 => {
  let {
    selectSize = 'default'
  } = _ref4;
  const sizes = {
    default: /*#__PURE__*/css("height:100%;border:1px solid transparent;transition:box-shadow 0.1s linear,border 0.1s linear;", rtl({
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    })(), " &:not(:disabled):hover{background-color:", COLORS.lightGray[300], ";}&:focus{border:1px solid ", COLORS.ui.borderFocus, ";box-shadow:inset 0 0 0 ", CONFIG.borderWidth + ' ' + COLORS.ui.borderFocus, ";outline-offset:0;outline:2px solid transparent;z-index:1;}" + (process.env.NODE_ENV === "production" ? "" : ";label:default;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJHYyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3VuaXQtY29udHJvbC9zdHlsZXMvdW5pdC1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XG5pbXBvcnQgeyBCYWNrZHJvcFVJIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RTaXplIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi8uLi91aS91dGlscy9zcGFjZSc7XG5cbi8vIFVzaW5nIGBzZWxlY3RTaXplYCBpbnN0ZWFkIG9mIGBzaXplYCB0byBhdm9pZCBhIHR5cGUgY29uZmxpY3Qgd2l0aCB0aGVcbi8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbnR5cGUgU2VsZWN0UHJvcHMgPSB7XG5cdHNlbGVjdFNpemU6IFNlbGVjdFNpemU7XG59O1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdGRpc2FibGVVbml0cz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXZgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHQvKiBUYXJnZXQgdGhlIElucHV0Q29udHJvbCdzIGJhY2tkcm9wIGFuZCBtYWtlIGZvY3VzIHN0eWxlcyBzbW9vdGhlci4gKi9cblx0JiYmICR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhcjtcblx0fVxuYDtcblxuY29uc3QgYXJyb3dTdHlsZXMgPSAoIHsgZGlzYWJsZVVuaXRzIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGlmICggZGlzYWJsZVVuaXRzICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Jjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcblx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdG1hcmdpbjogMDtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBWYWx1ZUlucHV0ID0gc3R5bGVkKCBOdW1iZXJDb250cm9sIClgXG5cdCYmJiB7XG5cdFx0aW5wdXQge1xuXHRcdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHR3aWR0aDogMTAwJTtcblxuXHRcdFx0JHsgYXJyb3dTdHlsZXMgfTtcblx0XHR9XG5cdH1cbmA7XG5cbmNvbnN0IGJhc2VVbml0TGFiZWxTdHlsZXMgPSAoIHsgc2VsZWN0U2l6ZSB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZGFya0dyYXlbIDUwMCBdIH07XG5cdFx0XHRmb250LXNpemU6IDhweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0bGV0dGVyLXNwYWNpbmc6IC0wLjVweDtcblx0XHRcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGhlbWUgfTtcblx0XHRcdGZvbnQtc2l6ZTogMTNweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyLCBib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5saWdodEdyYXlbIDMwMCBdIH07XG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZS1vZmZzZXQ6IDA7XG5cdFx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHRcdFx0ei1pbmRleDogMTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOmhvdmVyIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2VsZWN0U2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gc2l6ZXMubGFyZ2UgOiBzaXplcy5kZWZhdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiB7XG5cdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0LyogUmVtb3ZpbmcgbWFyZ2luIGVuc3VyZXMgZm9jdXMgc3R5bGVzIG5lYXRseSBvdmVybGF5IHRoZSB3cmFwcGVyLiAqL1xuXHRcdG1hcmdpbjogMDtcblx0XHRtaW4taGVpZ2h0OiBhdXRvO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXG5cdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR9XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cdFx0JHsgdW5pdFNlbGVjdFNpemVzIH07XG5cdH1cbmA7XG4iXX0= */"),
    large: /*#__PURE__*/css("display:flex;justify-content:center;align-items:center;&:hover{color:", COLORS.ui.borderFocus, ";box-shadow:inset 0 0 0 ", CONFIG.borderWidth + ' ' + COLORS.ui.borderFocus, ";outline:", CONFIG.borderWidth, " solid transparent;}&:focus{box-shadow:0 0 0 ", CONFIG.borderWidthFocus + ' ' + COLORS.ui.borderFocus, ";outline:", CONFIG.borderWidthFocus, " solid transparent;}" + (process.env.NODE_ENV === "production" ? "" : ";label:large;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStIWSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3VuaXQtY29udHJvbC9zdHlsZXMvdW5pdC1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XG5pbXBvcnQgeyBCYWNrZHJvcFVJIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RTaXplIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi8uLi91aS91dGlscy9zcGFjZSc7XG5cbi8vIFVzaW5nIGBzZWxlY3RTaXplYCBpbnN0ZWFkIG9mIGBzaXplYCB0byBhdm9pZCBhIHR5cGUgY29uZmxpY3Qgd2l0aCB0aGVcbi8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbnR5cGUgU2VsZWN0UHJvcHMgPSB7XG5cdHNlbGVjdFNpemU6IFNlbGVjdFNpemU7XG59O1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdGRpc2FibGVVbml0cz86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgUm9vdCA9IHN0eWxlZC5kaXZgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHQvKiBUYXJnZXQgdGhlIElucHV0Q29udHJvbCdzIGJhY2tkcm9wIGFuZCBtYWtlIGZvY3VzIHN0eWxlcyBzbW9vdGhlci4gKi9cblx0JiYmICR7IEJhY2tkcm9wVUkgfSB7XG5cdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhcjtcblx0fVxuYDtcblxuY29uc3QgYXJyb3dTdHlsZXMgPSAoIHsgZGlzYWJsZVVuaXRzIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGlmICggZGlzYWJsZVVuaXRzICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Jjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcblx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdG1hcmdpbjogMDtcblx0XHR9XG5cdGA7XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBWYWx1ZUlucHV0ID0gc3R5bGVkKCBOdW1iZXJDb250cm9sIClgXG5cdCYmJiB7XG5cdFx0aW5wdXQge1xuXHRcdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRcdC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHR3aWR0aDogMTAwJTtcblxuXHRcdFx0JHsgYXJyb3dTdHlsZXMgfTtcblx0XHR9XG5cdH1cbmA7XG5cbmNvbnN0IGJhc2VVbml0TGFiZWxTdHlsZXMgPSAoIHsgc2VsZWN0U2l6ZSB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdHBhZGRpbmc6IDJweCAxcHg7XG5cdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMuZGFya0dyYXlbIDUwMCBdIH07XG5cdFx0XHRmb250LXNpemU6IDhweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0bGV0dGVyLXNwYWNpbmc6IC0wLjVweDtcblx0XHRcdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5cdFx0XHR0ZXh0LWFsaWduLWxhc3Q6IGNlbnRlcjtcblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdFx0bWluLXdpZHRoOiAyNHB4O1xuXHRcdFx0bWF4LXdpZHRoOiA0OHB4O1xuXHRcdFx0aGVpZ2h0OiAyNHB4O1xuXHRcdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0XHRcdHBhZGRpbmc6ICR7IHNwYWNlKCAxICkgfTtcblx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGhlbWUgfTtcblx0XHRcdGZvbnQtc2l6ZTogMTNweDtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0TGFiZWwgPSBzdHlsZWQuZGl2PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5gO1xuXG5jb25zdCB1bml0U2VsZWN0U2l6ZXMgPSAoIHsgc2VsZWN0U2l6ZSA9ICdkZWZhdWx0JyB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogY3NzYFxuXHRcdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHR0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMXMgbGluZWFyLCBib3JkZXIgMC4xcyBsaW5lYXI7XG5cblx0XHRcdCR7IHJ0bCggeyBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLCBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwIH0gKSgpIH1cblxuXHRcdFx0Jjpub3QoOmRpc2FibGVkKTpob3ZlciB7XG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy5saWdodEdyYXlbIDMwMCBdIH07XG5cdFx0XHR9XG5cblx0XHRcdCY6Zm9jdXMge1xuXHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZS1vZmZzZXQ6IDA7XG5cdFx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHRcdFx0ei1pbmRleDogMTtcblx0XHRcdH1cblx0XHRgLFxuXHRcdGxhcmdlOiBjc3NgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXG5cdFx0XHQmOmhvdmVyIHtcblx0XHRcdFx0Y29sb3I6ICR7IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRib3gtc2hhZG93OiBpbnNldCAwIDAgMFxuXHRcdFx0XHRcdCR7IENPTkZJRy5ib3JkZXJXaWR0aCArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyArICcgJyArIENPTE9SUy51aS5ib3JkZXJGb2N1cyB9O1xuXHRcdFx0XHRvdXRsaW5lOiAkeyBDT05GSUcuYm9yZGVyV2lkdGhGb2N1cyB9IHNvbGlkIHRyYW5zcGFyZW50OyAvLyBGb3IgSGlnaCBDb250cmFzdCBNb2RlXG5cdFx0XHR9XG5cdFx0YCxcblx0fTtcblxuXHRyZXR1cm4gc2VsZWN0U2l6ZSA9PT0gJ19fdW5zdGFibGUtbGFyZ2UnID8gc2l6ZXMubGFyZ2UgOiBzaXplcy5kZWZhdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IFVuaXRTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQvLyBUaGUgJiYgY291bnRlcmFjdHMgPHNlbGVjdD4gc3R5bGVzIGluIFdQIGZvcm1zLmNzc1xuXHQmJiB7XG5cdFx0YXBwZWFyYW5jZTogbm9uZTtcblx0XHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0LyogUmVtb3ZpbmcgbWFyZ2luIGVuc3VyZXMgZm9jdXMgc3R5bGVzIG5lYXRseSBvdmVybGF5IHRoZSB3cmFwcGVyLiAqL1xuXHRcdG1hcmdpbjogMDtcblx0XHRtaW4taGVpZ2h0OiBhdXRvO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXG5cdFx0Jjpub3QoIDpkaXNhYmxlZCApIHtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR9XG5cblx0XHQkeyBiYXNlVW5pdExhYmVsU3R5bGVzIH07XG5cdFx0JHsgdW5pdFNlbGVjdFNpemVzIH07XG5cdH1cbmA7XG4iXX0= */")
  };
  return selectSize === '__unstable-large' ? sizes.large : sizes.default;
};

export const UnitSelect = _styled("select", process.env.NODE_ENV === "production" ? {
  target: "e1bagdl30"
} : {
  target: "e1bagdl30",
  label: "UnitSelect"
})("&&{appearance:none;background:transparent;border-radius:2px;border:none;display:block;outline:none;margin:0;min-height:auto;font-family:inherit;", baseUnitLabelStyles, ";", unitSelectSizes, ";&:not( :disabled ){cursor:pointer;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdW5pdC1jb250cm9sL3N0eWxlcy91bml0LWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNKc0QiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91bml0LWNvbnRyb2wvc3R5bGVzL3VuaXQtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRywgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IE51bWJlckNvbnRyb2wgZnJvbSAnLi4vLi4vbnVtYmVyLWNvbnRyb2wnO1xuaW1wb3J0IHsgQmFja2Ryb3BVSSB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0U2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdWkvdXRpbHMvc3BhY2UnO1xuXG4vLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG4vLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG50eXBlIFNlbGVjdFByb3BzID0ge1xuXHRzZWxlY3RTaXplOiBTZWxlY3RTaXplO1xufTtcblxudHlwZSBJbnB1dFByb3BzID0ge1xuXHRkaXNhYmxlVW5pdHM/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQuZGl2YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0LyogVGFyZ2V0IHRoZSBJbnB1dENvbnRyb2wncyBiYWNrZHJvcCBhbmQgbWFrZSBmb2N1cyBzdHlsZXMgc21vb3RoZXIuICovXG5cdCYmJiAkeyBCYWNrZHJvcFVJIH0ge1xuXHRcdHRyYW5zaXRpb246IGJveC1zaGFkb3cgMC4xcyBsaW5lYXI7XG5cdH1cbmA7XG5cbmNvbnN0IGFycm93U3R5bGVzID0gKCB7IGRpc2FibGVVbml0cyB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRpZiAoIGRpc2FibGVVbml0cyApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzYFxuXHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHQtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHRtYXJnaW46IDA7XG5cdFx0fVxuXHRgO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgVmFsdWVJbnB1dCA9IHN0eWxlZCggTnVtYmVyQ29udHJvbCApYFxuXHQmJiYge1xuXHRcdGlucHV0IHtcblx0XHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0XHQtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cblx0XHRcdCR7IGFycm93U3R5bGVzIH07XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBiYXNlVW5pdExhYmVsU3R5bGVzID0gKCB7IHNlbGVjdFNpemUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0XHRwYWRkaW5nOiAycHggMXB4O1xuXHRcdFx0d2lkdGg6IDIwcHg7XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLmRhcmtHcmF5WyA1MDAgXSB9O1xuXHRcdFx0Zm9udC1zaXplOiA4cHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdGxldHRlci1zcGFjaW5nOiAtMC41cHg7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0dGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRcdG1pbi13aWR0aDogMjRweDtcblx0XHRcdG1heC13aWR0aDogNDhweDtcblx0XHRcdGhlaWdodDogMjRweDtcblx0XHRcdG1hcmdpbi1pbmxpbmUtZW5kOiAkeyBzcGFjZSggMiApIH07XG5cdFx0XHRwYWRkaW5nOiAkeyBzcGFjZSggMSApIH07XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0XHRmb250LXNpemU6IDEzcHg7XG5cdFx0XHRsaW5lLWhlaWdodDogMTtcblx0XHRcdHRleHQtYWxpZ24tbGFzdDogY2VudGVyO1xuXHRcdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblx0XHRgLFxuXHR9O1xuXG5cdHJldHVybiBzZWxlY3RTaXplID09PSAnX191bnN0YWJsZS1sYXJnZScgPyBzaXplcy5sYXJnZSA6IHNpemVzLmRlZmF1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgVW5pdExhYmVsID0gc3R5bGVkLmRpdjwgU2VsZWN0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblxuXHRcdCR7IGJhc2VVbml0TGFiZWxTdHlsZXMgfTtcblxuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0fVxuYDtcblxuY29uc3QgdW5pdFNlbGVjdFNpemVzID0gKCB7IHNlbGVjdFNpemUgPSAnZGVmYXVsdCcgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IGNzc2Bcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdFx0dHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjFzIGxpbmVhciwgYm9yZGVyIDAuMXMgbGluZWFyO1xuXG5cdFx0XHQkeyBydGwoIHsgYm9yZGVyVG9wTGVmdFJhZGl1czogMCwgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCB9ICkoKSB9XG5cblx0XHRcdCY6bm90KDpkaXNhYmxlZCk6aG92ZXIge1xuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMubGlnaHRHcmF5WyAzMDAgXSB9O1xuXHRcdFx0fVxuXG5cdFx0XHQmOmZvY3VzIHtcblx0XHRcdFx0Ym9yZGVyOiAxcHggc29saWQgJHsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoICsgJyAnICsgQ09MT1JTLnVpLmJvcmRlckZvY3VzIH07XG5cdFx0XHRcdG91dGxpbmUtb2Zmc2V0OiAwO1xuXHRcdFx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0XHRcdHotaW5kZXg6IDE7XG5cdFx0XHR9XG5cdFx0YCxcblx0XHRsYXJnZTogY3NzYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRcdFx0Jjpob3ZlciB7XG5cdFx0XHRcdGNvbG9yOiAkeyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0Ym94LXNoYWRvdzogaW5zZXQgMCAwIDBcblx0XHRcdFx0XHQkeyBDT05GSUcuYm9yZGVyV2lkdGggKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoIH0gc29saWQgdHJhbnNwYXJlbnQ7IC8vIEZvciBIaWdoIENvbnRyYXN0IE1vZGVcblx0XHRcdH1cblxuXHRcdFx0Jjpmb2N1cyB7XG5cdFx0XHRcdGJveC1zaGFkb3c6IDAgMCAwXG5cdFx0XHRcdFx0JHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgKyAnICcgKyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgfTtcblx0XHRcdFx0b3V0bGluZTogJHsgQ09ORklHLmJvcmRlcldpZHRoRm9jdXMgfSBzb2xpZCB0cmFuc3BhcmVudDsgLy8gRm9yIEhpZ2ggQ29udHJhc3QgTW9kZVxuXHRcdFx0fVxuXHRcdGAsXG5cdH07XG5cblx0cmV0dXJuIHNlbGVjdFNpemUgPT09ICdfX3Vuc3RhYmxlLWxhcmdlJyA/IHNpemVzLmxhcmdlIDogc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBVbml0U2VsZWN0ID0gc3R5bGVkLnNlbGVjdDwgU2VsZWN0UHJvcHMgPmBcblx0Ly8gVGhlICYmIGNvdW50ZXJhY3RzIDxzZWxlY3Q+IHN0eWxlcyBpbiBXUCBmb3Jtcy5jc3Ncblx0JiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdC8qIFJlbW92aW5nIG1hcmdpbiBlbnN1cmVzIGZvY3VzIHN0eWxlcyBuZWF0bHkgb3ZlcmxheSB0aGUgd3JhcHBlci4gKi9cblx0XHRtYXJnaW46IDA7XG5cdFx0bWluLWhlaWdodDogYXV0bztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblxuXHRcdCY6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0fVxuXG5cdFx0JHsgYmFzZVVuaXRMYWJlbFN0eWxlcyB9O1xuXHRcdCR7IHVuaXRTZWxlY3RTaXplcyB9O1xuXHR9XG5gO1xuIl19 */"));
//# sourceMappingURL=unit-control-styles.js.map