import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";
// @ts-nocheck

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { createPortal, useCallback, useEffect, useRef, useState, forwardRef } from '@wordpress/element';
import { useInstanceId, useFocusReturn, useFocusOnMount, __experimentalUseFocusOutside as useFocusOutside, useConstrainedTabbing, useMergeRefs } from '@wordpress/compose';
import { ESCAPE } from '@wordpress/keycodes';
import { __ } from '@wordpress/i18n';
import { close } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import * as ariaHelper from './aria-helper';
import Button from '../button';
import StyleProvider from '../style-provider'; // Used to count the number of open modals.

let openModalCount = 0;

function Modal(props, forwardedRef) {
  const {
    bodyOpenClassName = 'modal-open',
    role = 'dialog',
    title = null,
    focusOnMount = true,
    shouldCloseOnEsc = true,
    shouldCloseOnClickOutside = true,
    isDismissible = true,

    /* Accessibility. */
    aria = {
      labelledby: null,
      describedby: null
    },
    onRequestClose,
    icon,
    closeButtonLabel,
    children,
    style,
    overlayClassName,
    className,
    contentLabel,
    onKeyDown,
    isFullScreen = false,
    __experimentalHideHeader = false
  } = props;
  const ref = useRef();
  const instanceId = useInstanceId(Modal);
  const headingId = title ? `components-modal-header-${instanceId}` : aria.labelledby;
  const focusOnMountRef = useFocusOnMount(focusOnMount);
  const constrainedTabbingRef = useConstrainedTabbing();
  const focusReturnRef = useFocusReturn();
  const focusOutsideProps = useFocusOutside(onRequestClose);
  const [hasScrolledContent, setHasScrolledContent] = useState(false);
  useEffect(() => {
    openModalCount++;

    if (openModalCount === 1) {
      ariaHelper.hideApp(ref.current);
      document.body.classList.add(bodyOpenClassName);
    }

    return () => {
      openModalCount--;

      if (openModalCount === 0) {
        document.body.classList.remove(bodyOpenClassName);
        ariaHelper.showApp();
      }
    };
  }, [bodyOpenClassName]);

  function handleEscapeKeyDown(event) {
    if (shouldCloseOnEsc && event.keyCode === ESCAPE && !event.defaultPrevented) {
      event.preventDefault();

      if (onRequestClose) {
        onRequestClose(event);
      }
    }
  }

  const onContentContainerScroll = useCallback(e => {
    var _e$target$scrollTop, _e$target;

    const scrollY = (_e$target$scrollTop = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.scrollTop) !== null && _e$target$scrollTop !== void 0 ? _e$target$scrollTop : -1;

    if (!hasScrolledContent && scrollY > 0) {
      setHasScrolledContent(true);
    } else if (hasScrolledContent && scrollY <= 0) {
      setHasScrolledContent(false);
    }
  }, [hasScrolledContent]);
  return createPortal( // eslint-disable-next-line jsx-a11y/no-static-element-interactions
  createElement("div", {
    ref: useMergeRefs([ref, forwardedRef]),
    className: classnames('components-modal__screen-overlay', overlayClassName),
    onKeyDown: handleEscapeKeyDown
  }, createElement(StyleProvider, {
    document: document
  }, createElement("div", _extends({
    className: classnames('components-modal__frame', className, {
      'is-full-screen': isFullScreen
    }),
    style: style,
    ref: useMergeRefs([constrainedTabbingRef, focusReturnRef, focusOnMountRef]),
    role: role,
    "aria-label": contentLabel,
    "aria-labelledby": contentLabel ? null : headingId,
    "aria-describedby": aria.describedby,
    tabIndex: "-1"
  }, shouldCloseOnClickOutside ? focusOutsideProps : {}, {
    onKeyDown: onKeyDown
  }), createElement("div", {
    className: classnames('components-modal__content', {
      'hide-header': __experimentalHideHeader,
      'has-scrolled-content': hasScrolledContent
    }),
    role: "document",
    onScroll: onContentContainerScroll
  }, !__experimentalHideHeader && createElement("div", {
    className: "components-modal__header"
  }, createElement("div", {
    className: "components-modal__header-heading-container"
  }, icon && createElement("span", {
    className: "components-modal__icon-container",
    "aria-hidden": true
  }, icon), title && createElement("h1", {
    id: headingId,
    className: "components-modal__header-heading"
  }, title)), isDismissible && createElement(Button, {
    onClick: onRequestClose,
    icon: close,
    label: closeButtonLabel || __('Close dialog')
  })), children)))), document.body);
}

export default forwardRef(Modal);
//# sourceMappingURL=index.js.map